Model: <class 'multiagent.coma.COMAAgent'>, Dir: simple_tag
num_envs: 16, state_size: [(3, 16), (1, 14)], action_size: [[3, 5], [1, 5]], action_space: [<gym.spaces.multi_discrete.MultiDiscrete object at 0x7f4c330c0668>, <gym.spaces.multi_discrete.MultiDiscrete object at 0x7f4c330c0748>],

import torch
import random
import numpy as np
from utils.wrappers import ParallelAgent
from utils.network import PTNetwork, PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, REG_LAMBDA, EPS_MIN

EPS_DECAY = 0.995             	# The rate at which eps decays from EPS_MAX to EPS_MIN

class COMAActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.recurrent = torch.nn.GRUCell(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_probs = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.init_hidden()

	def forward(self, state, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		out_dims = state.size()[:-1]
		state = state.view(int(np.prod(out_dims)), -1)
		if self.hidden.size(0) != state.size(0): self.init_hidden(state.size(0))
		self.hidden = self.recurrent(state, self.hidden)
		action_probs = self.action_probs(self.hidden).softmax(-1)
		action_probs = action_probs.view(*out_dims, -1)
		return action_probs

	def init_hidden(self, batch_size=1):
		self.hidden = torch.zeros([batch_size, ACTOR_HIDDEN])

class COMACritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_values = torch.nn.Linear(CRITIC_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		q_values = self.q_values(state)
		return q_values

class COMANetwork(PTNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(gpu=gpu)
		self.state_size = [state_size] if type(state_size[0]) in [int, np.int32] else state_size
		self.action_size = [action_size] if type(action_size[0]) in [int, np.int32] else action_size
		self.n_agents = lambda size: 1 if len(size)==1 else size[0]
		make_actor = lambda s_size,a_size: COMAActor([s_size[-1] + a_size[-1] + self.n_agents(s_size)], a_size)
		make_critic = lambda s_size,a_size: COMACritic([np.sum([np.prod(s) for s in self.state_size]) + 2*np.sum([np.prod(a) for a in self.action_size]) + s_size[-1] + self.n_agents(s_size)], a_size)
		self.models = [PTACNetwork(s_size, a_size, make_actor, make_critic, lr=lr, gpu=gpu, load=load) for s_size,a_size in zip(self.state_size, self.action_size)]
		if load: self.load_model(load)
		
	def get_action_probs(self, state, sample=True, grad=True, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			action = [model.actor_local(s.to(self.device), sample) for s,model in zip(state, self.models)]
			return [a.cpu().numpy().astype(np.float32) for a in action] if numpy else action

	def get_value(self, state, grad=True, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_values = [model.critic_local(s.to(self.device)) for s,model in zip(state, self.models)]
			return [q.cpu().numpy() for q in q_values] if numpy else q_values

	def optimize(self, actions, actor_inputs, critic_inputs, q_values, q_targets):
		for model,action,actor_input,critic_input,q_value,q_target in zip(self.models, actions, actor_inputs, critic_inputs, q_values, q_targets):
			for t in reversed(range(q_target.size(0))):
				q_value[t] = model.critic_local(critic_input[t])
				q_select = torch.gather(q_value[t], dim=-1, index=action[t].argmax(-1, keepdims=True)).squeeze(-1)
				critic_loss = (q_select - q_target[t].detach()).pow(2)
				model.step(model.critic_optimizer, critic_loss.mean(), retain=t>0)

			hidden = model.actor_local.hidden
			action_probs = torch.stack([model.actor_local(actor_input[t]) for t in range(q_target.size(0))], dim=0)
			baseline = (action_probs * q_value[:-1]).sum(-1, keepdims=True).detach()
			q_selected = torch.gather(q_value[:-1], dim=-1, index=action[:-1].argmax(-1, keepdims=True))
			log_probs = torch.gather(action_probs, dim=-1, index=action[:-1].argmax(-1, keepdims=True)).log()
			advantages = (q_selected - baseline).detach()
			actor_loss = (advantages * log_probs).sum()
			model.step(model.actor_optimizer, actor_loss.mean())
			model.actor_local.hidden = hidden

	def save_model(self, dirname="pytorch", name="best"):
		[model.save_model("coma", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]
		
	def load_model(self, dirname="pytorch", name="best"):
		[model.load_model("coma", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]

class COMAAgent(PTACAgent):
	def __init__(self, state_size, action_size, update_freq=NUM_STEPS, lr=LEARN_RATE, decay=EPS_DECAY, gpu=True, load=None):
		super().__init__(state_size, action_size, COMANetwork, lr=lr, update_freq=update_freq, decay=decay, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, numpy=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state)
		if not hasattr(self, "action"): self.action = [np.zeros_like(a) for a in action_random]
		actor_inputs = []
		state_list = self.to_tensor(state)
		state_list = [state_list] if type(state_list) != list else state_list
		for i,(state,last_a,s_size,a_size) in enumerate(zip(state_list, self.action, self.state_size, self.action_size)):
			n_agents = self.network.n_agents(s_size)
			last_action = last_a if len(state.shape)-len(s_size) == len(last_a.shape)-len(a_size) else np.zeros_like(action_random[i])
			agent_ids = np.eye(n_agents) if len(state.shape)==len(s_size) else np.repeat(np.expand_dims(np.eye(n_agents), 0), repeats=state.shape[0], axis=0)
			actor_input = torch.tensor(np.concatenate([state, last_action, agent_ids], axis=-1), device=self.network.device).float()
			actor_inputs.append(actor_input)
		action_greedy = self.network.get_action_probs(actor_inputs, sample=sample, grad=False, numpy=numpy)
		action = action_random if numpy and random.random() < eps else action_greedy
		if numpy: self.action = action
		return action

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()

			n_agents = [self.network.n_agents(a_size) for a_size in self.action_size]
			states = [torch.cat([s, ns.unsqueeze(0)], dim=0) for s,ns in zip(states, self.to_tensor(next_state))]
			actions = [torch.cat([a, na.unsqueeze(0)], dim=0) for a,na in zip(actions, self.get_action(next_state, numpy=False))]
			states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
			actions_one_hot = [one_hot(a.argmax(-1, keepdims=True), a_size[-1]) for a,a_size in zip(actions, self.action_size)]
			actions_one_hot_joint = torch.cat([a.view(*a.shape[:-len(a_size)], np.prod(a_size)) for a,a_size in zip(actions_one_hot, self.action_size)], dim=-1)
			last_actions = [torch.cat([torch.zeros_like(a[0:1]), a[:-1]], dim=0) for a in actions_one_hot]
			last_actions_joint = torch.cat([a.view(*a.shape[:-len(a_size)], np.prod(a_size)) for a,a_size in zip(last_actions, self.action_size)], dim=-1)
			agent_mask = [(1-torch.eye(n_agent)).view(-1, 1).repeat(1, a_size[-1]).view(n_agent, -1) for a_size,n_agent in zip(self.action_size, n_agents)]
			action_mask = torch.ones([1, 1, np.sum(n_agents), np.sum([n_agent*a_size[-1] for a_size,n_agent in zip(self.action_size, n_agents)])])
			cols, rows = [0, *np.cumsum(n_agents)], [0, *np.cumsum([n_agent*a_size[-1] for a_size,n_agent in zip(self.action_size, n_agents)])]
			for i,mask in enumerate(agent_mask): action_mask[...,cols[i]:cols[i+1], rows[i]:rows[i+1]] = mask

			states_joint, actions_joint, last_actions_joint = [x.unsqueeze(-2).repeat_interleave(action_mask.shape[-2], dim=-2) for x in [states_joint, actions_one_hot_joint, last_actions_joint]]
			joint_inputs = torch.cat([states_joint, actions_joint * action_mask, last_actions_joint], dim=-1).split(n_agents, dim=-2)
			agent_ids = [torch.eye(self.network.n_agents(a_size)).unsqueeze(0).unsqueeze(0).expand(*a.shape[:2], -1, -1) for a_size, a in zip(self.action_size, actions)]
			critic_inputs = [torch.cat([joint_input, state, agent_id], dim=-1) for joint_input,state,agent_id in zip(joint_inputs, states, agent_ids)]
			actor_inputs = [torch.cat([state, last_action, agent_id], dim=-1) for state,last_action,agent_id in zip(states, last_actions, agent_ids)]

			q_values = self.network.get_value(critic_inputs, grad=False)
			q_selecteds = [torch.gather(q_value, dim=-1, index=a.argmax(-1, keepdims=True)).squeeze(-1) for q_value,a in zip(q_values,actions)]
			q_targets = [self.compute_gae(q_selected[-1], reward.unsqueeze(-1), done.unsqueeze(-1), q_selected[:-1])[0] for q_selected,reward,done in zip(q_selecteds, rewards, dones)]
			self.network.optimize(actions, actor_inputs, critic_inputs, q_values, q_targets)
		if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

def one_hot(indices, depth):
	shape = [*indices.shape[:-1], depth]
	one_hot = torch.zeros(shape)
	one_hot.scatter_(-1,indices, 1)
	return one_hot
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 10					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 10000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import particle_envs.make_env as pgym
# import football.gfootball.env as ggym
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from multiagent.coma import COMAAgent
from multiagent.maddpg import MADDPGAgent
from multiagent.mappo import MAPPOAgent
from utils.wrappers import ParallelAgent, SelfPlayAgent, ParticleTeamEnv, FootballTeamEnv
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.misc import Logger, rollout
np.set_printoptions(precision=3)

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "academy_empty_goal", "academy_run_to_score", "academy_run_to_score_with_keeper", "academy_single_goal_versus_lazy", "academy_3_vs_1_with_keeper", "1_vs_1_easy", "3_vs_3_custom", "5_vs_5", "11_vs_11_stochastic", "test_example_multiagent"]
ptc_envs = ["simple_adversary", "simple_speaker_listener", "simple_tag", "simple_spread", "simple_push"]
env_name = gym_envs[0]
env_name = gfb_envs[-4]
env_name = ptc_envs[-3]

def make_env(env_name=env_name, log=False, render=False):
	if env_name in gym_envs: return gym.make(env_name)
	if env_name in ptc_envs: return ParticleTeamEnv(pgym.make_env(env_name))
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	multiagent_args = {"number_of_left_players_agent_controls":3, "number_of_right_players_agent_controls":0} if env_name == "3_vs_3_custom" else {}
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=render, **multiagent_args)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space}")
	return FootballTeamEnv(env)

def run(model, steps=10000, ports=16, eval_at=1000, checkpoint=False, save_best=False, log=True, render=True):
	num_envs = len(ports) if type(ports) == list else min(ports, 64)
	envs = EnvManager(make_env, ports) if type(ports) == list else EnsembleEnv(make_env, ports, render=False)
	model = COMAAgent if type(envs.env.action_space) == list else model
	agent = ParallelAgent(envs.state_size, envs.action_size, model, num_envs=num_envs, gpu=False, agent2=RandomAgent) 
	logger = Logger(model, env_name, num_envs=num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space)
	states = envs.reset()
	total_rewards = []
	for s in range(steps):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if np.any(dones[0]):
			rollouts = [rollout(envs.env, agent.reset(1), render=render) for _ in range(1)]
			test_reward = np.mean(rollouts, axis=0) - np.std(rollouts, axis=0)
			total_rewards.append(test_reward)
			if checkpoint: agent.save_model(env_name, "checkpoint")
			if save_best and total_rewards[-1] >= max(total_rewards): agent.save_model(env_name)
			if log: logger.log(f"Step: {s}, Reward: {test_reward+np.std(rollouts, axis=0)} [{np.std(rollouts):.4f}], Avg: {np.mean(total_rewards, axis=0)} ({agent.agent.eps:.3f})")
			agent.reset(num_envs)

def trial(model):
	envs = EnsembleEnv(make_env, 0, log=True, render=True)
	agent = ParallelAgent(envs.state_size, envs.action_size, model, load=f"{env_name}")
	print(f"Reward: {rollout(envs.env, agent, eps=0.02, render=True)}")
	envs.close()

def parse_args():
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
	parser.add_argument("--model", type=str, default="ppo", choices=["ddqn", "ddpg", "ppo", "rand"], help="Which reinforcement learning algorithm to use")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	parser.add_argument("--test", action="store_true", help="Whether to show a trial run")
	return parser.parse_args()

if __name__ == "__main__":
	args = parse_args()
	model = DDPGAgent if args.model == "ddpg" else PPOAgent if args.model == "ppo" else DDQNAgent if args.model == "ddqn" else RandomAgent
	if args.test:
		trial(model)
	elif args.selfport is not None:
		EnvWorker(args.selfport, make_env).start()
	else:
		run(model, args.steps, args.workerports[0] if len(args.workerports)==1 else args.workerports)

Step: 49, Reward: [   0.    -312.453] [156.2263], Avg: [   0.    -312.453] (0.995)
Step: 99, Reward: [   0.   -511.07] [255.5349], Avg: [   0.    -411.761] (0.990)
Step: 149, Reward: [   0.    -347.649] [173.8244], Avg: [   0.   -390.39] (0.985)
Step: 199, Reward: [  0.    -15.732] [7.8659], Avg: [   0.    -296.726] (0.980)
Step: 249, Reward: [   0.    -477.137] [238.5686], Avg: [   0.    -332.808] (0.975)
Step: 299, Reward: [ 0.    -6.296] [3.1480], Avg: [   0.    -278.389] (0.970)
Step: 349, Reward: [   0.    -205.833] [102.9165], Avg: [   0.    -268.024] (0.966)
Step: 399, Reward: [  20.    -400.147] [210.0734], Avg: [   2.5  -284.54] (0.961)
Step: 449, Reward: [   0.    -399.294] [199.6470], Avg: [   2.222 -297.29 ] (0.956)
Step: 499, Reward: [   0.    -231.298] [115.6491], Avg: [   2.    -290.691] (0.951)
Step: 549, Reward: [   0.    -253.964] [126.9820], Avg: [   1.818 -287.352] (0.946)
Step: 599, Reward: [  40.    -180.042] [110.0211], Avg: [   5.   -278.41] (0.942)
Step: 649, Reward: [   0.    -293.817] [146.9084], Avg: [   4.615 -279.595] (0.937)
Step: 699, Reward: [   0.    -110.597] [55.2984], Avg: [   4.286 -267.523] (0.932)
Step: 749, Reward: [  10.    -188.486] [99.2428], Avg: [   4.667 -262.254] (0.928)
Step: 799, Reward: [   0.    -150.626] [75.3129], Avg: [   4.375 -255.277] (0.923)
Step: 849, Reward: [   0.    -166.755] [83.3775], Avg: [   4.118 -250.07 ] (0.918)
Step: 899, Reward: [  20.    -223.454] [121.7272], Avg: [   5.    -248.592] (0.914)
Step: 949, Reward: [   0.    -289.807] [144.9037], Avg: [   4.737 -250.761] (0.909)
Step: 999, Reward: [   0.    -259.263] [129.6313], Avg: [   4.5   -251.186] (0.905)
Step: 1049, Reward: [  0.    -51.761] [25.8803], Avg: [   4.286 -241.69 ] (0.900)
Step: 1099, Reward: [  0.    -22.344] [11.1721], Avg: [   4.091 -231.719] (0.896)
Step: 1149, Reward: [ 20.    -77.321] [48.6607], Avg: [   4.783 -225.006] (0.891)
Step: 1199, Reward: [0. 0.] [0.0000], Avg: [   4.583 -215.631] (0.887)
Step: 1249, Reward: [   0.    -535.732] [267.8658], Avg: [   4.4   -228.435] (0.882)
Step: 1299, Reward: [   0.    -145.592] [72.7962], Avg: [   4.231 -225.249] (0.878)
Step: 1349, Reward: [  10.    -177.423] [93.7115], Avg: [   4.444 -223.477] (0.873)
Step: 1399, Reward: [0. 0.] [0.0000], Avg: [   4.286 -215.496] (0.869)
Step: 1449, Reward: [   0.    -456.897] [228.4483], Avg: [   4.138 -223.82 ] (0.865)
Step: 1499, Reward: [   0.    -362.933] [181.4665], Avg: [   4.    -228.457] (0.860)
Step: 1549, Reward: [   0.    -225.795] [112.8976], Avg: [   3.871 -228.372] (0.856)
Step: 1599, Reward: [  10.    -374.272] [192.1358], Avg: [   4.062 -232.931] (0.852)
Step: 1649, Reward: [   0.    -664.143] [332.0714], Avg: [   3.939 -245.998] (0.848)
Step: 1699, Reward: [   0.    -375.858] [187.9292], Avg: [   3.824 -249.817] (0.843)
Step: 1749, Reward: [   0.    -376.982] [188.4912], Avg: [   3.714 -253.451] (0.839)
Step: 1799, Reward: [   0.    -164.048] [82.0241], Avg: [   3.611 -250.967] (0.835)
Step: 1849, Reward: [  60.    -253.798] [156.8991], Avg: [   5.135 -251.044] (0.831)
Step: 1899, Reward: [  0.    -50.774] [25.3869], Avg: [   5.    -245.773] (0.827)
Step: 1949, Reward: [   0.    -451.624] [225.8119], Avg: [   4.872 -251.052] (0.822)
Step: 1999, Reward: [   0.    -318.216] [159.1079], Avg: [   4.75  -252.731] (0.818)
Step: 2049, Reward: [  10.    -249.939] [129.9693], Avg: [   4.878 -252.663] (0.814)
Step: 2099, Reward: [   0.   -396.03] [198.0148], Avg: [   4.762 -256.076] (0.810)
Step: 2149, Reward: [   0.    -454.837] [227.4187], Avg: [   4.651 -260.699] (0.806)
Step: 2199, Reward: [   0.    -249.736] [124.8681], Avg: [   4.545 -260.449] (0.802)
Step: 2249, Reward: [   0.    -586.982] [293.4908], Avg: [   4.444 -267.706] (0.798)
Step: 2299, Reward: [  0.    -97.511] [48.7554], Avg: [   4.348 -264.006] (0.794)
Step: 2349, Reward: [   0.    -331.234] [165.6170], Avg: [   4.255 -265.436] (0.790)
Step: 2399, Reward: [   0.    -384.514] [192.2569], Avg: [   4.167 -267.917] (0.786)
Step: 2449, Reward: [   0.    -357.313] [178.6565], Avg: [   4.082 -269.741] (0.782)
Step: 2499, Reward: [   0.    -336.263] [168.1315], Avg: [   4.    -271.072] (0.778)
Step: 2549, Reward: [ 30.    -37.248] [33.6239], Avg: [   4.51  -266.487] (0.774)
Step: 2599, Reward: [   0.    -416.314] [208.1568], Avg: [   4.423 -269.368] (0.771)
Step: 2649, Reward: [  20.   -188.05] [104.0248], Avg: [   4.717 -267.834] (0.767)
Step: 2699, Reward: [   0.    -142.386] [71.1928], Avg: [   4.63  -265.511] (0.763)
Step: 2749, Reward: [  0.    -65.119] [32.5594], Avg: [   4.545 -261.867] (0.759)
Step: 2799, Reward: [0. 0.] [0.0000], Avg: [   4.464 -257.191] (0.755)
Step: 2849, Reward: [  10.   -379.51] [194.7551], Avg: [   4.561 -259.337] (0.751)
Step: 2899, Reward: [  90.    -164.659] [127.3296], Avg: [   6.034 -257.705] (0.748)
Step: 2949, Reward: [   0.    -408.086] [204.0432], Avg: [   5.932 -260.254] (0.744)
Step: 2999, Reward: [  10.    -207.042] [108.5211], Avg: [   6.    -259.367] (0.740)
Step: 3049, Reward: [  0.    -67.765] [33.8824], Avg: [   5.902 -256.226] (0.737)
Step: 3099, Reward: [  10.    -211.329] [110.6643], Avg: [   5.968 -255.502] (0.733)
Step: 3149, Reward: [   0.    -302.159] [151.0796], Avg: [   5.873 -256.242] (0.729)
Step: 3199, Reward: [   0.    -302.713] [151.3566], Avg: [   5.781 -256.968] (0.726)
Step: 3249, Reward: [  0.    -76.332] [38.1658], Avg: [   5.692 -254.189] (0.722)
Step: 3299, Reward: [ 10.   -38.82] [24.4099], Avg: [   5.758 -250.926] (0.718)
Step: 3349, Reward: [   0.    -495.279] [247.6397], Avg: [   5.672 -254.573] (0.715)
Step: 3399, Reward: [   0.    -236.086] [118.0429], Avg: [   5.588 -254.301] (0.711)
Step: 3449, Reward: [  0.    -21.708] [10.8540], Avg: [   5.507 -250.93 ] (0.708)
Step: 3499, Reward: [  10.    -228.682] [119.3410], Avg: [   5.571 -250.613] (0.704)
Step: 3549, Reward: [   0.    -235.001] [117.5004], Avg: [   5.493 -250.393] (0.701)
Step: 3599, Reward: [   0.    -112.028] [56.0141], Avg: [   5.417 -248.471] (0.697)
Step: 3649, Reward: [   0.    -273.766] [136.8828], Avg: [   5.342 -248.817] (0.694)
Step: 3699, Reward: [   0.    -296.575] [148.2876], Avg: [   5.27  -249.463] (0.690)
Step: 3749, Reward: [   0.   -305.65] [152.8251], Avg: [   5.2   -250.212] (0.687)
Step: 3799, Reward: [   0.    -471.232] [235.6162], Avg: [   5.132 -253.12 ] (0.683)
Step: 3849, Reward: [0. 0.] [0.0000], Avg: [   5.065 -249.833] (0.680)
Step: 3899, Reward: [   0.    -323.001] [161.5004], Avg: [   5.    -250.771] (0.676)
Step: 3949, Reward: [   0.    -286.363] [143.1817], Avg: [   4.937 -251.221] (0.673)
Step: 3999, Reward: [ 10.    -51.036] [30.5181], Avg: [   5.    -248.719] (0.670)
Step: 4049, Reward: [  0.    -21.273] [10.6366], Avg: [   4.938 -245.911] (0.666)
Step: 4099, Reward: [   0.    -362.403] [181.2015], Avg: [   4.878 -247.332] (0.663)
Step: 4149, Reward: [   0.    -372.511] [186.2553], Avg: [   4.819 -248.84 ] (0.660)
Step: 4199, Reward: [ 0.    -6.891] [3.4455], Avg: [   4.762 -245.96 ] (0.656)
Step: 4249, Reward: [  20.    -287.363] [153.6813], Avg: [   4.941 -246.447] (0.653)
Step: 4299, Reward: [   0.    -452.637] [226.3186], Avg: [   4.884 -248.844] (0.650)
Step: 4349, Reward: [   0.   -460.22] [230.1100], Avg: [   4.828 -251.274] (0.647)
Step: 4399, Reward: [  0.    -24.575] [12.2876], Avg: [   4.773 -248.698] (0.643)
Step: 4449, Reward: [   0.    -260.339] [130.1697], Avg: [   4.719 -248.829] (0.640)
Step: 4499, Reward: [   0.    -278.224] [139.1118], Avg: [   4.667 -249.155] (0.637)
Step: 4549, Reward: [  0.    -18.288] [9.1439], Avg: [   4.615 -246.618] (0.634)
Step: 4599, Reward: [   0.    -104.766] [52.3831], Avg: [   4.565 -245.076] (0.631)
Step: 4649, Reward: [   0.    -251.554] [125.7769], Avg: [   4.516 -245.146] (0.627)
Step: 4699, Reward: [ 0.    -3.873] [1.9363], Avg: [   4.468 -242.579] (0.624)
Step: 4749, Reward: [  0.    -14.315] [7.1577], Avg: [   4.421 -240.176] (0.621)
Step: 4799, Reward: [   0.    -344.737] [172.3686], Avg: [   4.375 -241.266] (0.618)
Step: 4849, Reward: [  0.    -50.506] [25.2532], Avg: [   4.33  -239.299] (0.615)
Step: 4899, Reward: [  20.    -325.216] [172.6082], Avg: [   4.49  -240.176] (0.612)
Step: 4949, Reward: [  0.    -55.667] [27.8333], Avg: [   4.444 -238.312] (0.609)
Step: 4999, Reward: [   0.    -379.304] [189.6518], Avg: [   4.4   -239.722] (0.606)
Step: 5049, Reward: [   0.    -113.043] [56.5217], Avg: [   4.356 -238.468] (0.603)
Step: 5099, Reward: [   0.    -363.604] [181.8022], Avg: [   4.314 -239.694] (0.600)
Step: 5149, Reward: [  30.    -290.553] [160.2766], Avg: [   4.563 -240.188] (0.597)
Step: 5199, Reward: [  0.    -64.382] [32.1910], Avg: [   4.519 -238.498] (0.594)
Step: 5249, Reward: [   0.    -506.366] [253.1828], Avg: [   4.476 -241.049] (0.591)
Step: 5299, Reward: [   0.    -180.254] [90.1271], Avg: [   4.434 -240.475] (0.588)
Step: 5349, Reward: [0. 0.] [0.0000], Avg: [   4.393 -238.228] (0.585)
Step: 5399, Reward: [  40.   -508.81] [274.4051], Avg: [   4.722 -240.733] (0.582)
Step: 5449, Reward: [   0.    -335.603] [167.8016], Avg: [   4.679 -241.604] (0.579)
Step: 5499, Reward: [  0.    -15.447] [7.7237], Avg: [   4.636 -239.548] (0.576)
Step: 5549, Reward: [   0.    -391.305] [195.6526], Avg: [   4.595 -240.915] (0.573)
Step: 5599, Reward: [  30.    -238.474] [134.2369], Avg: [   4.821 -240.893] (0.570)
Step: 5649, Reward: [  0.    -22.154] [11.0768], Avg: [   4.779 -238.957] (0.568)
Step: 5699, Reward: [ 30.    -37.285] [33.6426], Avg: [   5.    -237.188] (0.565)
Step: 5749, Reward: [   0.    -350.996] [175.4979], Avg: [   4.957 -238.178] (0.562)
Step: 5799, Reward: [   0.    -430.936] [215.4678], Avg: [   4.914 -239.84 ] (0.559)
Step: 5849, Reward: [   0.    -356.556] [178.2778], Avg: [   4.872 -240.837] (0.556)
Step: 5899, Reward: [   0.    -432.389] [216.1946], Avg: [   4.831 -242.461] (0.554)
Step: 5949, Reward: [   0.    -123.326] [61.6631], Avg: [   4.79  -241.459] (0.551)
Step: 5999, Reward: [   0.    -332.057] [166.0286], Avg: [   4.75  -242.214] (0.548)
Step: 6049, Reward: [ 0.    -6.707] [3.3537], Avg: [   4.711 -240.268] (0.545)
Step: 6099, Reward: [   0.    -198.485] [99.2425], Avg: [   4.672 -239.926] (0.543)
Step: 6149, Reward: [   0.   -279.48] [139.7399], Avg: [   4.634 -240.247] (0.540)
Step: 6199, Reward: [   0.    -437.807] [218.9036], Avg: [   4.597 -241.84 ] (0.537)
Step: 6249, Reward: [   0.    -120.033] [60.0165], Avg: [   4.56  -240.866] (0.534)
Step: 6299, Reward: [   0.    -340.051] [170.0254], Avg: [   4.524 -241.653] (0.532)
Step: 6349, Reward: [   0.    -226.425] [113.2125], Avg: [   4.488 -241.533] (0.529)
Step: 6399, Reward: [   0.    -324.914] [162.4568], Avg: [   4.453 -242.185] (0.526)
Step: 6449, Reward: [   0.  -434.2] [217.1002], Avg: [   4.419 -243.673] (0.524)
Step: 6499, Reward: [   0.    -104.443] [52.2213], Avg: [   4.385 -242.602] (0.521)
Step: 6549, Reward: [   0.    -265.273] [132.6365], Avg: [   4.351 -242.775] (0.519)
Step: 6599, Reward: [  0.    -38.336] [19.1682], Avg: [   4.318 -241.226] (0.516)
Step: 6649, Reward: [   0.    -363.905] [181.9527], Avg: [   4.286 -242.149] (0.513)
Step: 6699, Reward: [  40.    -336.278] [188.1388], Avg: [   4.552 -242.851] (0.511)
Step: 6749, Reward: [   0.    -212.112] [106.0561], Avg: [   4.519 -242.624] (0.508)
Step: 6799, Reward: [   0.    -243.399] [121.6997], Avg: [   4.485 -242.629] (0.506)
Step: 6849, Reward: [   0.    -339.118] [169.5591], Avg: [   4.453 -243.334] (0.503)
Step: 6899, Reward: [   0.    -175.923] [87.9613], Avg: [   4.42  -242.845] (0.501)
Step: 6949, Reward: [   0.    -353.955] [176.9775], Avg: [   4.388 -243.644] (0.498)
Step: 6999, Reward: [   0.    -546.065] [273.0326], Avg: [   4.357 -245.805] (0.496)
Step: 7049, Reward: [   0.    -251.884] [125.9420], Avg: [   4.326 -245.848] (0.493)
Step: 7099, Reward: [  30.    -419.817] [224.9083], Avg: [   4.507 -247.073] (0.491)
Step: 7149, Reward: [  10.   -170.47] [90.2352], Avg: [   4.545 -246.537] (0.488)
Step: 7199, Reward: [ 0.    -8.748] [4.3740], Avg: [   4.514 -244.886] (0.486)
Step: 7249, Reward: [   0.   -272.42] [136.2102], Avg: [   4.483 -245.076] (0.483)
Step: 7299, Reward: [   0.    -268.777] [134.3886], Avg: [   4.452 -245.238] (0.481)
Step: 7349, Reward: [   0.    -304.227] [152.1136], Avg: [   4.422 -245.639] (0.479)
Step: 7399, Reward: [   0.    -289.466] [144.7329], Avg: [   4.392 -245.935] (0.476)
Step: 7449, Reward: [   0.    -337.581] [168.7906], Avg: [   4.362 -246.551] (0.474)
Step: 7499, Reward: [   0.    -286.154] [143.0771], Avg: [   4.333 -246.815] (0.471)
Step: 7549, Reward: [   0.   -465.11] [232.5551], Avg: [   4.305 -248.26 ] (0.469)
Step: 7599, Reward: [  0.   -62.74] [31.3699], Avg: [   4.276 -247.04 ] (0.467)
Step: 7649, Reward: [ 100.    -439.534] [269.7670], Avg: [   4.902 -248.298] (0.464)
Step: 7699, Reward: [   0.    -516.563] [258.2817], Avg: [   4.87 -250.04] (0.462)
Step: 7749, Reward: [   0.    -375.769] [187.8845], Avg: [   4.839 -250.851] (0.460)
Step: 7799, Reward: [   0.    -312.791] [156.3954], Avg: [   4.808 -251.248] (0.458)
Step: 7849, Reward: [  0.    -88.203] [44.1015], Avg: [   4.777 -250.21 ] (0.455)
Step: 7899, Reward: [   0.    -271.874] [135.9371], Avg: [   4.747 -250.347] (0.453)
Step: 7949, Reward: [   0.    -337.856] [168.9279], Avg: [   4.717 -250.897] (0.451)
Step: 7999, Reward: [   0.    -334.292] [167.1461], Avg: [   4.688 -251.418] (0.448)
Step: 8049, Reward: [   0.    -419.088] [209.5440], Avg: [   4.658 -252.46 ] (0.446)
Step: 8099, Reward: [   0.    -515.871] [257.9353], Avg: [   4.63  -254.086] (0.444)
Step: 8149, Reward: [   0.   -521.29] [260.6448], Avg: [   4.601 -255.725] (0.442)
Step: 8199, Reward: [   0.    -294.945] [147.4723], Avg: [   4.573 -255.964] (0.440)
Step: 8249, Reward: [  20.    -602.633] [311.3166], Avg: [   4.667 -258.065] (0.437)
Step: 8299, Reward: [  20.    -307.008] [163.5038], Avg: [   4.759 -258.36 ] (0.435)
Step: 8349, Reward: [   0.    -499.128] [249.5639], Avg: [   4.731 -259.802] (0.433)
Step: 8399, Reward: [   0.    -378.901] [189.4504], Avg: [   4.702 -260.511] (0.431)
Step: 8449, Reward: [   0.    -413.585] [206.7923], Avg: [   4.675 -261.416] (0.429)
Step: 8499, Reward: [   0.    -398.047] [199.0235], Avg: [   4.647 -262.22 ] (0.427)
Step: 8549, Reward: [   0.    -346.341] [173.1705], Avg: [   4.62  -262.712] (0.424)
Step: 8599, Reward: [   0.    -256.901] [128.4507], Avg: [   4.593 -262.678] (0.422)
Step: 8649, Reward: [   0.    -370.994] [185.4969], Avg: [   4.566 -263.304] (0.420)
Step: 8699, Reward: [   0.    -359.259] [179.6297], Avg: [   4.54  -263.856] (0.418)
Step: 8749, Reward: [   0.    -371.837] [185.9186], Avg: [   4.514 -264.473] (0.416)
Step: 8799, Reward: [   0.   -343.61] [171.8048], Avg: [   4.489 -264.922] (0.414)
Step: 8849, Reward: [   0.    -269.616] [134.8080], Avg: [   4.463 -264.949] (0.412)
Step: 8899, Reward: [   0.    -459.038] [229.5189], Avg: [   4.438 -266.039] (0.410)
Step: 8949, Reward: [   0.   -311.71] [155.8550], Avg: [   4.413 -266.295] (0.408)
Step: 8999, Reward: [  40.    -367.497] [203.7484], Avg: [   4.611 -266.857] (0.406)
Step: 9049, Reward: [   0.    -508.754] [254.3769], Avg: [   4.586 -268.193] (0.404)
Step: 9099, Reward: [   0.    -357.575] [178.7873], Avg: [   4.56  -268.684] (0.402)
Step: 9149, Reward: [   0.    -294.081] [147.0407], Avg: [   4.536 -268.823] (0.400)
Step: 9199, Reward: [   0.    -233.313] [116.6566], Avg: [   4.511 -268.63 ] (0.398)
Step: 9249, Reward: [   0.    -262.107] [131.0535], Avg: [   4.486 -268.595] (0.396)
Step: 9299, Reward: [   0.    -311.571] [155.7856], Avg: [   4.462 -268.826] (0.394)
Step: 9349, Reward: [   0.    -204.644] [102.3219], Avg: [   4.439 -268.483] (0.392)
Step: 9399, Reward: [   0.    -423.512] [211.7559], Avg: [   4.415 -269.307] (0.390)
Step: 9449, Reward: [   0.    -303.717] [151.8587], Avg: [   4.392 -269.489] (0.388)
Step: 9499, Reward: [  20.    -362.267] [191.1333], Avg: [   4.474 -269.978] (0.386)
Step: 9549, Reward: [   0.    -243.579] [121.7896], Avg: [   4.45  -269.839] (0.384)
Step: 9599, Reward: [   0.    -131.673] [65.8366], Avg: [   4.427 -269.12 ] (0.382)
Step: 9649, Reward: [   0.    -403.311] [201.6553], Avg: [   4.404 -269.815] (0.380)
Step: 9699, Reward: [   0.    -529.683] [264.8415], Avg: [   4.381 -271.155] (0.378)
Step: 9749, Reward: [  10.    -273.226] [141.6128], Avg: [   4.41  -271.165] (0.376)
Step: 9799, Reward: [   0.    -612.652] [306.3260], Avg: [   4.388 -272.908] (0.374)
Step: 9849, Reward: [  0.    -51.084] [25.5422], Avg: [   4.365 -271.782] (0.373)
Step: 9899, Reward: [   0.    -245.636] [122.8179], Avg: [   4.343 -271.649] (0.371)
Step: 9949, Reward: [  0.    -72.995] [36.4976], Avg: [   4.322 -270.651] (0.369)

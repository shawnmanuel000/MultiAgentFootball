Model: <class 'models.ppo.PPOAgent'>, Dir: 1_vs_1_easy
num_envs: 16, state_size: (115,), action_size: [19], action_space: Discrete(19),

import gym
import torch
import pickle
import argparse
import numpy as np
from models.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, ADVANTAGE_DECAY

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.action_sig = torch.nn.Parameter(torch.zeros(*action_size))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, PPOActor, PPOCritic, lr=lr, gpu=gpu, load=load)

	def get_action_probs(self, state, action_in=None, sample=True, grad=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			return action if action_in is None else entropy.mean(), log_prob

	def get_value(self, state, grad=True):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, importances=torch.scalar_tensor(1), clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states)
		critic_error = values - targets
		critic_loss = importances.to(self.device) * critic_error.pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())
		return critic_error.cpu().detach().numpy().squeeze(-1)

	def save_model(self, dirname="pytorch", name="best"):
		super().save_model("ppo", dirname, name)
		
	def load_model(self, dirname="pytorch", name="best"):
		super().load_model("ppo", dirname, name)

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, update_freq=NUM_STEPS, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		state = self.to_tensor(state)
		self.action, self.log_prob = [x.cpu().numpy() for x in self.network.get_action_probs(state, sample=sample, grad=False)]
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if done[0] or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			next_state = self.to_tensor(next_state)
			values = self.network.get_value(states, grad=False)
			next_value = self.network.get_value(next_state, grad=False)
			targets, advantages = self.compute_gae(next_value, rewards.unsqueeze(-1), dones.unsqueeze(-1), values, gamma=DISCOUNT_RATE, lamda=ADVANTAGE_DECAY)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states, actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage, scale=16*dones.size(0)/len(self.replay_buffer))

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500 				# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import gfootball.env as ggym
from collections import deque
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, ImgStack, RawStack
from utils.misc import Logger, rollout

parser = argparse.ArgumentParser(description="A3C Trainer")
parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
parser.add_argument("--model", type=str, default="ddpg", choices=["ddqn", "ddpg", "ppo", "rand"], help="Which reinforcement learning algorithm to use")
parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
args = parser.parse_args()

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "1_vs_1_easy", "5_vs_5", "11_vs_11_stochastic"]
env_name = gfb_envs[1]

def make_env(env_name=env_name, log=False):
	if env_name in gym_envs: return gym.make(env_name)
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=False)
	env.unwrapped.spec = gym.envs.registration.EnvSpec(env_name + "-v0", max_episode_steps=env.unwrapped._config._scenario_cfg.game_duration)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space.n}")
	return env

class AsyncAgent(RandomAgent):
	def __init__(self, state_size, action_size, num_envs, agent, load="", gpu=True, train=True):
		super().__init__(state_size, action_size)
		statemodel = RawStack if len(state_size) == 1 else ImgStack
		self.stack = statemodel(state_size, num_envs, load=load, gpu=gpu)
		self.agent = agent(self.stack.state_size, action_size, load="" if train else load, gpu=gpu)

	def get_env_action(self, env, state, eps=None, sample=True):
		state = self.stack.get_state(state)
		env_action, action = self.agent.get_env_action(env, state, eps, sample)
		return env_action, action, state

	def train(self, state, action, next_state, reward, done):
		next_state = self.stack.get_state(next_state)
		self.agent.train(state, action, next_state, reward, done)

	def reset(self, num_envs=None):
		num_envs = self.stack.num_envs if num_envs is None else num_envs
		self.stack.reset(num_envs, restore=False)
		return self

	def save_model(self, dirname="pytorch", name="best"):
		if hasattr(self.agent, "network"): self.agent.network.save_model(dirname, name)

def run(model, steps=10000, ports=16, eval_at=1000):
	num_envs = len(ports) if type(ports) == list else min(ports, 64)
	envs = EnvManager(make_env, ports) if type(ports) == list else EnsembleEnv(make_env, ports)
	agent = AsyncAgent(envs.state_size, envs.action_size, num_envs, model)
	logger = Logger(model, env_name, num_envs=num_envs, state_size=agent.stack.state_size, action_size=envs.action_size, action_space=envs.env.action_space)
	states = envs.reset()
	total_rewards = []
	for s in range(steps):
		agent.reset(num_envs)
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if dones[0]:
			rollouts = [rollout(envs.env, agent.reset(1)) for _ in range(5)]
			test_reward = np.mean(rollouts) - np.std(rollouts)
			total_rewards.append(test_reward)
			agent.save_model(env_name, "checkpoint")
			if env_name in gfb_envs and total_rewards[-1] >= max(total_rewards): agent.save_model(env_name)
			logger.log(f"Step: {s}, Reward: {test_reward+np.std(rollouts):.4f} [{np.std(rollouts):.2f}], Avg: {np.mean(total_rewards):.4f} ({agent.agent.eps:.3f})")

if __name__ == "__main__":
	model = DDPGAgent if args.model == "ddpg" else PPOAgent if args.model == "ppo" else DDQNAgent if args.model == "ddqn" else RandomAgent
	if args.selfport is not None:
		EnvWorker(args.selfport, make_env).start()
	else:
		if len(args.workerports) == 1: args.workerports = args.workerports[0]
		run(model, args.steps, args.workerports)
	print(f"Training finished")

Step: 499, Reward: -1.2000 [0.75], Avg: -1.9483 (1.000)
Step: 999, Reward: -1.0000 [0.89], Avg: -1.9214 (1.000)
Step: 1499, Reward: -0.6000 [0.49], Avg: -1.6442 (1.000)
Step: 1999, Reward: -1.0000 [0.00], Avg: -1.4832 (1.000)
Step: 2499, Reward: -0.6000 [0.80], Avg: -1.4665 (1.000)
Step: 2999, Reward: -0.8000 [0.75], Avg: -1.4802 (1.000)
Step: 3499, Reward: -0.4000 [0.49], Avg: -1.3958 (1.000)
Step: 3999, Reward: -0.8000 [0.40], Avg: -1.3714 (1.000)
Step: 4499, Reward: -0.4000 [0.49], Avg: -1.3179 (1.000)
Step: 4999, Reward: -0.4000 [0.49], Avg: -1.2751 (1.000)
Step: 5499, Reward: -1.0000 [0.89], Avg: -1.3314 (1.000)
Step: 5999, Reward: -0.6000 [0.49], Avg: -1.3113 (1.000)
Step: 6499, Reward: -0.2000 [0.40], Avg: -1.2565 (1.000)
Step: 6999, Reward: -0.4000 [0.49], Avg: -1.2304 (1.000)
Step: 7499, Reward: -0.6000 [0.49], Avg: -1.2210 (1.000)
Step: 7999, Reward: -0.8000 [0.40], Avg: -1.2197 (1.000)
Step: 8499, Reward: -0.6000 [0.49], Avg: -1.2120 (1.000)
Step: 8999, Reward: -0.8000 [0.40], Avg: -1.2114 (1.000)
Step: 9499, Reward: -0.6000 [0.80], Avg: -1.2213 (1.000)
Step: 9999, Reward: -0.2000 [0.40], Avg: -1.1902 (1.000)
Step: 10499, Reward: -0.6000 [0.80], Avg: -1.2002 (1.000)
Step: 10999, Reward: -0.2000 [0.40], Avg: -1.1729 (1.000)
Step: 11499, Reward: -0.2000 [0.40], Avg: -1.1480 (1.000)
Step: 11999, Reward: -0.4000 [0.49], Avg: -1.1373 (1.000)
Step: 12499, Reward: -1.0000 [0.89], Avg: -1.1676 (1.000)
Step: 12999, Reward: -0.6000 [0.80], Avg: -1.1765 (1.000)
Step: 13499, Reward: -0.8000 [0.75], Avg: -1.1903 (1.000)
Step: 13999, Reward: -0.2000 [0.40], Avg: -1.1692 (1.000)
Step: 14499, Reward: -0.6000 [0.49], Avg: -1.1665 (1.000)
Step: 14999, Reward: -0.4000 [0.80], Avg: -1.1676 (1.000)
Step: 15499, Reward: -0.2000 [0.40], Avg: -1.1493 (1.000)
Step: 15999, Reward: -0.2000 [0.40], Avg: -1.1321 (1.000)
Step: 16499, Reward: -1.0000 [0.89], Avg: -1.1552 (1.000)
Step: 16999, Reward: -0.6000 [0.49], Avg: -1.1533 (1.000)
Step: 17499, Reward: -0.8000 [0.75], Avg: -1.1646 (1.000)
Step: 17999, Reward: -0.6000 [0.49], Avg: -1.1625 (1.000)
Step: 18499, Reward: -0.6000 [0.80], Avg: -1.1689 (1.000)
Step: 18999, Reward: -0.6000 [0.80], Avg: -1.1750 (1.000)
Step: 19499, Reward: -0.6000 [0.49], Avg: -1.1728 (1.000)
Step: 19999, Reward: -1.4000 [1.02], Avg: -1.2040 (1.000)
Step: 20499, Reward: -0.8000 [0.75], Avg: -1.2124 (1.000)
Step: 20999, Reward: -1.2000 [0.75], Avg: -1.2299 (1.000)
Step: 21499, Reward: -1.2000 [0.40], Avg: -1.2385 (1.000)
Step: 21999, Reward: -0.6000 [0.49], Avg: -1.2351 (1.000)
Step: 22499, Reward: -0.8000 [0.75], Avg: -1.2421 (1.000)
Step: 22999, Reward: -1.0000 [0.89], Avg: -1.2563 (1.000)
Step: 23499, Reward: -0.6000 [0.49], Avg: -1.2527 (1.000)
Step: 23999, Reward: -0.6000 [0.49], Avg: -1.2493 (1.000)
Step: 24499, Reward: -0.8000 [0.75], Avg: -1.2554 (1.000)
Step: 24999, Reward: -0.6000 [0.80], Avg: -1.2583 (1.000)
Step: 25499, Reward: -0.6000 [0.49], Avg: -1.2550 (1.000)
Step: 25999, Reward: -1.0000 [0.63], Avg: -1.2623 (1.000)
Step: 26499, Reward: -0.8000 [0.75], Avg: -1.2677 (1.000)
Step: 26999, Reward: -0.8000 [0.75], Avg: -1.2729 (1.000)
Step: 27499, Reward: -0.6000 [0.80], Avg: -1.2752 (1.000)
Step: 27999, Reward: -0.2000 [0.40], Avg: -1.2631 (1.000)
Step: 28499, Reward: -0.8000 [0.75], Avg: -1.2681 (1.000)
Step: 28999, Reward: -0.6000 [0.49], Avg: -1.2651 (1.000)
Step: 29499, Reward: -1.0000 [1.10], Avg: -1.2791 (1.000)
Step: 29999, Reward: -0.6000 [0.49], Avg: -1.2760 (1.000)
Step: 30499, Reward: -0.6000 [0.49], Avg: -1.2729 (1.000)
Step: 30999, Reward: -0.2000 [0.40], Avg: -1.2621 (1.000)
Step: 31499, Reward: -0.4000 [0.49], Avg: -1.2562 (1.000)
Step: 31999, Reward: -0.4000 [0.49], Avg: -1.2505 (1.000)
Step: 32499, Reward: -0.6000 [0.49], Avg: -1.2480 (1.000)
Step: 32999, Reward: -1.0000 [1.26], Avg: -1.2634 (1.000)
Step: 33499, Reward: -1.0000 [0.63], Avg: -1.2689 (1.000)
Step: 33999, Reward: -0.6000 [0.49], Avg: -1.2663 (1.000)
Step: 34499, Reward: -0.8000 [0.75], Avg: -1.2704 (1.000)
Step: 34999, Reward: 0.0000 [0.00], Avg: -1.2522 (1.000)
Step: 35499, Reward: -0.6000 [0.80], Avg: -1.2543 (1.000)
Step: 35999, Reward: -0.2000 [0.40], Avg: -1.2452 (1.000)
Step: 36499, Reward: -0.6000 [0.49], Avg: -1.2431 (1.000)
Step: 36999, Reward: -0.4000 [0.80], Avg: -1.2425 (1.000)
Step: 37499, Reward: -0.2000 [0.40], Avg: -1.2339 (1.000)
Step: 37999, Reward: -0.4000 [0.49], Avg: -1.2294 (1.000)
Step: 38499, Reward: -0.4000 [0.49], Avg: -1.2250 (1.000)
Step: 38999, Reward: -0.4000 [0.49], Avg: -1.2207 (1.000)
Step: 39499, Reward: -0.4000 [0.49], Avg: -1.2165 (1.000)
Step: 39999, Reward: 0.0000 [0.00], Avg: -1.2013 (1.000)
Step: 40499, Reward: -0.6000 [0.80], Avg: -1.2038 (1.000)
Step: 40999, Reward: -0.4000 [0.49], Avg: -1.1999 (1.000)
Step: 41499, Reward: -0.8000 [0.40], Avg: -1.1999 (1.000)
Step: 41999, Reward: -0.2000 [0.40], Avg: -1.1928 (1.000)
Step: 42499, Reward: -0.4000 [0.49], Avg: -1.1892 (1.000)
Step: 42999, Reward: -0.6000 [0.49], Avg: -1.1881 (1.000)
Step: 43499, Reward: -0.6000 [0.49], Avg: -1.1869 (1.000)
Step: 43999, Reward: -0.2000 [0.40], Avg: -1.1803 (1.000)
Step: 44499, Reward: -0.8000 [0.40], Avg: -1.1805 (1.000)
Step: 44999, Reward: -0.4000 [0.49], Avg: -1.1773 (1.000)
Step: 45499, Reward: -0.4000 [0.49], Avg: -1.1741 (1.000)
Step: 45999, Reward: -0.4000 [0.49], Avg: -1.1710 (1.000)
Step: 46499, Reward: -0.2000 [0.40], Avg: -1.1649 (1.000)
Step: 46999, Reward: -0.2000 [0.40], Avg: -1.1589 (1.000)
Step: 47499, Reward: -0.4000 [0.49], Avg: -1.1560 (1.000)
Step: 47999, Reward: -0.6000 [0.49], Avg: -1.1553 (1.000)
Step: 48499, Reward: -0.2000 [0.40], Avg: -1.1496 (1.000)
Step: 48999, Reward: 0.0000 [0.63], Avg: -1.1443 (1.000)
Step: 49499, Reward: -0.6000 [0.49], Avg: -1.1438 (1.000)
Step: 49999, Reward: -0.6000 [0.49], Avg: -1.1433 (1.000)
Step: 50499, Reward: -0.2000 [0.40], Avg: -1.1379 (1.000)
Step: 50999, Reward: -0.6000 [0.49], Avg: -1.1374 (1.000)
Step: 51499, Reward: -0.4000 [0.49], Avg: -1.1350 (1.000)
Step: 51999, Reward: -0.2000 [0.40], Avg: -1.1299 (1.000)
Step: 52499, Reward: -0.2000 [0.40], Avg: -1.1248 (1.000)
Step: 52999, Reward: -0.2000 [0.40], Avg: -1.1199 (1.000)
Step: 53499, Reward: -1.2000 [0.75], Avg: -1.1276 (1.000)
Step: 53999, Reward: -0.4000 [0.49], Avg: -1.1254 (1.000)
Step: 54499, Reward: -0.4000 [0.49], Avg: -1.1232 (1.000)
Step: 54999, Reward: -1.0000 [0.89], Avg: -1.1303 (1.000)
Step: 55499, Reward: -0.8000 [0.40], Avg: -1.1309 (1.000)
Step: 55999, Reward: -0.2000 [0.75], Avg: -1.1293 (1.000)
Step: 56499, Reward: -0.6000 [0.49], Avg: -1.1289 (1.000)
Step: 56999, Reward: -0.4000 [0.49], Avg: -1.1268 (1.000)
Step: 57499, Reward: -0.4000 [0.49], Avg: -1.1247 (1.000)
Step: 57999, Reward: -0.6000 [0.49], Avg: -1.1244 (1.000)
Step: 58499, Reward: -0.6000 [0.80], Avg: -1.1268 (1.000)
Step: 58999, Reward: -0.6000 [0.49], Avg: -1.1265 (1.000)
Step: 59499, Reward: -0.2000 [0.40], Avg: -1.1221 (1.000)
Step: 59999, Reward: -0.6000 [0.80], Avg: -1.1244 (1.000)
Step: 60499, Reward: -0.6000 [0.80], Avg: -1.1267 (1.000)
Step: 60999, Reward: -0.4000 [0.49], Avg: -1.1247 (1.000)
Step: 61499, Reward: -0.4000 [0.49], Avg: -1.1228 (1.000)
Step: 61999, Reward: -0.2000 [0.40], Avg: -1.1186 (1.000)
Step: 62499, Reward: -0.8000 [0.40], Avg: -1.1192 (1.000)
Step: 62999, Reward: -0.8000 [0.98], Avg: -1.1245 (1.000)
Step: 63499, Reward: -0.4000 [0.49], Avg: -1.1226 (1.000)
Step: 63999, Reward: -0.2000 [0.40], Avg: -1.1186 (1.000)
Step: 64499, Reward: -0.6000 [1.02], Avg: -1.1224 (1.000)
Step: 64999, Reward: -0.8000 [0.98], Avg: -1.1275 (1.000)
Step: 65499, Reward: -0.2000 [0.40], Avg: -1.1235 (1.000)
Step: 65999, Reward: -0.4000 [0.49], Avg: -1.1217 (1.000)
Step: 66499, Reward: -0.6000 [0.80], Avg: -1.1238 (1.000)
Step: 66999, Reward: -0.2000 [0.40], Avg: -1.1199 (1.000)
Step: 67499, Reward: -1.2000 [0.75], Avg: -1.1260 (1.000)
Step: 67999, Reward: -0.6000 [0.49], Avg: -1.1258 (1.000)
Step: 68499, Reward: -0.4000 [0.49], Avg: -1.1240 (1.000)
Step: 68999, Reward: -0.4000 [0.49], Avg: -1.1223 (1.000)
Step: 69499, Reward: -0.6000 [0.80], Avg: -1.1243 (1.000)
Step: 69999, Reward: -0.8000 [0.40], Avg: -1.1249 (1.000)
Step: 70499, Reward: -0.4000 [0.49], Avg: -1.1232 (1.000)
Step: 70999, Reward: -0.4000 [0.49], Avg: -1.1216 (1.000)
Step: 71499, Reward: -1.2000 [0.75], Avg: -1.1273 (1.000)
Step: 71999, Reward: -0.4000 [0.49], Avg: -1.1257 (1.000)
Step: 72499, Reward: 0.0000 [0.00], Avg: -1.1179 (1.000)
Step: 72999, Reward: -0.2000 [0.40], Avg: -1.1144 (1.000)
Step: 73499, Reward: -0.6000 [0.80], Avg: -1.1163 (1.000)
Step: 73999, Reward: -0.6000 [0.49], Avg: -1.1162 (1.000)
Step: 74499, Reward: -0.6000 [0.49], Avg: -1.1160 (1.000)
Step: 74999, Reward: -0.2000 [0.75], Avg: -1.1149 (1.000)
Step: 75499, Reward: -0.6000 [0.49], Avg: -1.1147 (1.000)
Step: 75999, Reward: -0.2000 [0.40], Avg: -1.1113 (1.000)
Step: 76499, Reward: -0.6000 [0.49], Avg: -1.1112 (1.000)
Step: 76999, Reward: -0.6000 [0.49], Avg: -1.1110 (1.000)
Step: 77499, Reward: -0.6000 [1.20], Avg: -1.1155 (1.000)
Step: 77999, Reward: -1.2000 [0.40], Avg: -1.1186 (1.000)
Step: 78499, Reward: -0.2000 [0.40], Avg: -1.1153 (1.000)
Step: 78999, Reward: -0.4000 [0.49], Avg: -1.1139 (1.000)
Step: 79499, Reward: -0.8000 [0.75], Avg: -1.1166 (1.000)
Step: 79999, Reward: -0.8000 [0.75], Avg: -1.1193 (1.000)
Step: 80499, Reward: -0.4000 [0.49], Avg: -1.1179 (1.000)
Step: 80999, Reward: -0.2000 [0.40], Avg: -1.1147 (1.000)
Step: 81499, Reward: -1.0000 [0.63], Avg: -1.1178 (1.000)
Step: 81999, Reward: -0.6000 [0.80], Avg: -1.1196 (1.000)
Step: 82499, Reward: -0.6000 [0.80], Avg: -1.1213 (1.000)
Step: 82999, Reward: -1.2000 [0.40], Avg: -1.1241 (1.000)
Step: 83499, Reward: -0.4000 [0.49], Avg: -1.1227 (1.000)
Step: 83999, Reward: -0.8000 [1.17], Avg: -1.1278 (1.000)
Step: 84499, Reward: -0.6000 [0.49], Avg: -1.1275 (1.000)
Step: 84999, Reward: 0.0000 [0.63], Avg: -1.1246 (1.000)
Step: 85499, Reward: -0.8000 [0.75], Avg: -1.1271 (1.000)
Step: 85999, Reward: -0.8000 [0.75], Avg: -1.1296 (1.000)
Step: 86499, Reward: -0.8000 [1.17], Avg: -1.1344 (1.000)
Step: 86999, Reward: -0.2000 [0.40], Avg: -1.1313 (1.000)
Step: 87499, Reward: -0.2000 [0.40], Avg: -1.1283 (1.000)
Step: 87999, Reward: -0.6000 [1.02], Avg: -1.1311 (1.000)
Step: 88499, Reward: -1.0000 [0.63], Avg: -1.1339 (1.000)
Step: 88999, Reward: -0.4000 [0.49], Avg: -1.1325 (1.000)
Step: 89499, Reward: -0.8000 [0.40], Avg: -1.1329 (1.000)
Step: 89999, Reward: -1.2000 [0.75], Avg: -1.1374 (1.000)
Step: 90499, Reward: -0.8000 [0.75], Avg: -1.1397 (1.000)
Step: 90999, Reward: -0.4000 [0.80], Avg: -1.1400 (1.000)
Step: 91499, Reward: -0.8000 [0.40], Avg: -1.1404 (1.000)
Step: 91999, Reward: -0.4000 [0.80], Avg: -1.1407 (1.000)
Step: 92499, Reward: 0.0000 [0.00], Avg: -1.1345 (1.000)
Step: 92999, Reward: -0.8000 [0.75], Avg: -1.1368 (1.000)
Step: 93499, Reward: -0.6000 [0.80], Avg: -1.1382 (1.000)
Step: 93999, Reward: -0.4000 [1.02], Avg: -1.1397 (1.000)
Step: 94499, Reward: -0.8000 [0.75], Avg: -1.1418 (1.000)
Step: 94999, Reward: -1.2000 [0.75], Avg: -1.1461 (1.000)
Step: 95499, Reward: -1.4000 [0.80], Avg: -1.1516 (1.000)
Step: 95999, Reward: -1.0000 [0.89], Avg: -1.1555 (1.000)
Step: 96499, Reward: -0.4000 [0.49], Avg: -1.1541 (1.000)
Step: 96999, Reward: -0.4000 [0.49], Avg: -1.1527 (1.000)
Step: 97499, Reward: -0.8000 [0.40], Avg: -1.1530 (1.000)
Step: 97999, Reward: -1.4000 [0.80], Avg: -1.1583 (1.000)
Step: 98499, Reward: -0.8000 [0.75], Avg: -1.1603 (1.000)
Step: 98999, Reward: -0.6000 [0.80], Avg: -1.1615 (1.000)
Step: 99499, Reward: -0.6000 [0.49], Avg: -1.1611 (1.000)
Step: 99999, Reward: -0.2000 [0.40], Avg: -1.1583 (1.000)

Model: <class 'models.ddpg.DDPGAgent'>, Dir: MountainCar-v0
num_envs: 16, state_size: (2,), action_size: [3], action_space: Discrete(3),

import os
import math
import torch
import random
import numpy as np
from models.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, EPS_MIN, EPS_DECAY, REPLAY_BATCH_SIZE

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh()
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(*action_size, INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None): 
		super().__init__(state_size, action_size, DDPGActor, DDPGCritic, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, use_target=False, numpy=True, sample=True):
		with torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, numpy=True):
		with torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, q_targets, importances=1):
		q_values = self.critic_local(states, actions)
		critic_error = q_values - q_targets.detach()
		critic_loss = importances.to(self.device) * critic_error.pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())

		q_actions = self.critic_local(states, self.actor_local(states))
		actor_loss = -(q_actions - q_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		
		self.soft_copy(self.actor_local, self.actor_target)
		self.soft_copy(self.critic_local, self.critic_target)
		return critic_error.cpu().detach().numpy().squeeze(-1)
	
	def save_model(self, dirname="pytorch", name="best"):
		super().save_model("ddpg", dirname, name)
		
	def load_model(self, dirname="pytorch", name="best"):
		super().load_model("ddpg", dirname, name)

class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, update_freq=NUM_STEPS, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, lr=lr, update_freq=update_freq, decay=decay, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if e_greedy and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		action = action_greedy if e_greedy else np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if done[0] or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			next_state = self.to_tensor(next_state)
			next_action = self.network.get_action(next_state, use_target=True, numpy=False)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			next_value = self.network.get_q_value(next_state, next_action, use_target=True, numpy=False)
			targets, _ = self.compute_gae(next_value, rewards.unsqueeze(-1), dones.unsqueeze(-1), values)
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states, actions, targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > 0:
			(states, actions, targets), indices, importances = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)
			errors = self.network.optimize(states, actions, targets, importances**(1-self.eps))
			self.replay_buffer.update_priorities(indices, errors)
			if done[0]: self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500 				# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
# import gfootball.env as ggym
from collections import deque
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, ImgStack, RawStack
from utils.misc import Logger, rollout

parser = argparse.ArgumentParser(description="A3C Trainer")
parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
parser.add_argument("--model", type=str, default="ddpg", choices=["ddqn", "ddpg", "ppo", "rand"], help="Which reinforcement learning algorithm to use")
parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
args = parser.parse_args()

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["11_vs_11_stochastic", "academy_empty_goal_close"]
env_name = gym_envs[1]

def make_env(env_name=env_name, log=False):
	if env_name in gym_envs: return gym.make(env_name)
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=False)
	env.spec = gym.envs.registration.EnvSpec(env_name + "-v0", max_episode_steps=env.unwrapped._config._scenario_cfg.game_duration)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space.n}")
	return env

class AsyncAgent(RandomAgent):
	def __init__(self, state_size, action_size, num_envs, agent, load="", gpu=True, train=True):
		super().__init__(state_size, action_size)
		statemodel = RawStack if len(state_size) == 1 else ImgStack
		self.stack = statemodel(state_size, num_envs, load=load, gpu=gpu)
		self.agent = agent(self.stack.state_size, action_size, load="" if train else load, gpu=gpu)

	def get_env_action(self, env, state, eps=None, sample=True):
		state = self.stack.get_state(state)
		env_action, action = self.agent.get_env_action(env, state, eps, sample)
		return env_action, action, state

	def train(self, state, action, next_state, reward, done):
		next_state = self.stack.get_state(next_state)
		self.agent.train(state, action, next_state, reward, done)

	def reset(self, num_envs=None):
		num_envs = self.stack.num_envs if num_envs is None else num_envs
		self.stack.reset(num_envs, restore=False)
		return self

	def save_model(self, dirname="pytorch", name="best"):
		if hasattr(self.agent, "network"): self.agent.network.save_model(dirname, name)

def run(model, steps=10000, ports=16, eval_at=1000):
	num_envs = len(ports) if type(ports) == list else min(ports, 64)
	envs = EnvManager(make_env, ports) if type(ports) == list else EnsembleEnv(make_env, ports)
	agent = AsyncAgent(envs.state_size, envs.action_size, num_envs, model)
	logger = Logger(model, env_name, num_envs=num_envs, state_size=agent.stack.state_size, action_size=envs.action_size, action_space=envs.env.action_space)
	states = envs.reset()
	total_rewards = []
	for s in range(steps):
		agent.reset(num_envs)
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if dones[0]:
			rollouts = [rollout(envs.env, agent.reset(1)) for _ in range(5)]
			test_reward = np.mean(rollouts) - np.std(rollouts)
			total_rewards.append(test_reward)
			agent.save_model(env_name, "checkpoint")
			if env_name in gfb_envs and total_rewards[-1] >= max(total_rewards): agent.save_model(env_name)
			logger.log(f"Step: {s}, Reward: {test_reward+np.std(rollouts):.4f} [{np.std(rollouts):.2f}], Avg: {np.mean(total_rewards):.4f} ({agent.agent.eps:.3f})")

if __name__ == "__main__":
	model = DDPGAgent if args.model == "ddpg" else PPOAgent if args.model == "ppo" else DDQNAgent if args.model == "ddqn" else RandomAgent
	if args.selfport is not None:
		EnvWorker(args.selfport, make_env).start()
	else:
		if len(args.workerports) == 1: args.workerports = args.workerports[0]
		run(model, args.steps, args.workerports)
	print(f"Training finished")

Step: 199, Reward: -200.0000 [0.00], Avg: -200.0000 (0.980)
Step: 399, Reward: -200.0000 [0.00], Avg: -200.0000 (0.960)
Step: 599, Reward: -200.0000 [0.00], Avg: -200.0000 (0.941)
Step: 799, Reward: -200.0000 [0.00], Avg: -200.0000 (0.922)
Step: 999, Reward: -200.0000 [0.00], Avg: -200.0000 (0.904)
Step: 1199, Reward: -200.0000 [0.00], Avg: -200.0000 (0.886)
Step: 1399, Reward: -200.0000 [0.00], Avg: -200.0000 (0.868)
Step: 1599, Reward: -200.0000 [0.00], Avg: -200.0000 (0.851)
Step: 1799, Reward: -200.0000 [0.00], Avg: -200.0000 (0.834)
Step: 1999, Reward: -200.0000 [0.00], Avg: -200.0000 (0.817)
Step: 2199, Reward: -200.0000 [0.00], Avg: -200.0000 (0.801)
Step: 2399, Reward: -200.0000 [0.00], Avg: -200.0000 (0.785)
Step: 2599, Reward: -200.0000 [0.00], Avg: -200.0000 (0.769)
Step: 2799, Reward: -200.0000 [0.00], Avg: -200.0000 (0.754)
Step: 2999, Reward: -200.0000 [0.00], Avg: -200.0000 (0.739)
Step: 3199, Reward: -200.0000 [0.00], Avg: -200.0000 (0.724)
Step: 3399, Reward: -200.0000 [0.00], Avg: -200.0000 (0.709)
Step: 3599, Reward: -200.0000 [0.00], Avg: -200.0000 (0.695)
Step: 3799, Reward: -200.0000 [0.00], Avg: -200.0000 (0.681)
Step: 3999, Reward: -200.0000 [0.00], Avg: -200.0000 (0.668)
Step: 4147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.654)
Step: 4347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.641)
Step: 4547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.628)
Step: 4747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.616)
Step: 4947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.603)
Step: 5147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.591)
Step: 5347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.580)
Step: 5547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.568)
Step: 5747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.557)
Step: 5947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.545)
Step: 6147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.535)
Step: 6347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.524)
Step: 6547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.513)
Step: 6747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.503)
Step: 6947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.493)
Step: 7147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.483)
Step: 7347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.474)
Step: 7547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.464)
Step: 7747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.455)
Step: 7947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.446)
Step: 8147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.437)
Step: 8347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.428)
Step: 8547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.419)
Step: 8747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.411)
Step: 8947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.403)
Step: 9147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.395)
Step: 9347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.387)
Step: 9547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.379)
Step: 9747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.372)
Step: 9947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.364)
Step: 10147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.357)
Step: 10347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.350)
Step: 10547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.343)
Step: 10747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.336)
Step: 10947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.329)
Step: 11147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.323)
Step: 11347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.316)
Step: 11547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.310)
Step: 11747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.304)
Step: 11947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.298)
Step: 12147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.292)
Step: 12347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.286)
Step: 12547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.280)
Step: 12747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.274)
Step: 12947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.269)
Step: 13147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.264)
Step: 13347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.258)
Step: 13547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.253)
Step: 13747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.248)
Step: 13947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.243)
Step: 14147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.238)
Step: 14347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.233)
Step: 14547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.229)
Step: 14747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.224)
Step: 14947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.220)
Step: 15147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.215)
Step: 15347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.211)
Step: 15547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.207)
Step: 15747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.203)
Step: 15947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.199)
Step: 16147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.195)
Step: 16347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.191)
Step: 16547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.187)
Step: 16747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.183)
Step: 16947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.180)
Step: 17147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.176)
Step: 17347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.172)
Step: 17547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.169)
Step: 17747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.166)
Step: 17947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.162)
Step: 18147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.159)
Step: 18347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.156)
Step: 18547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.153)
Step: 18747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.150)
Step: 18947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.147)
Step: 19147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.144)
Step: 19347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.141)
Step: 19547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.138)
Step: 19747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.135)
Step: 19947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.133)
Step: 20147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.130)
Step: 20347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.127)
Step: 20547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.125)
Step: 20747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.122)
Step: 20947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.120)
Step: 21147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.117)
Step: 21347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.115)
Step: 21547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.113)
Step: 21747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.111)
Step: 21947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.108)
Step: 22147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.106)
Step: 22347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.104)
Step: 22547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.102)
Step: 22747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.100)
Step: 22947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.098)
Step: 23147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.096)
Step: 23347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.094)
Step: 23547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.092)
Step: 23747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.090)
Step: 23947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.089)
Step: 24147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.087)
Step: 24347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.085)
Step: 24547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.083)
Step: 24747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.082)
Step: 24947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.080)
Step: 25147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.078)
Step: 25347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.077)
Step: 25547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.075)
Step: 25747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.074)
Step: 25947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.072)
Step: 26147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.071)
Step: 26347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.069)
Step: 26547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.068)
Step: 26747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.067)
Step: 26947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.065)
Step: 27147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.064)
Step: 27347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.063)
Step: 27547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.062)
Step: 27747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.060)
Step: 27947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.059)
Step: 28147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.058)
Step: 28347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.057)
Step: 28547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.056)
Step: 28747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.055)
Step: 28947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.053)
Step: 29147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.052)
Step: 29347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.051)
Step: 29547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.050)
Step: 29747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.049)
Step: 29947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.048)
Step: 30147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.047)
Step: 30347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.046)
Step: 30547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.045)
Step: 30747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.045)
Step: 30947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.044)
Step: 31147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.043)
Step: 31347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.042)
Step: 31547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.041)
Step: 31747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.040)
Step: 31947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.039)
Step: 32147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.039)
Step: 32347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.038)
Step: 32547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.037)
Step: 32747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.036)
Step: 32947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.036)
Step: 33147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.035)
Step: 33347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.034)
Step: 33547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.034)
Step: 33747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.033)
Step: 33947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.032)
Step: 34147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.032)
Step: 34347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.031)
Step: 34547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.030)
Step: 34747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.030)
Step: 34947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.029)
Step: 35147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.029)
Step: 35347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.028)
Step: 35547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.027)
Step: 35747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.027)
Step: 35947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.026)
Step: 36147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.026)
Step: 36347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.025)
Step: 36547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.025)
Step: 36747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.024)
Step: 36947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.024)
Step: 37147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.023)
Step: 37347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.023)
Step: 37547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.022)
Step: 37747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.022)
Step: 37947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.022)
Step: 38147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.021)
Step: 38347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.021)
Step: 38547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 38747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 38947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 39147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 39347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 39547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 39747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 39947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 40147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 40347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 40547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 40747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 40947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 41147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 41347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 41547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 41747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 41947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 42147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 42347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 42547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 42747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 42947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 43147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 43347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 43547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 43747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 43947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 44147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 44347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 44547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 44747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 44947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 45147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 45347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 45547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 45747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 45947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 46147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 46347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 46547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 46747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 46947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 47147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 47347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 47547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 47747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 47947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 48147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 48347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 48547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 48747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 48947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 49147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 49347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 49547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 49747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 49947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 50147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 50347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 50547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 50747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 50947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 51147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 51347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 51547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 51747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 51947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 52147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 52347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 52547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 52747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 52947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 53147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 53347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 53547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 53747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 53947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 54147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 54347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 54547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 54747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 54947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 55147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 55347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 55547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 55747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 55947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 56147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 56347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 56547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 56747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 56947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 57147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 57347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 57547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 57747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 57947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 58147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 58347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 58547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 58747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 58947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 59147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 59347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 59547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 59747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 59947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 60147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 60347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 60547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 60747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 60947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 61147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 61347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 61547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 61747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 61947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 62147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 62347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 62547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 62747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 62947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 63147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 63347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 63547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 63747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 63947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 64147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 64347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 64547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 64747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 64947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 65147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 65347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 65547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 65747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 65947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 66147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 66347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 66547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 66747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 66947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 67147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 67347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 67547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 67747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 67947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 68147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 68347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 68547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 68747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 68947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 69147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 69347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 69547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 69747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 69947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 70147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 70347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 70547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 70747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 70947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 71147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 71347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 71547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 71747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 71947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 72147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 72347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 72547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 72747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 72947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 73147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 73347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 73547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 73747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 73947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 74147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 74347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 74547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 74747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 74947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 75147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 75347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 75547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 75747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 75947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 76147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 76347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 76547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 76747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 76947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 77147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 77347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 77547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 77747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 77947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 78147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 78347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 78547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 78747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 78947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 79147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 79347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 79547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 79747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 79947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 80147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 80347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 80547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 80747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 80947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 81147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 81347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 81547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 81747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 81947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 82147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 82347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 82547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 82747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 82947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 83147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 83347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 83547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 83747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 83947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 84147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 84347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 84547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 84747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 84947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 85147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 85347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 85547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 85747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 85947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 86147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 86347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 86547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 86747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 86947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 87147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 87347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 87547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 87747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 87947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 88147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 88347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 88547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 88747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 88947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 89147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 89347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 89547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 89747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 89947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 90147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 90347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 90547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 90747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 90947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 91147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 91347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 91547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 91747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 91947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 92147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 92347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 92547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 92747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 92947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 93147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 93347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 93547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 93747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 93947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 94147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 94347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 94547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 94747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 94947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 95147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 95347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 95547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 95747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 95947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 96147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 96347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 96547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 96747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 96947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 97147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 97347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 97547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 97747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 97947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 98147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 98347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 98547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 98747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 98947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 99147, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 99347, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 99547, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 99747, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)
Step: 99947, Reward: -200.0000 [0.00], Avg: -200.0000 (0.020)

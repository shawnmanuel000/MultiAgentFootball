Model: <class 'models.ddpg.DDPGAgent'>, Dir: 1_vs_1_easy
num_envs: 16, state_size: (115,), action_size: [19], action_space: Discrete(19),

import os
import math
import torch
import random
import numpy as np
from models.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, EPS_MIN, EPS_DECAY, REPLAY_BATCH_SIZE

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh()
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(*action_size, INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None): 
		super().__init__(state_size, action_size, DDPGActor, DDPGCritic, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, use_target=False, numpy=True, sample=True):
		with torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, numpy=True):
		with torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, q_targets, importances=1):
		q_values = self.critic_local(states, actions)
		critic_error = q_values - q_targets.detach()
		critic_loss = importances.to(self.device) * critic_error.pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())

		q_actions = self.critic_local(states, self.actor_local(states))
		actor_loss = -(q_actions - q_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		
		self.soft_copy(self.actor_local, self.actor_target)
		self.soft_copy(self.critic_local, self.critic_target)
		return critic_error.cpu().detach().numpy().squeeze(-1)
	
	def save_model(self, dirname="pytorch", name="best"):
		super().save_model("ddpg", dirname, name)
		
	def load_model(self, dirname="pytorch", name="best"):
		super().load_model("ddpg", dirname, name)

class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, update_freq=NUM_STEPS, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, lr=lr, update_freq=update_freq, decay=decay, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if e_greedy and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		action = action_greedy if e_greedy else np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if done[0] or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			next_state = self.to_tensor(next_state)
			next_action = self.network.get_action(next_state, use_target=True, numpy=False)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			next_value = self.network.get_q_value(next_state, next_action, use_target=True, numpy=False)
			targets, _ = self.compute_gae(next_value, rewards.unsqueeze(-1), dones.unsqueeze(-1), values)
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states, actions, targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > 0:
			(states, actions, targets), indices, importances = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)
			errors = self.network.optimize(states, actions, targets, importances**(1-self.eps))
			self.replay_buffer.update_priorities(indices, errors)
			if done[0]: self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500 				# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import gfootball.env as ggym
from collections import deque
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, ImgStack, RawStack
from utils.misc import Logger, rollout

parser = argparse.ArgumentParser(description="A3C Trainer")
parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
parser.add_argument("--model", type=str, default="ddpg", choices=["ddqn", "ddpg", "ppo", "rand"], help="Which reinforcement learning algorithm to use")
parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
args = parser.parse_args()

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "1_vs_1_easy", "5_vs_5", "11_vs_11_stochastic"]
env_name = gfb_envs[1]

def make_env(env_name=env_name, log=False):
	if env_name in gym_envs: return gym.make(env_name)
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=False)
	env.unwrapped.spec = gym.envs.registration.EnvSpec(env_name + "-v0", max_episode_steps=env.unwrapped._config._scenario_cfg.game_duration)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space.n}")
	return env

class AsyncAgent(RandomAgent):
	def __init__(self, state_size, action_size, num_envs, agent, load="", gpu=True, train=True):
		super().__init__(state_size, action_size)
		statemodel = RawStack if len(state_size) == 1 else ImgStack
		self.stack = statemodel(state_size, num_envs, load=load, gpu=gpu)
		self.agent = agent(self.stack.state_size, action_size, load="" if train else load, gpu=gpu)

	def get_env_action(self, env, state, eps=None, sample=True):
		state = self.stack.get_state(state)
		env_action, action = self.agent.get_env_action(env, state, eps, sample)
		return env_action, action, state

	def train(self, state, action, next_state, reward, done):
		next_state = self.stack.get_state(next_state)
		self.agent.train(state, action, next_state, reward, done)

	def reset(self, num_envs=None):
		num_envs = self.stack.num_envs if num_envs is None else num_envs
		self.stack.reset(num_envs, restore=False)
		return self

	def save_model(self, dirname="pytorch", name="best"):
		if hasattr(self.agent, "network"): self.agent.network.save_model(dirname, name)

def run(model, steps=10000, ports=16, eval_at=1000):
	num_envs = len(ports) if type(ports) == list else min(ports, 64)
	envs = EnvManager(make_env, ports) if type(ports) == list else EnsembleEnv(make_env, ports)
	agent = AsyncAgent(envs.state_size, envs.action_size, num_envs, model)
	logger = Logger(model, env_name, num_envs=num_envs, state_size=agent.stack.state_size, action_size=envs.action_size, action_space=envs.env.action_space)
	states = envs.reset()
	total_rewards = []
	for s in range(steps):
		agent.reset(num_envs)
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if dones[0]:
			rollouts = [rollout(envs.env, agent.reset(1)) for _ in range(5)]
			test_reward = np.mean(rollouts) - np.std(rollouts)
			total_rewards.append(test_reward)
			agent.save_model(env_name, "checkpoint")
			if env_name in gfb_envs and total_rewards[-1] >= max(total_rewards): agent.save_model(env_name)
			logger.log(f"Step: {s}, Reward: {test_reward+np.std(rollouts):.4f} [{np.std(rollouts):.2f}], Avg: {np.mean(total_rewards):.4f} ({agent.agent.eps:.3f})")

if __name__ == "__main__":
	model = DDPGAgent if args.model == "ddpg" else PPOAgent if args.model == "ppo" else DDQNAgent if args.model == "ddqn" else RandomAgent
	if args.selfport is not None:
		EnvWorker(args.selfport, make_env).start()
	else:
		if len(args.workerports) == 1: args.workerports = args.workerports[0]
		run(model, args.steps, args.workerports)
	print(f"Training finished")

Step: 499, Reward: -0.2000 [0.40], Avg: -0.6000 (0.980)
Step: 999, Reward: -0.8000 [0.75], Avg: -1.0742 (0.960)
Step: 1499, Reward: -1.4000 [1.02], Avg: -1.5227 (0.941)
Step: 1999, Reward: -0.6000 [0.49], Avg: -1.4145 (0.922)
Step: 2499, Reward: -0.6000 [0.49], Avg: -1.3496 (0.904)
Step: 2999, Reward: -0.8000 [0.40], Avg: -1.3247 (0.886)
Step: 3499, Reward: -0.8000 [0.75], Avg: -1.3566 (0.868)
Step: 3999, Reward: -0.4000 [0.49], Avg: -1.2983 (0.851)
Step: 4499, Reward: -0.6000 [0.49], Avg: -1.2751 (0.834)
Step: 4999, Reward: -0.4000 [0.49], Avg: -1.2366 (0.817)
Step: 5499, Reward: -0.8000 [0.98], Avg: -1.2860 (0.801)
Step: 5999, Reward: -0.4000 [0.49], Avg: -1.2530 (0.785)
Step: 6499, Reward: -0.6000 [0.49], Avg: -1.2404 (0.769)
Step: 6999, Reward: -0.4000 [0.49], Avg: -1.2154 (0.754)
Step: 7499, Reward: 0.0000 [0.63], Avg: -1.1765 (0.739)
Step: 7999, Reward: -0.2000 [0.40], Avg: -1.1405 (0.724)
Step: 8499, Reward: -0.8000 [0.75], Avg: -1.1645 (0.709)
Step: 8999, Reward: -0.6000 [0.49], Avg: -1.1603 (0.695)
Step: 9499, Reward: -0.2000 [0.40], Avg: -1.1308 (0.681)
Step: 9999, Reward: -0.4000 [0.49], Avg: -1.1188 (0.668)
Step: 10499, Reward: -0.4000 [0.49], Avg: -1.1079 (0.654)
Step: 10999, Reward: -0.2000 [0.40], Avg: -1.0848 (0.641)
Step: 11499, Reward: -0.6000 [0.49], Avg: -1.0850 (0.628)
Step: 11999, Reward: -0.2000 [0.40], Avg: -1.0648 (0.616)
Step: 12499, Reward: 0.0000 [0.63], Avg: -1.0475 (0.603)
Step: 12999, Reward: -0.6000 [0.49], Avg: -1.0492 (0.591)
Step: 13499, Reward: -0.6000 [0.49], Avg: -1.0507 (0.580)
Step: 13999, Reward: -0.8000 [0.40], Avg: -1.0560 (0.568)
Step: 14499, Reward: -0.2000 [0.40], Avg: -1.0403 (0.557)
Step: 14999, Reward: -0.8000 [0.75], Avg: -1.0572 (0.545)
Step: 15499, Reward: -0.8000 [0.75], Avg: -1.0731 (0.535)
Step: 15999, Reward: -0.6000 [0.49], Avg: -1.0736 (0.524)
Step: 16499, Reward: 0.2000 [0.40], Avg: -1.0471 (0.513)
Step: 16999, Reward: -0.2000 [0.75], Avg: -1.0442 (0.503)
Step: 17499, Reward: 0.0000 [0.00], Avg: -1.0144 (0.493)
Step: 17999, Reward: 0.0000 [0.00], Avg: -0.9862 (0.483)
Step: 18499, Reward: -0.4000 [0.49], Avg: -0.9836 (0.474)
Step: 18999, Reward: -0.2000 [0.40], Avg: -0.9735 (0.464)
Step: 19499, Reward: -1.6000 [0.49], Avg: -1.0021 (0.455)
Step: 19999, Reward: -0.8000 [0.75], Avg: -1.0158 (0.446)
Step: 20499, Reward: -1.4000 [1.02], Avg: -1.0500 (0.437)
Step: 20999, Reward: -0.8000 [0.75], Avg: -1.0619 (0.428)
Step: 21499, Reward: -0.4000 [0.49], Avg: -1.0579 (0.419)
Step: 21999, Reward: 0.0000 [0.00], Avg: -1.0338 (0.411)
Step: 22499, Reward: -0.8000 [0.75], Avg: -1.0453 (0.403)
Step: 22999, Reward: -0.4000 [0.49], Avg: -1.0419 (0.395)
Step: 23499, Reward: 0.0000 [0.00], Avg: -1.0197 (0.387)
Step: 23999, Reward: -0.8000 [0.75], Avg: -1.0307 (0.379)
Step: 24499, Reward: 0.0000 [0.00], Avg: -1.0097 (0.372)
Step: 24999, Reward: -0.4000 [0.49], Avg: -1.0073 (0.364)
Step: 25499, Reward: 0.0000 [0.00], Avg: -0.9876 (0.357)
Step: 25999, Reward: -0.6000 [0.80], Avg: -0.9955 (0.350)
Step: 26499, Reward: -0.8000 [0.98], Avg: -1.0103 (0.343)
Step: 26999, Reward: -1.8000 [1.17], Avg: -1.0465 (0.336)
Step: 27499, Reward: -0.4000 [0.49], Avg: -1.0437 (0.329)
Step: 27999, Reward: -3.0000 [0.00], Avg: -1.0786 (0.323)
Step: 28499, Reward: -1.0000 [0.63], Avg: -1.0883 (0.316)
Step: 28999, Reward: -0.2000 [0.40], Avg: -1.0799 (0.310)
Step: 29499, Reward: -0.2000 [0.40], Avg: -1.0718 (0.304)
Step: 29999, Reward: 0.0000 [0.00], Avg: -1.0539 (0.298)
Step: 30499, Reward: -1.2000 [0.98], Avg: -1.0724 (0.292)
Step: 30999, Reward: -2.0000 [1.10], Avg: -1.1050 (0.286)
Step: 31499, Reward: -2.2000 [0.98], Avg: -1.1379 (0.280)
Step: 31999, Reward: -0.4000 [0.49], Avg: -1.1340 (0.274)
Step: 32499, Reward: -0.6000 [0.49], Avg: -1.1334 (0.269)
Step: 32999, Reward: -1.0000 [0.63], Avg: -1.1409 (0.264)
Step: 33499, Reward: -0.2000 [0.75], Avg: -1.1381 (0.258)
Step: 33999, Reward: -1.2000 [0.75], Avg: -1.1500 (0.253)
Step: 34499, Reward: 0.2000 [0.75], Avg: -1.1412 (0.248)
Step: 34999, Reward: -0.4000 [0.49], Avg: -1.1377 (0.243)
Step: 35499, Reward: 0.0000 [0.63], Avg: -1.1305 (0.238)
Step: 35999, Reward: -0.4000 [1.02], Avg: -1.1346 (0.233)
Step: 36499, Reward: 0.6000 [1.02], Avg: -1.1248 (0.229)
Step: 36999, Reward: -0.2000 [0.40], Avg: -1.1177 (0.224)
Step: 37499, Reward: 0.0000 [0.00], Avg: -1.1028 (0.220)
Step: 37999, Reward: 0.0000 [0.63], Avg: -1.0966 (0.215)
Step: 38499, Reward: 0.0000 [0.89], Avg: -1.0940 (0.211)
Step: 38999, Reward: 0.6000 [0.80], Avg: -1.0825 (0.207)
Step: 39499, Reward: -0.2000 [0.40], Avg: -1.0764 (0.203)
Step: 39999, Reward: 0.2000 [0.40], Avg: -1.0654 (0.199)
Step: 40499, Reward: 0.4000 [0.80], Avg: -1.0572 (0.195)
Step: 40999, Reward: 0.2000 [0.75], Avg: -1.0510 (0.191)
Step: 41499, Reward: -0.2000 [0.40], Avg: -1.0456 (0.187)
Step: 41999, Reward: -0.4000 [0.49], Avg: -1.0437 (0.183)
Step: 42499, Reward: 0.0000 [0.00], Avg: -1.0315 (0.180)
Step: 42999, Reward: 0.4000 [0.49], Avg: -1.0205 (0.176)
Step: 43499, Reward: -0.2000 [0.40], Avg: -1.0157 (0.172)
Step: 43999, Reward: 0.0000 [0.00], Avg: -1.0041 (0.169)
Step: 44499, Reward: 0.2000 [0.40], Avg: -0.9951 (0.166)
Step: 44999, Reward: 0.4000 [0.80], Avg: -0.9885 (0.162)
Step: 45499, Reward: 0.4000 [0.49], Avg: -0.9786 (0.159)
Step: 45999, Reward: 0.0000 [0.00], Avg: -0.9680 (0.156)
Step: 46499, Reward: 0.2000 [0.40], Avg: -0.9597 (0.153)
Step: 46999, Reward: 0.4000 [0.49], Avg: -0.9505 (0.150)
Step: 47499, Reward: 0.2000 [0.40], Avg: -0.9426 (0.147)
Step: 47999, Reward: 0.2000 [0.40], Avg: -0.9348 (0.144)
Step: 48499, Reward: 0.6000 [0.49], Avg: -0.9241 (0.141)
Step: 48999, Reward: 0.6000 [0.80], Avg: -0.9167 (0.138)
Step: 49499, Reward: 0.0000 [0.63], Avg: -0.9138 (0.135)
Step: 49999, Reward: 0.2000 [0.75], Avg: -0.9101 (0.133)
Step: 50499, Reward: 0.8000 [1.17], Avg: -0.9048 (0.130)
Step: 50999, Reward: 0.0000 [0.00], Avg: -0.8959 (0.127)
Step: 51499, Reward: 0.2000 [0.40], Avg: -0.8891 (0.125)
Step: 51999, Reward: 0.2000 [0.75], Avg: -0.8858 (0.122)
Step: 52499, Reward: 0.2000 [0.40], Avg: -0.8793 (0.120)
Step: 52999, Reward: 0.6000 [0.49], Avg: -0.8700 (0.117)
Step: 53499, Reward: 0.2000 [0.40], Avg: -0.8637 (0.115)
Step: 53999, Reward: 0.4000 [0.49], Avg: -0.8566 (0.113)
Step: 54499, Reward: -0.2000 [0.75], Avg: -0.8574 (0.111)
Step: 54999, Reward: 0.6000 [0.49], Avg: -0.8486 (0.108)
Step: 55499, Reward: 0.6000 [0.49], Avg: -0.8400 (0.106)
Step: 55999, Reward: 0.2000 [0.40], Avg: -0.8343 (0.104)
Step: 56499, Reward: 0.2000 [0.40], Avg: -0.8286 (0.102)
Step: 56999, Reward: 0.4000 [0.49], Avg: -0.8222 (0.100)
Step: 57499, Reward: 0.0000 [0.63], Avg: -0.8205 (0.098)
Step: 57999, Reward: 0.0000 [0.89], Avg: -0.8211 (0.096)
Step: 58499, Reward: -0.4000 [0.49], Avg: -0.8217 (0.094)
Step: 58999, Reward: 0.4000 [0.49], Avg: -0.8155 (0.092)
Step: 59499, Reward: 0.4000 [0.49], Avg: -0.8094 (0.090)
Step: 59999, Reward: 0.4000 [0.49], Avg: -0.8034 (0.089)
Step: 60499, Reward: -0.6000 [0.49], Avg: -0.8058 (0.087)
Step: 60999, Reward: -0.4000 [0.49], Avg: -0.8065 (0.085)
Step: 61499, Reward: 0.2000 [0.75], Avg: -0.8044 (0.083)
Step: 61999, Reward: 0.0000 [0.89], Avg: -0.8051 (0.082)
Step: 62499, Reward: 0.0000 [0.89], Avg: -0.8058 (0.080)
Step: 62999, Reward: -0.2000 [0.75], Avg: -0.8070 (0.078)
Step: 63499, Reward: 0.2000 [0.40], Avg: -0.8022 (0.077)
Step: 63999, Reward: 0.4000 [0.49], Avg: -0.7966 (0.075)
Step: 64499, Reward: 0.4000 [0.49], Avg: -0.7911 (0.074)
Step: 64999, Reward: 0.0000 [0.00], Avg: -0.7851 (0.072)
Step: 65499, Reward: 0.2000 [0.75], Avg: -0.7833 (0.071)
Step: 65999, Reward: -0.2000 [0.75], Avg: -0.7845 (0.069)
Step: 66499, Reward: 1.0000 [0.63], Avg: -0.7758 (0.068)
Step: 66999, Reward: 0.6000 [0.49], Avg: -0.7692 (0.067)
Step: 67499, Reward: 0.6000 [0.49], Avg: -0.7627 (0.065)
Step: 67999, Reward: 0.0000 [0.63], Avg: -0.7618 (0.064)
Step: 68499, Reward: 0.0000 [0.63], Avg: -0.7608 (0.063)
Step: 68999, Reward: 0.2000 [0.75], Avg: -0.7593 (0.062)
Step: 69499, Reward: 0.8000 [0.98], Avg: -0.7551 (0.060)
Step: 69999, Reward: 0.2000 [0.40], Avg: -0.7511 (0.059)
Step: 70499, Reward: 1.0000 [0.89], Avg: -0.7451 (0.058)
Step: 70999, Reward: 0.2000 [0.40], Avg: -0.7412 (0.057)
Step: 71499, Reward: 0.2000 [0.75], Avg: -0.7399 (0.056)
Step: 71999, Reward: 0.4000 [0.49], Avg: -0.7354 (0.055)
Step: 72499, Reward: 0.2000 [0.75], Avg: -0.7341 (0.053)
Step: 72999, Reward: 0.8000 [0.40], Avg: -0.7263 (0.052)
Step: 73499, Reward: 0.0000 [0.63], Avg: -0.7257 (0.051)
Step: 73999, Reward: 0.2000 [0.40], Avg: -0.7221 (0.050)
Step: 74499, Reward: 1.4000 [1.36], Avg: -0.7170 (0.049)
Step: 74999, Reward: 0.0000 [0.89], Avg: -0.7182 (0.048)
Step: 75499, Reward: 1.0000 [0.63], Avg: -0.7110 (0.047)
Step: 75999, Reward: 0.6000 [1.02], Avg: -0.7091 (0.046)
Step: 76499, Reward: 0.6000 [0.80], Avg: -0.7057 (0.045)
Step: 76999, Reward: 0.4000 [1.02], Avg: -0.7052 (0.045)
Step: 77499, Reward: 1.2000 [1.17], Avg: -0.7004 (0.044)
Step: 77999, Reward: 0.6000 [1.02], Avg: -0.6986 (0.043)
Step: 78499, Reward: 1.4000 [0.49], Avg: -0.6884 (0.042)
Step: 78999, Reward: 0.2000 [0.40], Avg: -0.6853 (0.041)
Step: 79499, Reward: 1.4000 [1.20], Avg: -0.6797 (0.040)
Step: 79999, Reward: 0.6000 [0.80], Avg: -0.6767 (0.039)
Step: 80499, Reward: 2.0000 [1.10], Avg: -0.6669 (0.039)
Step: 80999, Reward: 1.2000 [1.17], Avg: -0.6626 (0.038)
Step: 81499, Reward: 1.6000 [1.02], Avg: -0.6549 (0.037)
Step: 81999, Reward: 1.0000 [0.89], Avg: -0.6503 (0.036)
Step: 82499, Reward: 1.4000 [0.80], Avg: -0.6427 (0.036)
Step: 82999, Reward: 0.6000 [1.02], Avg: -0.6414 (0.035)
Step: 83499, Reward: -0.2000 [0.75], Avg: -0.6432 (0.034)
Step: 83999, Reward: 1.2000 [1.47], Avg: -0.6410 (0.034)
Step: 84499, Reward: 1.2000 [0.75], Avg: -0.6345 (0.033)
Step: 84999, Reward: 1.4000 [0.49], Avg: -0.6254 (0.032)
Step: 85499, Reward: 0.8000 [0.75], Avg: -0.6215 (0.032)
Step: 85999, Reward: 0.8000 [0.75], Avg: -0.6176 (0.031)
Step: 86499, Reward: 0.2000 [0.75], Avg: -0.6172 (0.030)
Step: 86999, Reward: 0.0000 [0.63], Avg: -0.6172 (0.030)
Step: 87499, Reward: 0.2000 [0.98], Avg: -0.6182 (0.029)
Step: 87999, Reward: 0.6000 [0.80], Avg: -0.6158 (0.029)
Step: 88499, Reward: 1.2000 [1.17], Avg: -0.6121 (0.028)
Step: 88999, Reward: 0.8000 [0.75], Avg: -0.6084 (0.027)
Step: 89499, Reward: -0.2000 [0.75], Avg: -0.6103 (0.027)
Step: 89999, Reward: 1.2000 [0.75], Avg: -0.6044 (0.026)
Step: 90499, Reward: 0.4000 [1.02], Avg: -0.6045 (0.026)
Step: 90999, Reward: 1.2000 [0.75], Avg: -0.5987 (0.025)
Step: 91499, Reward: 1.0000 [1.41], Avg: -0.5977 (0.025)
Step: 91999, Reward: 0.8000 [0.40], Avg: -0.5923 (0.024)
Step: 92499, Reward: 0.4000 [0.80], Avg: -0.5912 (0.024)
Step: 92999, Reward: 0.6000 [1.62], Avg: -0.5935 (0.023)
Step: 93499, Reward: 0.6000 [1.02], Avg: -0.5926 (0.023)
Step: 93999, Reward: 0.0000 [0.00], Avg: -0.5895 (0.022)
Step: 94499, Reward: 2.4000 [0.80], Avg: -0.5779 (0.022)
Step: 94999, Reward: 0.8000 [0.75], Avg: -0.5746 (0.022)
Step: 95499, Reward: 1.4000 [1.02], Avg: -0.5696 (0.021)
Step: 95999, Reward: 1.2000 [0.75], Avg: -0.5642 (0.021)
Step: 96499, Reward: 0.6000 [1.02], Avg: -0.5635 (0.020)
Step: 96999, Reward: 0.4000 [1.20], Avg: -0.5647 (0.020)
Step: 97499, Reward: 1.4000 [1.02], Avg: -0.5599 (0.020)
Step: 97999, Reward: 0.6000 [0.49], Avg: -0.5565 (0.020)
Step: 98499, Reward: 0.6000 [0.80], Avg: -0.5546 (0.020)
Step: 98999, Reward: 1.2000 [0.40], Avg: -0.5478 (0.020)
Step: 99499, Reward: 0.6000 [0.80], Avg: -0.5461 (0.020)
Step: 99999, Reward: 1.0000 [0.00], Avg: -0.5383 (0.020)

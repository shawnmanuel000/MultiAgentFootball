Model: <class 'multiagent.mappo.MAPPOAgent'>, Dir: 5_vs_5
num_envs: 16,
state_size: [(1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115)],
action_size: [[1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19]],
action_space: [MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19])],
envs: <class 'utils.envs.EnvManager'>,
reward_shape: False,
icm: False,

import torch
import random
import numpy as np
from models.ppo import PPONetwork, PPOCritic
from models.rand import MultiagentReplayBuffer2
from utils.network import PTNetwork, PTACNetwork, PTACAgent, Conv, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, EPS_MIN, MultiheadAttention, one_hot_from_indices, gsoftmax

ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities
BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 5					# Number of iterations to sample batches for training
TIME_BATCH = 50					# Number of time steps for RNN BPTT
MAX_BUFFER_SIZE = 960  	    	# Sets the maximum length of the replay buffer

class MAPPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.norm1 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.norm2 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.layer1 = torch.nn.Linear(state_size[-1], ACTOR_HIDDEN)
		self.layer2 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.recurrent = torch.nn.GRUCell(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.attention = MultiheadAttention(ACTOR_HIDDEN, 1, 1)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.init_hidden()

	def forward(self, state, action=None, sample=True):
		state = self.norm1(self.layer1(state)).relu()
		state = self.norm2(self.layer2(state)).relu()
		out_dims = state.shape[:-1]
		state = state.reshape(-1, state.shape[-1])
		if self.hidden.size(0) != state.size(0): self.init_hidden(state.size(0), state.device)
		self.hidden = self.recurrent(state, self.hidden)
		state = self.attention(self.hidden)
		action_mu = self.action_mu(state).tanh()
		action_mu = action_mu.reshape(*out_dims, action_mu.shape[-1])
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

	def init_hidden(self, batch_size=1, device=torch.device("cpu")):
		self.hidden = torch.zeros([batch_size, ACTOR_HIDDEN]).to(device)

class MAPPONetwork(PTNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(gpu=gpu, name="mappo")
		self.state_size = state_size
		self.action_size = action_size
		self.actor = MAPPOActor(state_size[0], action_size[0])
		self.critic = lambda s,a: PPOCritic([np.sum([np.prod(s) for s in self.state_size])], [np.sum([np.prod(a) for a in self.action_size])])
		self.models = [PPONetwork(s_size, a_size, lambda s,a: self.actor, self.critic, lr=lr/len(state_size), gpu=gpu, load=load) for s_size,a_size in zip(self.state_size, self.action_size)]
		[[m.train() for m in [model.actor_local, model.critic_local]] for model in self.models]
		if load: self.load_model(load)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action_in = [None] * len(state) if action_in is None else action_in
			action_or_entropy, log_prob = map(list, zip(*[model.get_action_probs(s, a, grad=grad, numpy=numpy, sample=sample) for s,a,model in zip(state, action_in, self.models)]))
			return action_or_entropy, log_prob

	def get_value(self, state, grad=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_value = [model.get_value(state, grad) for model in self.models]
			return q_value

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
		for model, state, action, old_log_prob, target, advantage in zip(self.models, states, actions, old_log_probs, targets, advantages):		
			[m.train() for m in [model.actor_local, model.critic_local]]
			values = model.get_value(states_joint, grad=True)
			critic_error = values - target.detach()
			critic_loss = critic_error.pow(2)
			model.step(model.critic_optimizer, critic_loss.mean(), model.critic_local.parameters())

			model.actor_local.init_hidden(state.size(0), state.device)
			entropy, new_log_prob = zip(*[model.get_action_probs(state[:,t], action[:,t], grad=True, numpy=False) for t in range(state.size(1))])
			new_log_prob = torch.stack(new_log_prob, dim=1)
			entropy = torch.stack(entropy).mean()
			ratio = (new_log_prob - old_log_prob).exp()
			ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
			advantage = advantage.view(*advantage.shape, *[1]*(len(ratio.shape)-len(advantage.shape)))
			actor_loss = -(torch.min(ratio*advantage, ratio_clipped*advantage) + e_weight*entropy) * scale
			model.step(model.actor_optimizer, actor_loss.mean(), model.actor_local.parameters())
			[m.eval() for m in [model.actor_local, model.critic_local]]

	def save_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.save_model(model, self.name, dirname, f"{name}_{i}") for i,model in enumerate(self.models)]
		
	def load_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.load_model(model, self.name, dirname, f"{name}_{i}") for i,model in enumerate(self.models)]

class MAPPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, MAPPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)
		self.replay_buffer = MultiagentReplayBuffer2(MAX_BUFFER_SIZE, state_size, action_size, TIME_BATCH)

	def get_action(self, state, eps=None, sample=True, numpy=True):
		action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return action

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, self.log_prob, reward, done))
		if np.any(done[0]):
			states, actions, log_probs, rewards, dones = map(lambda x: self.to_tensor(x), zip(*self.buffer))
			self.buffer.clear()
			states = [torch.cat([s, ns.unsqueeze(0)], dim=0) for s,ns in zip(states, self.to_tensor(next_state))]
			states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
			values = self.network.get_value(states_joint)
			targets, advantages = zip(*[self.compute_gae(value[-1], reward.unsqueeze(-1), done.unsqueeze(-1), value[:-1]) for value,reward,done in zip(values, rewards, dones)])
			time_split = lambda x: [t.view(-1,TIME_BATCH,*t.shape[1:]).transpose(0,1).reshape(TIME_BATCH,-1,*t.shape[2:]).transpose(0,1).cpu().numpy() for t in x]
			states, actions, log_probs, targets, advantages = map(time_split, [[s[:-1] for s in states], actions, log_probs, targets, advantages])
			self.replay_buffer.add(states, actions, log_probs, targets, advantages)
		if len(self.replay_buffer) >= MAX_BUFFER_SIZE:
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				states, actions, log_probs, targets, advantages = self.replay_buffer.sample(BATCH_SIZE, device=self.network.device)
				self.network.optimize(states, actions, log_probs, targets, advantages)
			self.replay_buffer.clear()

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.001   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 256				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 512				# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.998			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.000               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 1000000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import particle_envs.make_env as pgym
import football.gfootball.env as ggym
from models.ppo import PPOAgent
from models.sac import SACAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from multiagent.coma import COMAAgent
from multiagent.maddpg import MADDPGAgent
from multiagent.mappo import MAPPOAgent
from utils.wrappers import ParallelAgent, DoubleAgent, SelfPlayAgent, ParticleTeamEnv, FootballTeamEnv, TrainEnv
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, MPI_SIZE, MPI_RANK
from utils.misc import Logger, rollout
np.set_printoptions(precision=3)

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "academy_empty_goal", "academy_run_to_score", "academy_run_to_score_with_keeper", "academy_single_goal_versus_lazy", "academy_3_vs_1_with_keeper", "1_vs_1_easy", "3_vs_3_custom", "5_vs_5", "11_vs_11_stochastic", "test_example_multiagent"]
ptc_envs = ["simple_adversary", "simple_speaker_listener", "simple_tag", "simple_spread", "simple_push"]
env_name = gym_envs[0]
env_name = gfb_envs[-3]
# env_name = ptc_envs[-2]

def make_env(env_name=env_name, log=False, render=False, reward_shape=False):
	if env_name in gym_envs: return TrainEnv(gym.make(env_name))
	if env_name in ptc_envs: return ParticleTeamEnv(pgym.make_env(env_name))
	ballr = lambda x,y: (np.maximum if x>0 else np.minimum)(x - np.abs(y)*np.sign(x), 0.5*x)
	reward_fn = lambda obs,reward: [(ballr(o[0,88], o[0,89]) + o[0,95]-o[0,96] + 2*r)/4 for o,r in zip(obs,reward)]
	return FootballTeamEnv(ggym, env_name, reward_fn if reward_shape else None)

def run(model, steps=10000, ports=16, env_name=env_name, trial_at=10000, save_at=10, checkpoint=True, save_best=False, log=True, render=False, reward_shape=False, icm=False):
	envs = (EnvManager if type(ports) == list or MPI_SIZE > 1 else EnsembleEnv)(lambda: make_env(env_name, reward_shape=reward_shape), ports)
	agent = (DoubleAgent if envs.env.self_play else ParallelAgent)(envs.state_size, envs.action_size, model, envs.num_envs, load="", gpu=True, agent2=RandomAgent, save_dir=env_name, icm=icm) 
	logger = Logger(model, env_name, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), reward_shape=reward_shape, icm=icm)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%trial_at == 0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.mean(rollouts, axis=-1))
			if checkpoint and len(total_rewards) % save_at==0: agent.save_model(env_name, "checkpoint")
			if save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(env_name)
			if log: logger.log(f"Step: {s}, Reward: {total_rewards[-1]} [{np.std(rollouts)}], Avg: {np.mean(total_rewards, axis=0)} ({agent.get_stats()})")

def trial(model, env_name, render):
	envs = EnsembleEnv(lambda: make_env(env_name, log=True, render=render), 0)
	agent = (DoubleAgent if envs.env.self_play() else ParallelAgent)(envs.state_size, envs.action_size, model, gpu=False, load=f"{env_name}", agent2=RandomAgent, save_dir=env_name)
	print(f"Reward: {np.mean([rollout(envs.env, agent, eps=0.0, render=True) for _ in range(5)], axis=0)}")
	envs.close()

def parse_args():
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
	parser.add_argument("--model", type=str, default="mappo", help="Which reinforcement learning algorithm to use")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	parser.add_argument("--reward_shape", action="store_true", help="Whether to shape rewards for football")
	parser.add_argument("--icm", action="store_true", help="Whether to use intrinsic motivation")
	parser.add_argument("--render", action="store_true", help="Whether to render during training")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run")
	parser.add_argument("--env", type=str, default="", help="Name of env to use")
	return parser.parse_args()

if __name__ == "__main__":
	args = parse_args()
	env_name = env_name if args.env not in [*gym_envs, *gfb_envs, *ptc_envs] else args.env
	models = {"ddpg":DDPGAgent, "ppo":PPOAgent, "sac":SACAgent, "ddqn":DDQNAgent, "maddpg":MADDPGAgent, "mappo":MAPPOAgent, "coma":COMAAgent, "rand":RandomAgent}
	model = models[args.model] if args.model in models else RandomAgent
	if args.trial:
		trial(model=model, env_name=env_name, render=args.render)
	elif args.selfport is not None or MPI_RANK>0 :
		EnvWorker(self_port=args.selfport, make_env=make_env).start()
	else:
		run(model=model, steps=args.steps, ports=args.workerports[0] if len(args.workerports)==1 else args.workerports, env_name=env_name, render=args.render, reward_shape=args.reward_shape, icm=args.icm)


Step: 0, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [1.0897247791290283], Avg: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] ({'r_i': None, 'eps': 1.0})
Step: 10000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.172603964805603], Avg: [-0.094 -0.094 -0.094 -0.094 -0.094  0.094  0.094  0.094  0.094  0.094] ({'r_i': None, 'eps': 1.0})
Step: 20000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354143738746643], Avg: [ 0.104  0.104  0.104  0.104  0.104 -0.104 -0.104 -0.104 -0.104 -0.104] ({'r_i': None, 'eps': 1.0})
Step: 30000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.9682458639144897], Avg: [ 0.094  0.094  0.094  0.094  0.094 -0.094 -0.094 -0.094 -0.094 -0.094] ({'r_i': None, 'eps': 1.0})
Step: 40000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.0606601238250732], Avg: [ 0.2  0.2  0.2  0.2  0.2 -0.2 -0.2 -0.2 -0.2 -0.2] ({'r_i': None, 'eps': 1.0})
Step: 50000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [1.172603964805603], Avg: [ 0.229  0.229  0.229  0.229  0.229 -0.229 -0.229 -0.229 -0.229 -0.229] ({'r_i': None, 'eps': 1.0})
Step: 60000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9013878107070923], Avg: [ 0.223  0.223  0.223  0.223  0.223 -0.223 -0.223 -0.223 -0.223 -0.223] ({'r_i': None, 'eps': 1.0})
Step: 70000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.75], Avg: [ 0.172  0.172  0.172  0.172  0.172 -0.172 -0.172 -0.172 -0.172 -0.172] ({'r_i': None, 'eps': 1.0})
Step: 80000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.0606601238250732], Avg: [ 0.167  0.167  0.167  0.167  0.167 -0.167 -0.167 -0.167 -0.167 -0.167] ({'r_i': None, 'eps': 1.0})
Step: 90000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.9354143738746643], Avg: [ 0.175  0.175  0.175  0.175  0.175 -0.175 -0.175 -0.175 -0.175 -0.175] ({'r_i': None, 'eps': 1.0})
Step: 100000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.541103482246399], Avg: [ 0.216  0.216  0.216  0.216  0.216 -0.216 -0.216 -0.216 -0.216 -0.216] ({'r_i': None, 'eps': 1.0})
Step: 110000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.0307763814926147], Avg: [ 0.234  0.234  0.234  0.234  0.234 -0.234 -0.234 -0.234 -0.234 -0.234] ({'r_i': None, 'eps': 1.0})
Step: 120000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [1.299038052558899], Avg: [ 0.24  0.24  0.24  0.24  0.24 -0.24 -0.24 -0.24 -0.24 -0.24] ({'r_i': None, 'eps': 1.0})
Step: 130000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.0307763814926147], Avg: [ 0.263  0.263  0.263  0.263  0.263 -0.263 -0.263 -0.263 -0.263 -0.263] ({'r_i': None, 'eps': 1.0})
Step: 140000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.172603964805603], Avg: [ 0.279  0.279  0.279  0.279  0.279 -0.279 -0.279 -0.279 -0.279 -0.279] ({'r_i': None, 'eps': 1.0})
Step: 150000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.145643949508667], Avg: [ 0.297  0.297  0.297  0.297  0.297 -0.297 -0.297 -0.297 -0.297 -0.297] ({'r_i': None, 'eps': 1.0})
Step: 160000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.9354143738746643], Avg: [ 0.294  0.294  0.294  0.294  0.294 -0.294 -0.294 -0.294 -0.294 -0.294] ({'r_i': None, 'eps': 1.0})
Step: 170000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.0897247791290283], Avg: [ 0.309  0.309  0.309  0.309  0.309 -0.309 -0.309 -0.309 -0.309 -0.309] ({'r_i': None, 'eps': 1.0})
Step: 180000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [0.9682458639144897], Avg: [ 0.322  0.322  0.322  0.322  0.322 -0.322 -0.322 -0.322 -0.322 -0.322] ({'r_i': None, 'eps': 1.0})
Step: 190000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.9013878107070923], Avg: [ 0.297  0.297  0.297  0.297  0.297 -0.297 -0.297 -0.297 -0.297 -0.297] ({'r_i': None, 'eps': 1.0})
Step: 200000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.1180340051651], Avg: [ 0.289  0.289  0.289  0.289  0.289 -0.289 -0.289 -0.289 -0.289 -0.289] ({'r_i': None, 'eps': 1.0})
Step: 210000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.0897247791290283], Avg: [ 0.301  0.301  0.301  0.301  0.301 -0.301 -0.301 -0.301 -0.301 -0.301] ({'r_i': None, 'eps': 1.0})
Step: 220000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.829156219959259], Avg: [ 0.296  0.296  0.296  0.296  0.296 -0.296 -0.296 -0.296 -0.296 -0.296] ({'r_i': None, 'eps': 1.0})
Step: 230000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9013878107070923], Avg: [ 0.292  0.292  0.292  0.292  0.292 -0.292 -0.292 -0.292 -0.292 -0.292] ({'r_i': None, 'eps': 1.0})
Step: 240000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.145643949508667], Avg: [ 0.298  0.298  0.298  0.298  0.298 -0.298 -0.298 -0.298 -0.298 -0.298] ({'r_i': None, 'eps': 1.0})
Step: 250000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.75], Avg: [ 0.288  0.288  0.288  0.288  0.288 -0.288 -0.288 -0.288 -0.288 -0.288] ({'r_i': None, 'eps': 1.0})
Step: 260000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.0606601238250732], Avg: [ 0.287  0.287  0.287  0.287  0.287 -0.287 -0.287 -0.287 -0.287 -0.287] ({'r_i': None, 'eps': 1.0})
Step: 270000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.9013878107070923], Avg: [ 0.288  0.288  0.288  0.288  0.288 -0.288 -0.288 -0.288 -0.288 -0.288] ({'r_i': None, 'eps': 1.0})
Step: 280000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.0897247791290283], Avg: [ 0.276  0.276  0.276  0.276  0.276 -0.276 -0.276 -0.276 -0.276 -0.276] ({'r_i': None, 'eps': 1.0})
Step: 290000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.145643949508667], Avg: [ 0.285  0.285  0.285  0.285  0.285 -0.285 -0.285 -0.285 -0.285 -0.285] ({'r_i': None, 'eps': 1.0})
Step: 300000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [0.9682458639144897], Avg: [ 0.29  0.29  0.29  0.29  0.29 -0.29 -0.29 -0.29 -0.29 -0.29] ({'r_i': None, 'eps': 1.0})
Step: 310000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.75], Avg: [ 0.279  0.279  0.279  0.279  0.279 -0.279 -0.279 -0.279 -0.279 -0.279] ({'r_i': None, 'eps': 1.0})
Step: 320000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.0], Avg: [ 0.286  0.286  0.286  0.286  0.286 -0.286 -0.286 -0.286 -0.286 -0.286] ({'r_i': None, 'eps': 1.0})
Step: 330000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1180340051651], Avg: [ 0.296  0.296  0.296  0.296  0.296 -0.296 -0.296 -0.296 -0.296 -0.296] ({'r_i': None, 'eps': 1.0})
Step: 340000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.9354143738746643], Avg: [ 0.287  0.287  0.287  0.287  0.287 -0.287 -0.287 -0.287 -0.287 -0.287] ({'r_i': None, 'eps': 1.0})
Step: 350000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.0606601238250732], Avg: [ 0.293  0.293  0.293  0.293  0.293 -0.293 -0.293 -0.293 -0.293 -0.293] ({'r_i': None, 'eps': 1.0})
Step: 360000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354143738746643], Avg: [ 0.299  0.299  0.299  0.299  0.299 -0.299 -0.299 -0.299 -0.299 -0.299] ({'r_i': None, 'eps': 1.0})
Step: 370000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.172603964805603], Avg: [ 0.298  0.298  0.298  0.298  0.298 -0.298 -0.298 -0.298 -0.298 -0.298] ({'r_i': None, 'eps': 1.0})
Step: 380000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [1.25], Avg: [ 0.285  0.285  0.285  0.285  0.285 -0.285 -0.285 -0.285 -0.285 -0.285] ({'r_i': None, 'eps': 1.0})
Step: 390000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.0897247791290283], Avg: [ 0.292  0.292  0.292  0.292  0.292 -0.292 -0.292 -0.292 -0.292 -0.292] ({'r_i': None, 'eps': 1.0})
Step: 400000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.2247449159622192], Avg: [ 0.285  0.285  0.285  0.285  0.285 -0.285 -0.285 -0.285 -0.285 -0.285] ({'r_i': None, 'eps': 1.0})
Step: 410000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.75], Avg: [ 0.283  0.283  0.283  0.283  0.283 -0.283 -0.283 -0.283 -0.283 -0.283] ({'r_i': None, 'eps': 1.0})
Step: 420000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.829156219959259], Avg: [ 0.275  0.275  0.275  0.275  0.275 -0.275 -0.275 -0.275 -0.275 -0.275] ({'r_i': None, 'eps': 1.0})
Step: 430000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.75], Avg: [ 0.278  0.278  0.278  0.278  0.278 -0.278 -0.278 -0.278 -0.278 -0.278] ({'r_i': None, 'eps': 1.0})
Step: 440000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.75], Avg: [ 0.279  0.279  0.279  0.279  0.279 -0.279 -0.279 -0.279 -0.279 -0.279] ({'r_i': None, 'eps': 1.0})
Step: 450000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.0], Avg: [ 0.273  0.273  0.273  0.273  0.273 -0.273 -0.273 -0.273 -0.273 -0.273] ({'r_i': None, 'eps': 1.0})
Step: 460000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.1180340051651], Avg: [ 0.278  0.278  0.278  0.278  0.278 -0.278 -0.278 -0.278 -0.278 -0.278] ({'r_i': None, 'eps': 1.0})
Step: 470000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.198957920074463], Avg: [ 0.271  0.271  0.271  0.271  0.271 -0.271 -0.271 -0.271 -0.271 -0.271] ({'r_i': None, 'eps': 1.0})
Step: 480000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.145643949508667], Avg: [ 0.274  0.274  0.274  0.274  0.274 -0.274 -0.274 -0.274 -0.274 -0.274] ({'r_i': None, 'eps': 1.0})
Step: 490000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [1.0], Avg: [ 0.276  0.276  0.276  0.276  0.276 -0.276 -0.276 -0.276 -0.276 -0.276] ({'r_i': None, 'eps': 1.0})
Step: 500000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [1.0], Avg: [ 0.278  0.278  0.278  0.278  0.278 -0.278 -0.278 -0.278 -0.278 -0.278] ({'r_i': None, 'eps': 1.0})
Step: 510000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.0], Avg: [ 0.273  0.273  0.273  0.273  0.273 -0.273 -0.273 -0.273 -0.273 -0.273] ({'r_i': None, 'eps': 1.0})
Step: 520000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.299038052558899], Avg: [ 0.269  0.269  0.269  0.269  0.269 -0.269 -0.269 -0.269 -0.269 -0.269] ({'r_i': None, 'eps': 1.0})
Step: 530000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [1.0307763814926147], Avg: [ 0.267  0.267  0.267  0.267  0.267 -0.267 -0.267 -0.267 -0.267 -0.267] ({'r_i': None, 'eps': 1.0})
Step: 540000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.0], Avg: [ 0.267  0.267  0.267  0.267  0.267 -0.267 -0.267 -0.267 -0.267 -0.267] ({'r_i': None, 'eps': 1.0})
Step: 550000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.0307763814926147], Avg: [ 0.261  0.261  0.261  0.261  0.261 -0.261 -0.261 -0.261 -0.261 -0.261] ({'r_i': None, 'eps': 1.0})
Step: 560000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [0.75], Avg: [ 0.264  0.264  0.264  0.264  0.264 -0.264 -0.264 -0.264 -0.264 -0.264] ({'r_i': None, 'eps': 1.0})
Step: 570000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.2747548818588257], Avg: [ 0.264  0.264  0.264  0.264  0.264 -0.264 -0.264 -0.264 -0.264 -0.264] ({'r_i': None, 'eps': 1.0})
Step: 580000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.0897247791290283], Avg: [ 0.261  0.261  0.261  0.261  0.261 -0.261 -0.261 -0.261 -0.261 -0.261] ({'r_i': None, 'eps': 1.0})
Step: 590000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.9682458639144897], Avg: [ 0.261  0.261  0.261  0.261  0.261 -0.261 -0.261 -0.261 -0.261 -0.261] ({'r_i': None, 'eps': 1.0})
Step: 600000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.3693064451217651], Avg: [ 0.261  0.261  0.261  0.261  0.261 -0.261 -0.261 -0.261 -0.261 -0.261] ({'r_i': None, 'eps': 1.0})
Step: 610000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [0.9682458639144897], Avg: [ 0.266  0.266  0.266  0.266  0.266 -0.266 -0.266 -0.266 -0.266 -0.266] ({'r_i': None, 'eps': 1.0})
Step: 620000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.541103482246399], Avg: [ 0.27  0.27  0.27  0.27  0.27 -0.27 -0.27 -0.27 -0.27 -0.27] ({'r_i': None, 'eps': 1.0})
Step: 630000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.7905694246292114], Avg: [ 0.266  0.266  0.266  0.266  0.266 -0.266 -0.266 -0.266 -0.266 -0.266] ({'r_i': None, 'eps': 1.0})
Step: 640000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.145643949508667], Avg: [ 0.262  0.262  0.262  0.262  0.262 -0.262 -0.262 -0.262 -0.262 -0.262] ({'r_i': None, 'eps': 1.0})
Step: 650000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.9682458639144897], Avg: [ 0.263  0.263  0.263  0.263  0.263 -0.263 -0.263 -0.263 -0.263 -0.263] ({'r_i': None, 'eps': 1.0})
Step: 660000, Reward: [-0.438 -0.438 -0.438 -0.438 -0.438  0.438  0.438  0.438  0.438  0.438] [1.145643949508667], Avg: [ 0.253  0.253  0.253  0.253  0.253 -0.253 -0.253 -0.253 -0.253 -0.253] ({'r_i': None, 'eps': 1.0})
Step: 670000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [1.0], Avg: [ 0.247  0.247  0.247  0.247  0.247 -0.247 -0.247 -0.247 -0.247 -0.247] ({'r_i': None, 'eps': 1.0})
Step: 680000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.9013878107070923], Avg: [ 0.241  0.241  0.241  0.241  0.241 -0.241 -0.241 -0.241 -0.241 -0.241] ({'r_i': None, 'eps': 1.0})
Step: 690000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [1.0], Avg: [ 0.236  0.236  0.236  0.236  0.236 -0.236 -0.236 -0.236 -0.236 -0.236] ({'r_i': None, 'eps': 1.0})
Step: 700000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.9682458639144897], Avg: [ 0.233  0.233  0.233  0.233  0.233 -0.233 -0.233 -0.233 -0.233 -0.233] ({'r_i': None, 'eps': 1.0})
Step: 710000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.6123724579811096], Avg: [ 0.23  0.23  0.23  0.23  0.23 -0.23 -0.23 -0.23 -0.23 -0.23] ({'r_i': None, 'eps': 1.0})
Step: 720000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.9682458639144897], Avg: [ 0.228  0.228  0.228  0.228  0.228 -0.228 -0.228 -0.228 -0.228 -0.228] ({'r_i': None, 'eps': 1.0})
Step: 730000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.0307763814926147], Avg: [ 0.224  0.224  0.224  0.224  0.224 -0.224 -0.224 -0.224 -0.224 -0.224] ({'r_i': None, 'eps': 1.0})
Step: 740000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [1.145643949508667], Avg: [ 0.218  0.218  0.218  0.218  0.218 -0.218 -0.218 -0.218 -0.218 -0.218] ({'r_i': None, 'eps': 1.0})
Step: 750000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.7071067690849304], Avg: [ 0.217  0.217  0.217  0.217  0.217 -0.217 -0.217 -0.217 -0.217 -0.217] ({'r_i': None, 'eps': 1.0})
Step: 760000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.829156219959259], Avg: [ 0.217  0.217  0.217  0.217  0.217 -0.217 -0.217 -0.217 -0.217 -0.217] ({'r_i': None, 'eps': 1.0})
Step: 770000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.0307763814926147], Avg: [ 0.215  0.215  0.215  0.215  0.215 -0.215 -0.215 -0.215 -0.215 -0.215] ({'r_i': None, 'eps': 1.0})
Step: 780000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [0.7071067690849304], Avg: [ 0.21  0.21  0.21  0.21  0.21 -0.21 -0.21 -0.21 -0.21 -0.21] ({'r_i': None, 'eps': 1.0})
Step: 790000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [0.9682458639144897], Avg: [ 0.215  0.215  0.215  0.215  0.215 -0.215 -0.215 -0.215 -0.215 -0.215] ({'r_i': None, 'eps': 1.0})
Step: 800000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.3228756189346313], Avg: [ 0.214  0.214  0.214  0.214  0.214 -0.214 -0.214 -0.214 -0.214 -0.214] ({'r_i': None, 'eps': 1.0})
Step: 810000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.0], Avg: [ 0.211  0.211  0.211  0.211  0.211 -0.211 -0.211 -0.211 -0.211 -0.211] ({'r_i': None, 'eps': 1.0})
Step: 820000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1180340051651], Avg: [ 0.216  0.216  0.216  0.216  0.216 -0.216 -0.216 -0.216 -0.216 -0.216] ({'r_i': None, 'eps': 1.0})
Step: 830000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.1180340051651], Avg: [ 0.215  0.215  0.215  0.215  0.215 -0.215 -0.215 -0.215 -0.215 -0.215] ({'r_i': None, 'eps': 1.0})
Step: 840000, Reward: [-0.438 -0.438 -0.438 -0.438 -0.438  0.438  0.438  0.438  0.438  0.438] [1.145643949508667], Avg: [ 0.207  0.207  0.207  0.207  0.207 -0.207 -0.207 -0.207 -0.207 -0.207] ({'r_i': None, 'eps': 1.0})
Step: 850000, Reward: [-0.5 -0.5 -0.5 -0.5 -0.5  0.5  0.5  0.5  0.5  0.5] [1.1180340051651], Avg: [ 0.199  0.199  0.199  0.199  0.199 -0.199 -0.199 -0.199 -0.199 -0.199] ({'r_i': None, 'eps': 1.0})
Step: 860000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.346291184425354], Avg: [ 0.196  0.196  0.196  0.196  0.196 -0.196 -0.196 -0.196 -0.196 -0.196] ({'r_i': None, 'eps': 1.0})
Step: 870000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [1.172603964805603], Avg: [ 0.192  0.192  0.192  0.192  0.192 -0.192 -0.192 -0.192 -0.192 -0.192] ({'r_i': None, 'eps': 1.0})
Step: 880000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [0.7071067690849304], Avg: [ 0.189  0.189  0.189  0.189  0.189 -0.189 -0.189 -0.189 -0.189 -0.189] ({'r_i': None, 'eps': 1.0})
Step: 890000, Reward: [-0.25 -0.25 -0.25 -0.25 -0.25  0.25  0.25  0.25  0.25  0.25] [0.8660253882408142], Avg: [ 0.184  0.184  0.184  0.184  0.184 -0.184 -0.184 -0.184 -0.184 -0.184] ({'r_i': None, 'eps': 1.0})
Step: 900000, Reward: [-0.438 -0.438 -0.438 -0.438 -0.438  0.438  0.438  0.438  0.438  0.438] [0.9682458639144897], Avg: [ 0.177  0.177  0.177  0.177  0.177 -0.177 -0.177 -0.177 -0.177 -0.177] ({'r_i': None, 'eps': 1.0})
Step: 910000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.198957920074463], Avg: [ 0.18  0.18  0.18  0.18  0.18 -0.18 -0.18 -0.18 -0.18 -0.18] ({'r_i': None, 'eps': 1.0})
Step: 920000, Reward: [-0.312 -0.312 -0.312 -0.312 -0.312  0.312  0.312  0.312  0.312  0.312] [1.0897247791290283], Avg: [ 0.175  0.175  0.175  0.175  0.175 -0.175 -0.175 -0.175 -0.175 -0.175] ({'r_i': None, 'eps': 1.0})
Step: 930000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.172603964805603], Avg: [ 0.173  0.173  0.173  0.173  0.173 -0.173 -0.173 -0.173 -0.173 -0.173] ({'r_i': None, 'eps': 1.0})
Step: 940000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.25], Avg: [ 0.177  0.177  0.177  0.177  0.177 -0.177 -0.177 -0.177 -0.177 -0.177] ({'r_i': None, 'eps': 1.0})
Step: 950000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [1.145643949508667], Avg: [ 0.174  0.174  0.174  0.174  0.174 -0.174 -0.174 -0.174 -0.174 -0.174] ({'r_i': None, 'eps': 1.0})
Step: 960000, Reward: [-0.312 -0.312 -0.312 -0.312 -0.312  0.312  0.312  0.312  0.312  0.312] [1.0307763814926147], Avg: [ 0.169  0.169  0.169  0.169  0.169 -0.169 -0.169 -0.169 -0.169 -0.169] ({'r_i': None, 'eps': 1.0})
Step: 970000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.198957920074463], Avg: [ 0.168  0.168  0.168  0.168  0.168 -0.168 -0.168 -0.168 -0.168 -0.168] ({'r_i': None, 'eps': 1.0})
Step: 980000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.5811388492584229], Avg: [ 0.169  0.169  0.169  0.169  0.169 -0.169 -0.169 -0.169 -0.169 -0.169] ({'r_i': None, 'eps': 1.0})
Step: 990000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.9013878107070923], Avg: [ 0.166  0.166  0.166  0.166  0.166 -0.166 -0.166 -0.166 -0.166 -0.166] ({'r_i': None, 'eps': 1.0})
Step: 1000000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.75], Avg: [ 0.167  0.167  0.167  0.167  0.167 -0.167 -0.167 -0.167 -0.167 -0.167] ({'r_i': None, 'eps': 1.0})
Step: 1010000, Reward: [-1. -1. -1. -1. -1.  1.  1.  1.  1.  1.] [1.4142135381698608], Avg: [ 0.156  0.156  0.156  0.156  0.156 -0.156 -0.156 -0.156 -0.156 -0.156] ({'r_i': None, 'eps': 1.0})
Step: 1020000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.9682458639144897], Avg: [ 0.154  0.154  0.154  0.154  0.154 -0.154 -0.154 -0.154 -0.154 -0.154] ({'r_i': None, 'eps': 1.0})
Step: 1030000, Reward: [-0.25 -0.25 -0.25 -0.25 -0.25  0.25  0.25  0.25  0.25  0.25] [1.172603964805603], Avg: [ 0.15  0.15  0.15  0.15  0.15 -0.15 -0.15 -0.15 -0.15 -0.15] ({'r_i': None, 'eps': 1.0})
Step: 1040000, Reward: [-0.375 -0.375 -0.375 -0.375 -0.375  0.375  0.375  0.375  0.375  0.375] [1.3693064451217651], Avg: [ 0.145  0.145  0.145  0.145  0.145 -0.145 -0.145 -0.145 -0.145 -0.145] ({'r_i': None, 'eps': 1.0})
Step: 1050000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.9354143738746643], Avg: [ 0.144  0.144  0.144  0.144  0.144 -0.144 -0.144 -0.144 -0.144 -0.144] ({'r_i': None, 'eps': 1.0})
Step: 1060000, Reward: [-0.25 -0.25 -0.25 -0.25 -0.25  0.25  0.25  0.25  0.25  0.25] [0.9354143738746643], Avg: [ 0.141  0.141  0.141  0.141  0.141 -0.141 -0.141 -0.141 -0.141 -0.141] ({'r_i': None, 'eps': 1.0})
Step: 1070000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.9682458639144897], Avg: [ 0.139  0.139  0.139  0.139  0.139 -0.139 -0.139 -0.139 -0.139 -0.139] ({'r_i': None, 'eps': 1.0})
Step: 1080000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9682458639144897], Avg: [ 0.139  0.139  0.139  0.139  0.139 -0.139 -0.139 -0.139 -0.139 -0.139] ({'r_i': None, 'eps': 1.0})
Step: 1090000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [1.0897247791290283], Avg: [ 0.136  0.136  0.136  0.136  0.136 -0.136 -0.136 -0.136 -0.136 -0.136] ({'r_i': None, 'eps': 1.0})
Step: 1100000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [1.0897247791290283], Avg: [ 0.138  0.138  0.138  0.138  0.138 -0.138 -0.138 -0.138 -0.138 -0.138] ({'r_i': None, 'eps': 1.0})
Step: 1110000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.7905694246292114], Avg: [ 0.137  0.137  0.137  0.137  0.137 -0.137 -0.137 -0.137 -0.137 -0.137] ({'r_i': None, 'eps': 1.0})
Step: 1120000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [1.2747548818588257], Avg: [ 0.139  0.139  0.139  0.139  0.139 -0.139 -0.139 -0.139 -0.139 -0.139] ({'r_i': None, 'eps': 1.0})
Step: 1130000, Reward: [-0.312 -0.312 -0.312 -0.312 -0.312  0.312  0.312  0.312  0.312  0.312] [0.829156219959259], Avg: [ 0.135  0.135  0.135  0.135  0.135 -0.135 -0.135 -0.135 -0.135 -0.135] ({'r_i': None, 'eps': 1.0})
Step: 1140000, Reward: [-0.625 -0.625 -0.625 -0.625 -0.625  0.625  0.625  0.625  0.625  0.625] [1.1180340051651], Avg: [ 0.128  0.128  0.128  0.128  0.128 -0.128 -0.128 -0.128 -0.128 -0.128] ({'r_i': None, 'eps': 1.0})
Step: 1150000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.346291184425354], Avg: [ 0.128  0.128  0.128  0.128  0.128 -0.128 -0.128 -0.128 -0.128 -0.128] ({'r_i': None, 'eps': 1.0})
Step: 1160000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.829156219959259], Avg: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] ({'r_i': None, 'eps': 1.0})
Step: 1170000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.1180340051651], Avg: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] ({'r_i': None, 'eps': 1.0})
Step: 1180000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [1.172603964805603], Avg: [ 0.124  0.124  0.124  0.124  0.124 -0.124 -0.124 -0.124 -0.124 -0.124] ({'r_i': None, 'eps': 1.0})
Step: 1190000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.0], Avg: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] ({'r_i': None, 'eps': 1.0})
Step: 1200000, Reward: [-0.375 -0.375 -0.375 -0.375 -0.375  0.375  0.375  0.375  0.375  0.375] [1.0606601238250732], Avg: [ 0.121  0.121  0.121  0.121  0.121 -0.121 -0.121 -0.121 -0.121 -0.121] ({'r_i': None, 'eps': 1.0})
Step: 1210000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.5811388492584229], Avg: [ 0.122  0.122  0.122  0.122  0.122 -0.122 -0.122 -0.122 -0.122 -0.122] ({'r_i': None, 'eps': 1.0})
Step: 1220000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [0.9354143738746643], Avg: [ 0.12  0.12  0.12  0.12  0.12 -0.12 -0.12 -0.12 -0.12 -0.12] ({'r_i': None, 'eps': 1.0})
Step: 1230000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [1.1180340051651], Avg: [ 0.118  0.118  0.118  0.118  0.118 -0.118 -0.118 -0.118 -0.118 -0.118] ({'r_i': None, 'eps': 1.0})

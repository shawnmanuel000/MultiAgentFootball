Model: <class 'multiagent.mappo.MAPPOAgent'>, Dir: 5_vs_5
num_envs: 16, state_size: [(1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115), (1, 115)], action_size: [[1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19], [1, 19]], action_space: [MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19]), MultiDiscrete([19])], envs: <class 'utils.envs.EnvManager'>,

import torch
import random
import numpy as np
from models.ppo import PPONetwork
from utils.wrappers import ParallelAgent
from utils.network import PTNetwork, PTACNetwork, PTACAgent, Conv, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, EPS_MIN, MultiheadAttention, one_hot_from_indices, gsoftmax

ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities
BATCH_SIZE = 32
PPO_EPOCHS = 5
TIME_BATCH = 50
MAX_BUFFER_SIZE = 160

class MAPPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.norm1 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.norm2 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.layer1 = torch.nn.Linear(state_size[-1], ACTOR_HIDDEN)
		self.layer2 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.recurrent = torch.nn.GRUCell(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.attention = MultiheadAttention(ACTOR_HIDDEN, 1, 1)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.init_hidden()

	def forward(self, state, action=None, sample=True):
		state = self.norm1(self.layer1(state)).relu()
		state = self.norm2(self.layer2(state)).relu()
		out_dims = state.shape[:-1]
		state = state.reshape(-1, state.shape[-1])
		if self.hidden.size(0) != state.size(0): self.init_hidden(state.size(0), state.device)
		self.hidden = self.recurrent(state, self.hidden)
		state = self.attention(self.hidden)
		action_mu = self.action_mu(state).tanh()
		action_mu = action_mu.reshape(*out_dims, action_mu.shape[-1])
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

	def init_hidden(self, batch_size=1, device=torch.device("cpu")):
		self.hidden = torch.zeros([batch_size, ACTOR_HIDDEN]).to(device)

class MAPPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], CRITIC_HIDDEN)
		self.layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class MAPPONetwork(PTNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(gpu=gpu, name="mappo")
		self.state_size = state_size
		self.action_size = action_size
		self.actor = MAPPOActor(state_size[0], action_size[0])
		self.critic = lambda s,a: MAPPOCritic([np.sum([np.prod(s) for s in self.state_size])], [np.sum([np.prod(a) for a in self.action_size])])
		self.models = [PPONetwork(s_size, a_size, lambda s,a: self.actor, self.critic, lr=lr/len(state_size), gpu=gpu, load=load) for s_size,a_size in zip(self.state_size, self.action_size)]
		[[m.train() for m in [model.actor_local, model.critic_local]] for model in self.models]
		if load: self.load_model(load)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action_in = [None] * len(state) if action_in is None else action_in
			action_or_entropy, log_prob = map(list, zip(*[model.get_action_probs(s, a, grad=grad, numpy=numpy, sample=sample) for s,a,model in zip(state, action_in, self.models)]))
			return action_or_entropy, log_prob

	def get_value(self, state, grad=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_value = [model.get_value(state, grad) for model in self.models]
			return q_value

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
		for model, state, action, old_log_prob, target, advantage in zip(self.models, states, actions, old_log_probs, targets, advantages):		
			[m.train() for m in [model.actor_local, model.critic_local]]
			values = model.get_value(states_joint, grad=True)
			critic_error = values - target.detach()
			critic_loss = critic_error.pow(2)
			model.step(model.critic_optimizer, critic_loss.mean(), model.critic_local.parameters())

			# entropy, new_log_prob = model.get_action_probs(state, action, grad=True, numpy=False)
			model.actor_local.init_hidden(state.size(0), state.device)
			entropy, new_log_prob = zip(*[model.get_action_probs(state[:,t], action[:,t], grad=True, numpy=False) for t in range(state.size(1))])
			new_log_prob = torch.stack(new_log_prob, dim=1)
			entropy = torch.stack(entropy).mean()
			ratio = (new_log_prob - old_log_prob).exp()
			ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
			advantage = advantage.view(*advantage.shape, *[1]*(len(ratio.shape)-len(advantage.shape)))
			actor_loss = -(torch.min(ratio*advantage, ratio_clipped*advantage) + e_weight*entropy) * scale
			model.step(model.actor_optimizer, actor_loss.mean(), model.actor_local.parameters())
			[m.eval() for m in [model.actor_local, model.critic_local]]

	def save_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.save_model(model, self.name, dirname, f"{name}_{i}") for i,model in enumerate(self.models)]
		
	def load_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.load_model(model, self.name, dirname, f"{name}_{i}") for i,model in enumerate(self.models)]

class MAPPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, MAPPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, numpy=True):
		action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return action

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, self.log_prob, reward, done))
		if np.any(done[0]):
			states, actions, log_probs, rewards, dones = map(lambda x: self.to_tensor(x), zip(*self.buffer))
			self.buffer.clear()
			states = [torch.cat([s, ns.unsqueeze(0)], dim=0) for s,ns in zip(states, self.to_tensor(next_state))]
			states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
			values = self.network.get_value(states_joint)
			targets, advantages = zip(*[self.compute_gae(value[-1], reward.unsqueeze(-1), done.unsqueeze(-1), value[:-1]) for value,reward,done in zip(values, rewards, dones)])
			time_split = lambda x: list(zip(*[t.view(-1,TIME_BATCH,*t.shape[1:]).transpose(0,1).reshape(TIME_BATCH,-1,*t.shape[2:]).transpose(0,1) for t in x]))
			states, actions, log_probs, targets, advantages = [time_split(x) for x in [[s[:-1] for s in states], actions, log_probs, targets, advantages]]
			self.replay_buffer.extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
		if len(self.replay_buffer) >= MAX_BUFFER_SIZE:
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				states, actions, log_probs, targets, advantages = self.replay_buffer.next_batch(BATCH_SIZE, lambda x: [torch.stack(l) for l in list(zip(*x))])
				self.network.optimize(states, actions, log_probs, targets, advantages)
			self.replay_buffer.clear()

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.001   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 256				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 512			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.000               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import particle_envs.make_env as pgym
import football.gfootball.env as ggym
from models.ppo import PPOAgent
from models.sac import SACAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from multiagent.coma import COMAAgent
from multiagent.maddpg import MADDPGAgent
from multiagent.mappo import MAPPOAgent
from utils.wrappers import ParallelAgent, DoubleAgent, SelfPlayAgent, ParticleTeamEnv, FootballTeamEnv, TrainEnv
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, MPI_SIZE, MPI_RANK
from utils.misc import Logger, rollout
np.set_printoptions(precision=3)

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "academy_empty_goal", "academy_run_to_score", "academy_run_to_score_with_keeper", "academy_single_goal_versus_lazy", "academy_3_vs_1_with_keeper", "1_vs_1_easy", "3_vs_3_custom", "5_vs_5", "11_vs_11_stochastic", "test_example_multiagent"]
ptc_envs = ["simple_adversary", "simple_speaker_listener", "simple_tag", "simple_spread", "simple_push"]
env_name = gym_envs[0]
env_name = gfb_envs[-3]
# env_name = ptc_envs[-2]

def make_env(env_name=env_name, log=False, render=False):
	if env_name in gym_envs: return TrainEnv(gym.make(env_name))
	if env_name in ptc_envs: return ParticleTeamEnv(pgym.make_env(env_name))
	ballr = lambda x,y: (np.maximum if x>0 else np.minimum)(x - np.abs(y)*np.sign(x), 0.5*x)
	reward_fn = lambda obs,reward: [(ballr(o[0,88], o[0,89]) + o[0,95]-o[0,96] + 2*r)/4 for o,r in zip(obs,reward)]
	return FootballTeamEnv(ggym, env_name, reward_fn)

def run(model, steps=10000, ports=16, env_name=env_name, trial_at=10000, save_at=10, checkpoint=True, save_best=False, log=True, render=False, load=False):
	envs = (EnvManager if type(ports) == list or MPI_SIZE > 1 else EnsembleEnv)(lambda: make_env(env_name), ports)
	agent = (SelfPlayAgent if envs.env.self_play() else ParallelAgent)(envs.state_size, envs.action_size, model, envs.num_envs, load=f"{env_name}" if load else "", gpu=True, agent2=RandomAgent, save_dir=env_name, icm=False) 
	logger = Logger(model, env_name, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs))
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s>0 and s%trial_at == 0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.mean(rollouts, axis=-1))
			if checkpoint and len(total_rewards) % save_at==0: agent.save_model(env_name, "checkpoint")
			if save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(env_name)
			if log: logger.log(f"Step: {s}, Reward: {total_rewards[-1]} [{np.std(rollouts):.4f}], Avg: {np.mean(total_rewards, axis=0)} ({agent.agent.eps:.3f})")

def trial(model, env_name, render):
	envs = EnsembleEnv(lambda: make_env(env_name, log=True, render=render), 0)
	agent = (SelfPlayAgent if env_name=="3_vs_3_custom" else ParallelAgent)(envs.state_size, envs.action_size, model, gpu=False, load=f"{env_name}", agent2=RandomAgent, save_dir=env_name)
	print(f"Reward: {np.mean([rollout(envs.env, agent, eps=0.0, render=True) for _ in range(5)], axis=0)}")
	envs.close()

def parse_args():
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
	parser.add_argument("--model", type=str, default="mappo", help="Which reinforcement learning algorithm to use")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	parser.add_argument("--render", action="store_true", help="Whether to render during training")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run")
	parser.add_argument("--env", type=str, default="", help="Name of env to use")
	return parser.parse_args()

if __name__ == "__main__":
	args = parse_args()
	env_name = env_name if args.env not in [*gym_envs, *gfb_envs, *ptc_envs] else args.env
	models = {"ddpg":DDPGAgent, "ppo":PPOAgent, "sac":SACAgent, "ddqn":DDQNAgent, "maddpg":MADDPGAgent, "mappo":MAPPOAgent, "coma":COMAAgent, "rand":RandomAgent}
	model = models[args.model] if args.model in models else RandomAgent
	if args.trial:
		trial(model=model, env_name=env_name, render=args.render)
	elif args.selfport is not None or MPI_RANK>0 :
		EnvWorker(self_port=args.selfport, make_env=make_env).start()
	else:
		run(model=model, steps=args.steps, ports=args.workerports[0] if len(args.workerports)==1 else args.workerports, env_name=env_name, render=args.render)


Step: 10000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.1726], Avg: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] (1.000)
Step: 20000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.0607], Avg: [ 0.688  0.688  0.688  0.688  0.688 -0.688 -0.688 -0.688 -0.688 -0.688] (1.000)
Step: 30000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] (1.000)
Step: 40000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.1180], Avg: [ 0.656  0.656  0.656  0.656  0.656 -0.656 -0.656 -0.656 -0.656 -0.656] (1.000)
Step: 50000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.3919], Avg: [ 0.688  0.688  0.688  0.688  0.688 -0.688 -0.688 -0.688 -0.688 -0.688] (1.000)
Step: 60000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.7906], Avg: [ 0.635  0.635  0.635  0.635  0.635 -0.635 -0.635 -0.635 -0.635 -0.635] (1.000)
Step: 70000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.0308], Avg: [ 0.607  0.607  0.607  0.607  0.607 -0.607 -0.607 -0.607 -0.607 -0.607] (1.000)
Step: 80000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.0000], Avg: [ 0.609  0.609  0.609  0.609  0.609 -0.609 -0.609 -0.609 -0.609 -0.609] (1.000)
Step: 90000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1180], Avg: [ 0.611  0.611  0.611  0.611  0.611 -0.611 -0.611 -0.611 -0.611 -0.611] (1.000)
Step: 100000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.7906], Avg: [ 0.6  0.6  0.6  0.6  0.6 -0.6 -0.6 -0.6 -0.6 -0.6] (1.000)
Step: 110000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.0000], Avg: [ 0.614  0.614  0.614  0.614  0.614 -0.614 -0.614 -0.614 -0.614 -0.614] (1.000)
Step: 120000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [0.9354], Avg: [ 0.615  0.615  0.615  0.615  0.615 -0.615 -0.615 -0.615 -0.615 -0.615] (1.000)
Step: 130000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.9682], Avg: [ 0.572  0.572  0.572  0.572  0.572 -0.572 -0.572 -0.572 -0.572 -0.572] (1.000)
Step: 140000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1726], Avg: [ 0.576  0.576  0.576  0.576  0.576 -0.576 -0.576 -0.576 -0.576 -0.576] (1.000)
Step: 150000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.8660], Avg: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] (1.000)
Step: 160000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.8660], Avg: [ 0.559  0.559  0.559  0.559  0.559 -0.559 -0.559 -0.559 -0.559 -0.559] (1.000)
Step: 170000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.2748], Avg: [ 0.585  0.585  0.585  0.585  0.585 -0.585 -0.585 -0.585 -0.585 -0.585] (1.000)
Step: 180000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [1.0308], Avg: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] (1.000)
Step: 190000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.1456], Avg: [ 0.576  0.576  0.576  0.576  0.576 -0.576 -0.576 -0.576 -0.576 -0.576] (1.000)
Step: 200000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.9014], Avg: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] (1.000)
Step: 210000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.1456], Avg: [ 0.557  0.557  0.557  0.557  0.557 -0.557 -0.557 -0.557 -0.557 -0.557] (1.000)
Step: 220000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.4142], Avg: [ 0.577  0.577  0.577  0.577  0.577 -0.577 -0.577 -0.577 -0.577 -0.577] (1.000)
Step: 230000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.573  0.573  0.573  0.573  0.573 -0.573 -0.573 -0.573 -0.573 -0.573] (1.000)
Step: 240000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [1.0308], Avg: [ 0.552  0.552  0.552  0.552  0.552 -0.552 -0.552 -0.552 -0.552 -0.552] (1.000)
Step: 250000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.3919], Avg: [ 0.567  0.567  0.567  0.567  0.567 -0.567 -0.567 -0.567 -0.567 -0.567] (1.000)
Step: 260000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.6124], Avg: [ 0.56  0.56  0.56  0.56  0.56 -0.56 -0.56 -0.56 -0.56 -0.56] (1.000)
Step: 270000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.3463], Avg: [ 0.569  0.569  0.569  0.569  0.569 -0.569 -0.569 -0.569 -0.569 -0.569] (1.000)
Step: 280000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.0607], Avg: [ 0.571  0.571  0.571  0.571  0.571 -0.571 -0.571 -0.571 -0.571 -0.571] (1.000)
Step: 290000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.2748], Avg: [ 0.586  0.586  0.586  0.586  0.586 -0.586 -0.586 -0.586 -0.586 -0.586] (1.000)
Step: 300000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.3919], Avg: [ 0.598  0.598  0.598  0.598  0.598 -0.598 -0.598 -0.598 -0.598 -0.598] (1.000)
Step: 310000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.595  0.595  0.595  0.595  0.595 -0.595 -0.595 -0.595 -0.595 -0.595] (1.000)
Step: 320000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9014], Avg: [ 0.582  0.582  0.582  0.582  0.582 -0.582 -0.582 -0.582 -0.582 -0.582] (1.000)
Step: 330000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.1456], Avg: [ 0.589  0.589  0.589  0.589  0.589 -0.589 -0.589 -0.589 -0.589 -0.589] (1.000)
Step: 340000, Reward: [ 0.875  0.875  0.875  0.875  0.875 -0.875 -0.875 -0.875 -0.875 -0.875] [1.3229], Avg: [ 0.597  0.597  0.597  0.597  0.597 -0.597 -0.597 -0.597 -0.597 -0.597] (1.000)
Step: 350000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.2247], Avg: [ 0.602  0.602  0.602  0.602  0.602 -0.602 -0.602 -0.602 -0.602 -0.602] (1.000)
Step: 360000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [1.0607], Avg: [ 0.589  0.589  0.589  0.589  0.589 -0.589 -0.589 -0.589 -0.589 -0.589] (1.000)
Step: 370000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9014], Avg: [ 0.578  0.578  0.578  0.578  0.578 -0.578 -0.578 -0.578 -0.578 -0.578] (1.000)
Step: 380000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.0308], Avg: [ 0.574  0.574  0.574  0.574  0.574 -0.574 -0.574 -0.574 -0.574 -0.574] (1.000)
Step: 390000, Reward: [ 1.188  1.188  1.188  1.188  1.188 -1.188 -1.188 -1.188 -1.188 -1.188] [1.4361], Avg: [ 0.59  0.59  0.59  0.59  0.59 -0.59 -0.59 -0.59 -0.59 -0.59] (1.000)
Step: 400000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.7500], Avg: [ 0.598  0.598  0.598  0.598  0.598 -0.598 -0.598 -0.598 -0.598 -0.598] (1.000)
Step: 410000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.3229], Avg: [ 0.599  0.599  0.599  0.599  0.599 -0.599 -0.599 -0.599 -0.599 -0.599] (1.000)
Step: 420000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.2247], Avg: [ 0.597  0.597  0.597  0.597  0.597 -0.597 -0.597 -0.597 -0.597 -0.597] (1.000)
Step: 430000, Reward: [ 1.125  1.125  1.125  1.125  1.125 -1.125 -1.125 -1.125 -1.125 -1.125] [1.5411], Avg: [ 0.609  0.609  0.609  0.609  0.609 -0.609 -0.609 -0.609 -0.609 -0.609] (1.000)
Step: 440000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.4361], Avg: [ 0.616  0.616  0.616  0.616  0.616 -0.616 -0.616 -0.616 -0.616 -0.616] (1.000)
Step: 450000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.1726], Avg: [ 0.619  0.619  0.619  0.619  0.619 -0.619 -0.619 -0.619 -0.619 -0.619] (1.000)
Step: 460000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.0607], Avg: [ 0.617  0.617  0.617  0.617  0.617 -0.617 -0.617 -0.617 -0.617 -0.617] (1.000)
Step: 470000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.614  0.614  0.614  0.614  0.614 -0.614 -0.614 -0.614 -0.614 -0.614] (1.000)
Step: 480000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.3919], Avg: [ 0.618  0.618  0.618  0.618  0.618 -0.618 -0.618 -0.618 -0.618 -0.618] (1.000)
Step: 490000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.3693], Avg: [ 0.621  0.621  0.621  0.621  0.621 -0.621 -0.621 -0.621 -0.621 -0.621] (1.000)
Step: 500000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.7906], Avg: [ 0.619  0.619  0.619  0.619  0.619 -0.619 -0.619 -0.619 -0.619 -0.619] (1.000)
Step: 510000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [0.9682], Avg: [ 0.618  0.618  0.618  0.618  0.618 -0.618 -0.618 -0.618 -0.618 -0.618] (1.000)
Step: 520000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.4361], Avg: [ 0.624  0.624  0.624  0.624  0.624 -0.624 -0.624 -0.624 -0.624 -0.624] (1.000)
Step: 530000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.5590], Avg: [ 0.618  0.618  0.618  0.618  0.618 -0.618 -0.618 -0.618 -0.618 -0.618] (1.000)
Step: 540000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [1.0607], Avg: [ 0.613  0.613  0.613  0.613  0.613 -0.613 -0.613 -0.613 -0.613 -0.613] (1.000)
Step: 550000, Reward: [ 1.188  1.188  1.188  1.188  1.188 -1.188 -1.188 -1.188 -1.188 -1.188] [1.5612], Avg: [ 0.624  0.624  0.624  0.624  0.624 -0.624 -0.624 -0.624 -0.624 -0.624] (1.000)
Step: 560000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1180], Avg: [ 0.624  0.624  0.624  0.624  0.624 -0.624 -0.624 -0.624 -0.624 -0.624] (1.000)
Step: 570000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [0.9682], Avg: [ 0.623  0.623  0.623  0.623  0.623 -0.623 -0.623 -0.623 -0.623 -0.623] (1.000)
Step: 580000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.2247], Avg: [ 0.623  0.623  0.623  0.623  0.623 -0.623 -0.623 -0.623 -0.623 -0.623] (1.000)
Step: 590000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.5590], Avg: [ 0.611  0.611  0.611  0.611  0.611 -0.611 -0.611 -0.611 -0.611 -0.611] (1.000)
Step: 600000, Reward: [ 1.062  1.062  1.062  1.062  1.062 -1.062 -1.062 -1.062 -1.062 -1.062] [1.5612], Avg: [ 0.619  0.619  0.619  0.619  0.619 -0.619 -0.619 -0.619 -0.619 -0.619] (1.000)
Step: 610000, Reward: [ 1.875  1.875  1.875  1.875  1.875 -1.875 -1.875 -1.875 -1.875 -1.875] [2.5000], Avg: [ 0.639  0.639  0.639  0.639  0.639 -0.639 -0.639 -0.639 -0.639 -0.639] (1.000)
Step: 620000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.2748], Avg: [ 0.641  0.641  0.641  0.641  0.641 -0.641 -0.641 -0.641 -0.641 -0.641] (1.000)
Step: 630000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.2247], Avg: [ 0.643  0.643  0.643  0.643  0.643 -0.643 -0.643 -0.643 -0.643 -0.643] (1.000)
Step: 640000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.8660], Avg: [ 0.639  0.639  0.639  0.639  0.639 -0.639 -0.639 -0.639 -0.639 -0.639] (1.000)
Step: 650000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.4790], Avg: [ 0.643  0.643  0.643  0.643  0.643 -0.643 -0.643 -0.643 -0.643 -0.643] (1.000)
Step: 660000, Reward: [ 0.875  0.875  0.875  0.875  0.875 -0.875 -0.875 -0.875 -0.875 -0.875] [1.2748], Avg: [ 0.647  0.647  0.647  0.647  0.647 -0.647 -0.647 -0.647 -0.647 -0.647] (1.000)
Step: 670000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.5000], Avg: [ 0.652  0.652  0.652  0.652  0.652 -0.652 -0.652 -0.652 -0.652 -0.652] (1.000)
Step: 680000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.65  0.65  0.65  0.65  0.65 -0.65 -0.65 -0.65 -0.65 -0.65] (1.000)
Step: 690000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.7139], Avg: [ 0.654  0.654  0.654  0.654  0.654 -0.654 -0.654 -0.654 -0.654 -0.654] (1.000)
Step: 700000, Reward: [ 0.875  0.875  0.875  0.875  0.875 -0.875 -0.875 -0.875 -0.875 -0.875] [1.3693], Avg: [ 0.657  0.657  0.657  0.657  0.657 -0.657 -0.657 -0.657 -0.657 -0.657] (1.000)
Step: 710000, Reward: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] [1.0897], Avg: [ 0.656  0.656  0.656  0.656  0.656 -0.656 -0.656 -0.656 -0.656 -0.656] (1.000)
Step: 720000, Reward: [ 0.688  0.688  0.688  0.688  0.688 -0.688 -0.688 -0.688 -0.688 -0.688] [1.0897], Avg: [ 0.656  0.656  0.656  0.656  0.656 -0.656 -0.656 -0.656 -0.656 -0.656] (1.000)
Step: 730000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.2990], Avg: [ 0.658  0.658  0.658  0.658  0.658 -0.658 -0.658 -0.658 -0.658 -0.658] (1.000)
Step: 740000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.1990], Avg: [ 0.662  0.662  0.662  0.662  0.662 -0.662 -0.662 -0.662 -0.662 -0.662] (1.000)
Step: 750000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.5411], Avg: [ 0.667  0.667  0.667  0.667  0.667 -0.667 -0.667 -0.667 -0.667 -0.667] (1.000)
Step: 760000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [1.3919], Avg: [ 0.664  0.664  0.664  0.664  0.664 -0.664 -0.664 -0.664 -0.664 -0.664] (1.000)
Step: 770000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.2247], Avg: [ 0.665  0.665  0.665  0.665  0.665 -0.665 -0.665 -0.665 -0.665 -0.665] (1.000)
Step: 780000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.0607], Avg: [ 0.666  0.666  0.666  0.666  0.666 -0.666 -0.666 -0.666 -0.666 -0.666] (1.000)
Step: 790000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.2990], Avg: [ 0.669  0.669  0.669  0.669  0.669 -0.669 -0.669 -0.669 -0.669 -0.669] (1.000)
Step: 800000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.1990], Avg: [ 0.671  0.671  0.671  0.671  0.671 -0.671 -0.671 -0.671 -0.671 -0.671] (1.000)
Step: 810000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [0.8660], Avg: [ 0.671  0.671  0.671  0.671  0.671 -0.671 -0.671 -0.671 -0.671 -0.671] (1.000)
Step: 820000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [1.0000], Avg: [ 0.665  0.665  0.665  0.665  0.665 -0.665 -0.665 -0.665 -0.665 -0.665] (1.000)
Step: 830000, Reward: [ 1.188  1.188  1.188  1.188  1.188 -1.188 -1.188 -1.188 -1.188 -1.188] [1.4790], Avg: [ 0.672  0.672  0.672  0.672  0.672 -0.672 -0.672 -0.672 -0.672 -0.672] (1.000)
Step: 840000, Reward: [ 0.625  0.625  0.625  0.625  0.625 -0.625 -0.625 -0.625 -0.625 -0.625] [1.1180], Avg: [ 0.671  0.671  0.671  0.671  0.671 -0.671 -0.671 -0.671 -0.671 -0.671] (1.000)
Step: 850000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.4577], Avg: [ 0.675  0.675  0.675  0.675  0.675 -0.675 -0.675 -0.675 -0.675 -0.675] (1.000)
Step: 860000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.3919], Avg: [ 0.678  0.678  0.678  0.678  0.678 -0.678 -0.678 -0.678 -0.678 -0.678] (1.000)
Step: 870000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.676  0.676  0.676  0.676  0.676 -0.676 -0.676 -0.676 -0.676 -0.676] (1.000)
Step: 880000, Reward: [ 0.812  0.812  0.812  0.812  0.812 -0.812 -0.812 -0.812 -0.812 -0.812] [1.2990], Avg: [ 0.678  0.678  0.678  0.678  0.678 -0.678 -0.678 -0.678 -0.678 -0.678] (1.000)
Step: 890000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.5000], Avg: [ 0.681  0.681  0.681  0.681  0.681 -0.681 -0.681 -0.681 -0.681 -0.681] (1.000)
Step: 900000, Reward: [ 1.188  1.188  1.188  1.188  1.188 -1.188 -1.188 -1.188 -1.188 -1.188] [1.6771], Avg: [ 0.687  0.687  0.687  0.687  0.687 -0.687 -0.687 -0.687 -0.687 -0.687] (1.000)
Step: 910000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.9354], Avg: [ 0.685  0.685  0.685  0.685  0.685 -0.685 -0.685 -0.685 -0.685 -0.685] (1.000)
Step: 920000, Reward: [ 1.125  1.125  1.125  1.125  1.125 -1.125 -1.125 -1.125 -1.125 -1.125] [1.5811], Avg: [ 0.69  0.69  0.69  0.69  0.69 -0.69 -0.69 -0.69 -0.69 -0.69] (1.000)
Step: 930000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.5612], Avg: [ 0.692  0.692  0.692  0.692  0.692 -0.692 -0.692 -0.692 -0.692 -0.692] (1.000)
Step: 940000, Reward: [ 0.875  0.875  0.875  0.875  0.875 -0.875 -0.875 -0.875 -0.875 -0.875] [1.3693], Avg: [ 0.694  0.694  0.694  0.694  0.694 -0.694 -0.694 -0.694 -0.694 -0.694] (1.000)
Step: 950000, Reward: [ 1.438  1.438  1.438  1.438  1.438 -1.438 -1.438 -1.438 -1.438 -1.438] [1.7139], Avg: [ 0.702  0.702  0.702  0.702  0.702 -0.702 -0.702 -0.702 -0.702 -0.702] (1.000)
Step: 960000, Reward: [ 0.938  0.938  0.938  0.938  0.938 -0.938 -0.938 -0.938 -0.938 -0.938] [1.3463], Avg: [ 0.704  0.704  0.704  0.704  0.704 -0.704 -0.704 -0.704 -0.704 -0.704] (1.000)
Step: 970000, Reward: [ 0.75  0.75  0.75  0.75  0.75 -0.75 -0.75 -0.75 -0.75 -0.75] [1.0607], Avg: [ 0.705  0.705  0.705  0.705  0.705 -0.705 -0.705 -0.705 -0.705 -0.705] (1.000)
Step: 980000, Reward: [ 1.  1.  1.  1.  1. -1. -1. -1. -1. -1.] [1.3693], Avg: [ 0.708  0.708  0.708  0.708  0.708 -0.708 -0.708 -0.708 -0.708 -0.708] (1.000)
Step: 990000, Reward: [ 1.375  1.375  1.375  1.375  1.375 -1.375 -1.375 -1.375 -1.375 -1.375] [1.8371], Avg: [ 0.715  0.715  0.715  0.715  0.715 -0.715 -0.715 -0.715 -0.715 -0.715] (1.000)
Step: 1000000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.5000], Avg: [ 0.71  0.71  0.71  0.71  0.71 -0.71 -0.71 -0.71 -0.71 -0.71] (1.000)
Step: 1010000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.704  0.704  0.704  0.704  0.704 -0.704 -0.704 -0.704 -0.704 -0.704] (1.000)
Step: 1020000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.9354], Avg: [ 0.697  0.697  0.697  0.697  0.697 -0.697 -0.697 -0.697 -0.697 -0.697] (1.000)
Step: 1030000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.6124], Avg: [ 0.693  0.693  0.693  0.693  0.693 -0.693 -0.693 -0.693 -0.693 -0.693] (1.000)
Step: 1040000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.5590], Avg: [ 0.684  0.684  0.684  0.684  0.684 -0.684 -0.684 -0.684 -0.684 -0.684] (1.000)
Step: 1050000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.679  0.679  0.679  0.679  0.679 -0.679 -0.679 -0.679 -0.679 -0.679] (1.000)
Step: 1060000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.6614], Avg: [ 0.672  0.672  0.672  0.672  0.672 -0.672 -0.672 -0.672 -0.672 -0.672] (1.000)
Step: 1070000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.6124], Avg: [ 0.666  0.666  0.666  0.666  0.666 -0.666 -0.666 -0.666 -0.666 -0.666] (1.000)
Step: 1080000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.661  0.661  0.661  0.661  0.661 -0.661 -0.661 -0.661 -0.661 -0.661] (1.000)
Step: 1090000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.4330], Avg: [ 0.653  0.653  0.653  0.653  0.653 -0.653 -0.653 -0.653 -0.653 -0.653] (1.000)
Step: 1100000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.5590], Avg: [ 0.647  0.647  0.647  0.647  0.647 -0.647 -0.647 -0.647 -0.647 -0.647] (1.000)
Step: 1110000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.3536], Avg: [ 0.641  0.641  0.641  0.641  0.641 -0.641 -0.641 -0.641 -0.641 -0.641] (1.000)
Step: 1120000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.5000], Avg: [ 0.635  0.635  0.635  0.635  0.635 -0.635 -0.635 -0.635 -0.635 -0.635] (1.000)
Step: 1130000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.6614], Avg: [ 0.628  0.628  0.628  0.628  0.628 -0.628 -0.628 -0.628 -0.628 -0.628] (1.000)
Step: 1140000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.4330], Avg: [ 0.622  0.622  0.622  0.622  0.622 -0.622 -0.622 -0.622 -0.622 -0.622] (1.000)
Step: 1150000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.5000], Avg: [ 0.616  0.616  0.616  0.616  0.616 -0.616 -0.616 -0.616 -0.616 -0.616] (1.000)
Step: 1160000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.3536], Avg: [ 0.611  0.611  0.611  0.611  0.611 -0.611 -0.611 -0.611 -0.611 -0.611] (1.000)
Step: 1170000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.5590], Avg: [ 0.607  0.607  0.607  0.607  0.607 -0.607 -0.607 -0.607 -0.607 -0.607] (1.000)
Step: 1180000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.2500], Avg: [ 0.603  0.603  0.603  0.603  0.603 -0.603 -0.603 -0.603 -0.603 -0.603] (1.000)
Step: 1190000, Reward: [-0.062 -0.062 -0.062 -0.062 -0.062  0.062  0.062  0.062  0.062  0.062] [0.4330], Avg: [ 0.597  0.597  0.597  0.597  0.597 -0.597 -0.597 -0.597 -0.597 -0.597] (1.000)
Step: 1200000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [0.6124], Avg: [ 0.591  0.591  0.591  0.591  0.591 -0.591 -0.591 -0.591 -0.591 -0.591] (1.000)
Step: 1210000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.7906], Avg: [ 0.587  0.587  0.587  0.587  0.587 -0.587 -0.587 -0.587 -0.587 -0.587] (1.000)
Step: 1220000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.9354], Avg: [ 0.582  0.582  0.582  0.582  0.582 -0.582 -0.582 -0.582 -0.582 -0.582] (1.000)
Step: 1230000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.4330], Avg: [ 0.579  0.579  0.579  0.579  0.579 -0.579 -0.579 -0.579 -0.579 -0.579] (1.000)
Step: 1240000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.8292], Avg: [ 0.575  0.575  0.575  0.575  0.575 -0.575 -0.575 -0.575 -0.575 -0.575] (1.000)
Step: 1250000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.6614], Avg: [ 0.572  0.572  0.572  0.572  0.572 -0.572 -0.572 -0.572 -0.572 -0.572] (1.000)
Step: 1260000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.568  0.568  0.568  0.568  0.568 -0.568 -0.568 -0.568 -0.568 -0.568] (1.000)
Step: 1270000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.565  0.565  0.565  0.565  0.565 -0.565 -0.565 -0.565 -0.565 -0.565] (1.000)
Step: 1280000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.7906], Avg: [ 0.562  0.562  0.562  0.562  0.562 -0.562 -0.562 -0.562 -0.562 -0.562] (1.000)
Step: 1290000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.7071], Avg: [ 0.557  0.557  0.557  0.557  0.557 -0.557 -0.557 -0.557 -0.557 -0.557] (1.000)
Step: 1300000, Reward: [-0.125 -0.125 -0.125 -0.125 -0.125  0.125  0.125  0.125  0.125  0.125] [0.3536], Avg: [ 0.552  0.552  0.552  0.552  0.552 -0.552 -0.552 -0.552 -0.552 -0.552] (1.000)
Step: 1310000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.6124], Avg: [ 0.549  0.549  0.549  0.549  0.549 -0.549 -0.549 -0.549 -0.549 -0.549] (1.000)
Step: 1320000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.7500], Avg: [ 0.545  0.545  0.545  0.545  0.545 -0.545 -0.545 -0.545 -0.545 -0.545] (1.000)
Step: 1330000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.541  0.541  0.541  0.541  0.541 -0.541 -0.541 -0.541 -0.541 -0.541] (1.000)
Step: 1340000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.5000], Avg: [ 0.537  0.537  0.537  0.537  0.537 -0.537 -0.537 -0.537 -0.537 -0.537] (1.000)
Step: 1350000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.534  0.534  0.534  0.534  0.534 -0.534 -0.534 -0.534 -0.534 -0.534] (1.000)
Step: 1360000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.6614], Avg: [ 0.533  0.533  0.533  0.533  0.533 -0.533 -0.533 -0.533 -0.533 -0.533] (1.000)
Step: 1370000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.6124], Avg: [ 0.53  0.53  0.53  0.53  0.53 -0.53 -0.53 -0.53 -0.53 -0.53] (1.000)
Step: 1380000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.6124], Avg: [ 0.528  0.528  0.528  0.528  0.528 -0.528 -0.528 -0.528 -0.528 -0.528] (1.000)
Step: 1390000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.525  0.525  0.525  0.525  0.525 -0.525 -0.525 -0.525 -0.525 -0.525] (1.000)
Step: 1400000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.522  0.522  0.522  0.522  0.522 -0.522 -0.522 -0.522 -0.522 -0.522] (1.000)
Step: 1410000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.6614], Avg: [ 0.519  0.519  0.519  0.519  0.519 -0.519 -0.519 -0.519 -0.519 -0.519] (1.000)
Step: 1420000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.4330], Avg: [ 0.516  0.516  0.516  0.516  0.516 -0.516 -0.516 -0.516 -0.516 -0.516] (1.000)
Step: 1430000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.514  0.514  0.514  0.514  0.514 -0.514 -0.514 -0.514 -0.514 -0.514] (1.000)
Step: 1440000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.6124], Avg: [ 0.511  0.511  0.511  0.511  0.511 -0.511 -0.511 -0.511 -0.511 -0.511] (1.000)
Step: 1450000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [0.8292], Avg: [ 0.51  0.51  0.51  0.51  0.51 -0.51 -0.51 -0.51 -0.51 -0.51] (1.000)
Step: 1460000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.3536], Avg: [ 0.507  0.507  0.507  0.507  0.507 -0.507 -0.507 -0.507 -0.507 -0.507] (1.000)
Step: 1470000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.0000], Avg: [ 0.503  0.503  0.503  0.503  0.503 -0.503 -0.503 -0.503 -0.503 -0.503] (1.000)
Step: 1480000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.5000], Avg: [ 0.502  0.502  0.502  0.502  0.502 -0.502 -0.502 -0.502 -0.502 -0.502] (1.000)
Step: 1490000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.6614], Avg: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] (1.000)
Step: 1500000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.7071], Avg: [ 0.499  0.499  0.499  0.499  0.499 -0.499 -0.499 -0.499 -0.499 -0.499] (1.000)
Step: 1510000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.6124], Avg: [ 0.497  0.497  0.497  0.497  0.497 -0.497 -0.497 -0.497 -0.497 -0.497] (1.000)
Step: 1520000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.494  0.494  0.494  0.494  0.494 -0.494 -0.494 -0.494 -0.494 -0.494] (1.000)
Step: 1530000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.492  0.492  0.492  0.492  0.492 -0.492 -0.492 -0.492 -0.492 -0.492] (1.000)
Step: 1540000, Reward: [-0.188 -0.188 -0.188 -0.188 -0.188  0.188  0.188  0.188  0.188  0.188] [0.4330], Avg: [ 0.487  0.487  0.487  0.487  0.487 -0.487 -0.487 -0.487 -0.487 -0.487] (1.000)
Step: 1550000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.5000], Avg: [ 0.486  0.486  0.486  0.486  0.486 -0.486 -0.486 -0.486 -0.486 -0.486] (1.000)
Step: 1560000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.3536], Avg: [ 0.483  0.483  0.483  0.483  0.483 -0.483 -0.483 -0.483 -0.483 -0.483] (1.000)
Step: 1570000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.5590], Avg: [ 0.481  0.481  0.481  0.481  0.481 -0.481 -0.481 -0.481 -0.481 -0.481] (1.000)
Step: 1580000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.479  0.479  0.479  0.479  0.479 -0.479 -0.479 -0.479 -0.479 -0.479] (1.000)
Step: 1590000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.476  0.476  0.476  0.476  0.476 -0.476 -0.476 -0.476 -0.476 -0.476] (1.000)
Step: 1600000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.2500], Avg: [ 0.473  0.473  0.473  0.473  0.473 -0.473 -0.473 -0.473 -0.473 -0.473] (1.000)
Step: 1610000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.7071], Avg: [ 0.473  0.473  0.473  0.473  0.473 -0.473 -0.473 -0.473 -0.473 -0.473] (1.000)
Step: 1620000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.6614], Avg: [ 0.472  0.472  0.472  0.472  0.472 -0.472 -0.472 -0.472 -0.472 -0.472] (1.000)
Step: 1630000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.47  0.47  0.47  0.47  0.47 -0.47 -0.47 -0.47 -0.47 -0.47] (1.000)
Step: 1640000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.467  0.467  0.467  0.467  0.467 -0.467 -0.467 -0.467 -0.467 -0.467] (1.000)
Step: 1650000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.4330], Avg: [ 0.465  0.465  0.465  0.465  0.465 -0.465 -0.465 -0.465 -0.465 -0.465] (1.000)
Step: 1660000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.4330], Avg: [ 0.462  0.462  0.462  0.462  0.462 -0.462 -0.462 -0.462 -0.462 -0.462] (1.000)
Step: 1670000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.46  0.46  0.46  0.46  0.46 -0.46 -0.46 -0.46 -0.46 -0.46] (1.000)
Step: 1680000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.7906], Avg: [ 0.458  0.458  0.458  0.458  0.458 -0.458 -0.458 -0.458 -0.458 -0.458] (1.000)
Step: 1690000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.6614], Avg: [ 0.457  0.457  0.457  0.457  0.457 -0.457 -0.457 -0.457 -0.457 -0.457] (1.000)
Step: 1700000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.2500], Avg: [ 0.454  0.454  0.454  0.454  0.454 -0.454 -0.454 -0.454 -0.454 -0.454] (1.000)
Step: 1710000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.452  0.452  0.452  0.452  0.452 -0.452 -0.452 -0.452 -0.452 -0.452] (1.000)
Step: 1720000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.6124], Avg: [ 0.45  0.45  0.45  0.45  0.45 -0.45 -0.45 -0.45 -0.45 -0.45] (1.000)
Step: 1730000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.7906], Avg: [ 0.448  0.448  0.448  0.448  0.448 -0.448 -0.448 -0.448 -0.448 -0.448] (1.000)
Step: 1740000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.5000], Avg: [ 0.447  0.447  0.447  0.447  0.447 -0.447 -0.447 -0.447 -0.447 -0.447] (1.000)
Step: 1750000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.445  0.445  0.445  0.445  0.445 -0.445 -0.445 -0.445 -0.445 -0.445] (1.000)
Step: 1760000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.5590], Avg: [ 0.444  0.444  0.444  0.444  0.444 -0.444 -0.444 -0.444 -0.444 -0.444] (1.000)
Step: 1770000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.442  0.442  0.442  0.442  0.442 -0.442 -0.442 -0.442 -0.442 -0.442] (1.000)
Step: 1780000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.44  0.44  0.44  0.44  0.44 -0.44 -0.44 -0.44 -0.44 -0.44] (1.000)
Step: 1790000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.4330], Avg: [ 0.439  0.439  0.439  0.439  0.439 -0.439 -0.439 -0.439 -0.439 -0.439] (1.000)
Step: 1800000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.4330], Avg: [ 0.436  0.436  0.436  0.436  0.436 -0.436 -0.436 -0.436 -0.436 -0.436] (1.000)
Step: 1810000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.9014], Avg: [ 0.435  0.435  0.435  0.435  0.435 -0.435 -0.435 -0.435 -0.435 -0.435] (1.000)
Step: 1820000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [0.7906], Avg: [ 0.435  0.435  0.435  0.435  0.435 -0.435 -0.435 -0.435 -0.435 -0.435] (1.000)
Step: 1830000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.6614], Avg: [ 0.434  0.434  0.434  0.434  0.434 -0.434 -0.434 -0.434 -0.434 -0.434] (1.000)
Step: 1840000, Reward: [ 0.312  0.312  0.312  0.312  0.312 -0.312 -0.312 -0.312 -0.312 -0.312] [0.8292], Avg: [ 0.433  0.433  0.433  0.433  0.433 -0.433 -0.433 -0.433 -0.433 -0.433] (1.000)
Step: 1850000, Reward: [ 0.25  0.25  0.25  0.25  0.25 -0.25 -0.25 -0.25 -0.25 -0.25] [0.5000], Avg: [ 0.432  0.432  0.432  0.432  0.432 -0.432 -0.432 -0.432 -0.432 -0.432] (1.000)
Step: 1860000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.6614], Avg: [ 0.431  0.431  0.431  0.431  0.431 -0.431 -0.431 -0.431 -0.431 -0.431] (1.000)
Step: 1870000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.5590], Avg: [ 0.43  0.43  0.43  0.43  0.43 -0.43 -0.43 -0.43 -0.43 -0.43] (1.000)
Step: 1880000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.428  0.428  0.428  0.428  0.428 -0.428 -0.428 -0.428 -0.428 -0.428] (1.000)
Step: 1890000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.4330], Avg: [ 0.426  0.426  0.426  0.426  0.426 -0.426 -0.426 -0.426 -0.426 -0.426] (1.000)
Step: 1900000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.3536], Avg: [ 0.425  0.425  0.425  0.425  0.425 -0.425 -0.425 -0.425 -0.425 -0.425] (1.000)
Step: 1910000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.423  0.423  0.423  0.423  0.423 -0.423 -0.423 -0.423 -0.423 -0.423] (1.000)
Step: 1920000, Reward: [ 0.5  0.5  0.5  0.5  0.5 -0.5 -0.5 -0.5 -0.5 -0.5] [1.0000], Avg: [ 0.424  0.424  0.424  0.424  0.424 -0.424 -0.424 -0.424 -0.424 -0.424] (1.000)
Step: 1930000, Reward: [ 0.438  0.438  0.438  0.438  0.438 -0.438 -0.438 -0.438 -0.438 -0.438] [0.8292], Avg: [ 0.424  0.424  0.424  0.424  0.424 -0.424 -0.424 -0.424 -0.424 -0.424] (1.000)
Step: 1940000, Reward: [ 0.188  0.188  0.188  0.188  0.188 -0.188 -0.188 -0.188 -0.188 -0.188] [0.6614], Avg: [ 0.422  0.422  0.422  0.422  0.422 -0.422 -0.422 -0.422 -0.422 -0.422] (1.000)
Step: 1950000, Reward: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0.3536], Avg: [ 0.42  0.42  0.42  0.42  0.42 -0.42 -0.42 -0.42 -0.42 -0.42] (1.000)
Step: 1960000, Reward: [ 0.375  0.375  0.375  0.375  0.375 -0.375 -0.375 -0.375 -0.375 -0.375] [0.7071], Avg: [ 0.42  0.42  0.42  0.42  0.42 -0.42 -0.42 -0.42 -0.42 -0.42] (1.000)
Step: 1970000, Reward: [ 0.125  0.125  0.125  0.125  0.125 -0.125 -0.125 -0.125 -0.125 -0.125] [0.5000], Avg: [ 0.418  0.418  0.418  0.418  0.418 -0.418 -0.418 -0.418 -0.418 -0.418] (1.000)
Step: 1980000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.5590], Avg: [ 0.417  0.417  0.417  0.417  0.417 -0.417 -0.417 -0.417 -0.417 -0.417] (1.000)
Step: 1990000, Reward: [ 0.062  0.062  0.062  0.062  0.062 -0.062 -0.062 -0.062 -0.062 -0.062] [0.4330], Avg: [ 0.415  0.415  0.415  0.415  0.415 -0.415 -0.415 -0.415 -0.415 -0.415] (1.000)

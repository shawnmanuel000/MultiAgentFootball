Model: <class 'multiagent.mappo.MAPPOAgent'>, Dir: simple_spread
num_envs: 4, state_size: [(1, 18), (1, 18), (1, 18)], action_size: [[1, 5], [1, 5], [1, 5]], action_space: [MultiDiscrete([5]), MultiDiscrete([5]), MultiDiscrete([5])], envs: <class 'utils.envs.EnvManager'>,

import torch
import random
import numpy as np
from models.ppo import PPONetwork
from utils.wrappers import ParallelAgent
from utils.network import PTNetwork, PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, NUM_STEPS, EPS_MIN, MultiHeadAttention

ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class MAPPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.attn = MultiHeadAttention(state_size[-1], 4, 32)
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.norm1 = torch.nn.LayerNorm(INPUT_LAYER)
		self.norm2 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.norm3 = torch.nn.LayerNorm(ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.attn(state)
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

class MAPPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class MAPPONetwork(PTNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(gpu=gpu)
		self.state_size = state_size
		self.action_size = action_size
		self.actor = MAPPOActor(state_size[0], action_size[0])
		self.critic = MAPPOCritic([np.sum([np.prod(s) for s in self.state_size])], [np.sum([np.prod(a) for a in self.action_size])])
		self.models = [PPONetwork(s_size, a_size, lambda s,a: self.actor, lambda s,a: self.critic, lr=lr, gpu=gpu, load=load) for s_size,a_size in zip(self.state_size, self.action_size)]
		if load: self.load_model(load)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action_in = [None] * len(state) if action_in is None else action_in
			action_or_entropy, log_prob = map(list, zip(*[model.get_action_probs(s, a, grad=grad, numpy=numpy, sample=sample) for s,a,model in zip(state, action_in, self.models)]))
			return action_or_entropy, log_prob

	def get_value(self, state, grad=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_value = [model.get_value(state, grad) for model in self.models]
			return q_value

	def optimize(self, states, actions, old_log_probs, states_joint, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		for model, state, action, old_log_prob, target, advantage in zip(self.models, states, actions, old_log_probs, targets, advantages):
			values = model.get_value(states_joint[:-1], grad=True)
			critic_error = values - target.detach()
			critic_loss = critic_error.pow(2)
			model.step(model.critic_optimizer, critic_loss.mean(), model.critic_local.parameters())

			entropy, new_log_prob = model.get_action_probs(state[:-1], action, grad=True, numpy=False)
			ratio = (new_log_prob - old_log_prob).exp()
			ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
			advantage = advantage.view(*advantage.shape, *[1]*(len(ratio.shape)-len(advantage.shape)))
			actor_loss = -(torch.min(ratio*advantage, ratio_clipped*advantage) + e_weight*entropy) * scale
			model.step(model.actor_optimizer, actor_loss.mean(), model.actor_local.parameters())

	def save_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.save_model(model, "mappo", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]
		
	def load_model(self, dirname="pytorch", name="checkpoint"):
		[PTACNetwork.load_model(model, "mappo", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]

class MAPPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, MAPPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, numpy=True):
		# [x.eval() for x in [self.network.actor, self.network.critic]]
		action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return action

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			# [x.train() for x in [self.network.actor, self.network.critic]]
			states, actions, log_probs, rewards, dones = map(lambda x: self.to_tensor(x), zip(*self.buffer))
			self.buffer.clear()
			states = [torch.cat([s, ns.unsqueeze(0)], dim=0) for s,ns in zip(states, self.to_tensor(next_state))]
			states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
			values = self.network.get_value(states_joint)
			targets, advantages = zip(*[self.compute_gae(value[-1], reward.unsqueeze(-1), done.unsqueeze(-1), value[:-1]) for value,reward,done in zip(values, rewards, dones)])
			self.network.optimize(states, actions, log_probs, states_joint, targets, advantages)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0003           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.001   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 256				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 512			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.998			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.000               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import particle_envs.make_env as pgym
import football.gfootball.env as ggym
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from multiagent.coma import COMAAgent
from multiagent.maddpg import MADDPGAgent
from multiagent.mappo import MAPPOAgent
from utils.wrappers import ParallelAgent, DoubleAgent, ParticleTeamEnv, FootballTeamEnv
from utils.envs import EnsembleEnv, EnvManager, EnvWorker, MPI_SIZE, MPI_RANK
from utils.misc import Logger, rollout
np.set_printoptions(precision=3)

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "academy_empty_goal", "academy_run_to_score", "academy_run_to_score_with_keeper", "academy_single_goal_versus_lazy", "academy_3_vs_1_with_keeper", "1_vs_1_easy", "3_vs_3_custom", "5_vs_5", "11_vs_11_stochastic", "test_example_multiagent"]
ptc_envs = ["simple_adversary", "simple_speaker_listener", "simple_tag", "simple_spread", "simple_push"]
env_name = gym_envs[0]
env_name = gfb_envs[-4]
env_name = ptc_envs[-2]

def make_env(env_name=env_name, log=False, render=False):
	if env_name in gym_envs: return gym.make(env_name)
	if env_name in ptc_envs: return ParticleTeamEnv(pgym.make_env(env_name))
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	multiagent_args = {"number_of_left_players_agent_controls":3, "number_of_right_players_agent_controls":3} if env_name == "3_vs_3_custom" else {}
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=render, **multiagent_args)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space}")
	return FootballTeamEnv(env)

def run(model, steps=10000, ports=16, env_name=env_name, save_at=100, checkpoint=True, save_best=False, log=True, render=False):
	envs = (EnvManager if type(ports) == list or MPI_SIZE > 1 else EnsembleEnv)(lambda: make_env(env_name), ports)
	agent = (DoubleAgent if env_name=="3_vs_3_custom" else ParallelAgent)(envs.state_size, envs.action_size, model, num_envs=envs.num_envs, gpu=True, agent2=RandomAgent) 
	logger = Logger(model, env_name, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs))
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%1000==0:#np.any(dones[0]):
			rollouts = rollout(envs, agent, render=True)
			total_rewards.append(np.mean(rollouts, axis=-1) - np.std(rollouts, axis=-1))
			if checkpoint and len(total_rewards) % save_at==0: agent.save_model(env_name, "checkpoint")
			if save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(env_name)
			if log: logger.log(f"Step: {s}, Reward: {total_rewards[-1]+np.std(rollouts, axis=-1)} [{np.std(rollouts):.4f}], Avg: {np.mean(total_rewards, axis=0)} ({agent.agent.eps:.3f})")

def trial(model, env_name, render):
	envs = EnsembleEnv(lambda: make_env(env_name, log=True, render=render), 0)
	agent = (DoubleAgent if env_name=="3_vs_3_custom" else ParallelAgent)(envs.state_size, envs.action_size, model, gpu=False, load=f"{env_name}", agent2=RandomAgent)
	print(f"Reward: {np.mean([rollout(envs.env, agent, eps=0.0, render=True) for _ in range(5)], axis=0)}")
	envs.close()

def parse_args():
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--workerports", type=int, default=[16], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
	parser.add_argument("--model", type=str, default="mappo", help="Which reinforcement learning algorithm to use")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	parser.add_argument("--render", action="store_true", help="Whether to render during training")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run")
	parser.add_argument("--env", type=str, default="", help="Name of env to use")
	return parser.parse_args()

if __name__ == "__main__":
	args = parse_args()
	env_name = env_name if args.env not in [*gym_envs, *gfb_envs, *ptc_envs] else args.env
	models = {"ddpg":DDPGAgent, "ppo":PPOAgent, "ddqn":DDQNAgent, "maddpg":MADDPGAgent, "mappo":MAPPOAgent, "coma":COMAAgent, "rand":RandomAgent}
	model = models[args.model] if args.model in models else RandomAgent
	if args.trial:
		trial(model=model, env_name=env_name, render=args.render)
	elif args.selfport is not None or MPI_RANK>0 :
		EnvWorker(self_port=args.selfport, make_env=make_env).start()
	else:
		run(model=model, steps=args.steps, ports=args.workerports[0] if len(args.workerports)==1 else args.workerports, env_name=env_name, render=args.render)

Step: 0, Reward: [-592.114 -592.114 -592.114] [112.1512], Avg: [-704.266 -704.266 -704.266] (1.000)
Step: 1000, Reward: [-656.565 -656.565 -656.565] [142.8088], Avg: [-751.82 -751.82 -751.82] (1.000)
Step: 2000, Reward: [-548.567 -548.567 -548.567] [92.7146], Avg: [-714.974 -714.974 -714.974] (1.000)
Step: 3000, Reward: [-687.102 -687.102 -687.102] [82.8673], Avg: [-728.723 -728.723 -728.723] (1.000)
Step: 4000, Reward: [-480.258 -480.258 -480.258] [47.2535], Avg: [-688.48 -688.48 -688.48] (1.000)
Step: 5000, Reward: [-429.144 -429.144 -429.144] [36.8766], Avg: [-651.404 -651.404 -651.404] (1.000)
Step: 6000, Reward: [-588.944 -588.944 -588.944] [113.5715], Avg: [-658.705 -658.705 -658.705] (1.000)
Step: 7000, Reward: [-553.149 -553.149 -553.149] [39.7280], Avg: [-650.477 -650.477 -650.477] (1.000)
Step: 8000, Reward: [-437.62 -437.62 -437.62] [55.4163], Avg: [-632.983 -632.983 -632.983] (1.000)
Step: 9000, Reward: [-411.617 -411.617 -411.617] [57.9819], Avg: [-616.645 -616.645 -616.645] (1.000)
Step: 10000, Reward: [-467.716 -467.716 -467.716] [63.0611], Avg: [-608.839 -608.839 -608.839] (1.000)
Step: 11000, Reward: [-420.965 -420.965 -420.965] [57.0176], Avg: [-597.934 -597.934 -597.934] (1.000)
Step: 12000, Reward: [-473.103 -473.103 -473.103] [66.1095], Avg: [-593.417 -593.417 -593.417] (1.000)
Step: 13000, Reward: [-397.652 -397.652 -397.652] [48.3098], Avg: [-582.884 -582.884 -582.884] (1.000)
Step: 14000, Reward: [-752.02 -752.02 -752.02] [95.9336], Avg: [-600.556 -600.556 -600.556] (1.000)
Step: 15000, Reward: [-441.811 -441.811 -441.811] [43.6471], Avg: [-593.362 -593.362 -593.362] (1.000)
Step: 16000, Reward: [-761.814 -761.814 -761.814] [208.5572], Avg: [-615.539 -615.539 -615.539] (1.000)
Step: 17000, Reward: [-476.81 -476.81 -476.81] [88.5078], Avg: [-612.749 -612.749 -612.749] (1.000)
Step: 18000, Reward: [-831.526 -831.526 -831.526] [61.6482], Avg: [-627.508 -627.508 -627.508] (1.000)
Step: 19000, Reward: [-925.044 -925.044 -925.044] [206.2741], Avg: [-652.699 -652.699 -652.699] (1.000)
Step: 20000, Reward: [-556.22 -556.22 -556.22] [98.1510], Avg: [-652.778 -652.778 -652.778] (1.000)
Step: 21000, Reward: [-412.556 -412.556 -412.556] [29.1536], Avg: [-643.184 -643.184 -643.184] (1.000)
Step: 22000, Reward: [-423.818 -423.818 -423.818] [63.2237], Avg: [-636.396 -636.396 -636.396] (1.000)
Step: 23000, Reward: [-489.495 -489.495 -489.495] [54.0280], Avg: [-632.526 -632.526 -632.526] (1.000)
Step: 24000, Reward: [-489.902 -489.902 -489.902] [23.4092], Avg: [-627.757 -627.757 -627.757] (1.000)
Step: 25000, Reward: [-474.408 -474.408 -474.408] [65.4982], Avg: [-624.378 -624.378 -624.378] (1.000)
Step: 26000, Reward: [-680.544 -680.544 -680.544] [64.1164], Avg: [-628.833 -628.833 -628.833] (1.000)
Step: 27000, Reward: [-585.96 -585.96 -585.96] [65.1816], Avg: [-629.63 -629.63 -629.63] (1.000)
Step: 28000, Reward: [-475.961 -475.961 -475.961] [98.8494], Avg: [-627.74 -627.74 -627.74] (1.000)
Step: 29000, Reward: [-550.921 -550.921 -550.921] [78.8853], Avg: [-627.809 -627.809 -627.809] (1.000)
Step: 30000, Reward: [-537.625 -537.625 -537.625] [48.6166], Avg: [-626.468 -626.468 -626.468] (1.000)
Step: 31000, Reward: [-446.772 -446.772 -446.772] [88.9236], Avg: [-623.631 -623.631 -623.631] (1.000)
Step: 32000, Reward: [-532.325 -532.325 -532.325] [79.0098], Avg: [-623.258 -623.258 -623.258] (1.000)
Step: 33000, Reward: [-724.54 -724.54 -724.54] [110.2379], Avg: [-629.48 -629.48 -629.48] (1.000)
Step: 34000, Reward: [-676.654 -676.654 -676.654] [72.3325], Avg: [-632.894 -632.894 -632.894] (1.000)
Step: 35000, Reward: [-586.95 -586.95 -586.95] [68.1902], Avg: [-633.512 -633.512 -633.512] (1.000)
Step: 36000, Reward: [-731.72 -731.72 -731.72] [22.0827], Avg: [-636.763 -636.763 -636.763] (1.000)
Step: 37000, Reward: [-650.503 -650.503 -650.503] [110.4753], Avg: [-640.032 -640.032 -640.032] (1.000)
Step: 38000, Reward: [-614.923 -614.923 -614.923] [57.6124], Avg: [-640.865 -640.865 -640.865] (1.000)
Step: 39000, Reward: [-554.726 -554.726 -554.726] [37.3910], Avg: [-639.647 -639.647 -639.647] (1.000)
Step: 40000, Reward: [-525.749 -525.749 -525.749] [75.7017], Avg: [-638.715 -638.715 -638.715] (1.000)
Step: 41000, Reward: [-540.3 -540.3 -540.3] [49.2671], Avg: [-637.545 -637.545 -637.545] (1.000)
Step: 42000, Reward: [-839.719 -839.719 -839.719] [193.0954], Avg: [-646.737 -646.737 -646.737] (1.000)
Step: 43000, Reward: [-980.806 -980.806 -980.806] [104.5539], Avg: [-656.706 -656.706 -656.706] (1.000)
Step: 44000, Reward: [-1251.942 -1251.942 -1251.942] [254.3901], Avg: [-675.586 -675.586 -675.586] (1.000)
Step: 45000, Reward: [-858.216 -858.216 -858.216] [77.1487], Avg: [-681.234 -681.234 -681.234] (1.000)
Step: 46000, Reward: [-738.749 -738.749 -738.749] [68.9977], Avg: [-683.926 -683.926 -683.926] (1.000)
Step: 47000, Reward: [-500.969 -500.969 -500.969] [36.9191], Avg: [-680.883 -680.883 -680.883] (1.000)
Step: 48000, Reward: [-483.925 -483.925 -483.925] [121.9178], Avg: [-679.352 -679.352 -679.352] (1.000)
Step: 49000, Reward: [-481.84 -481.84 -481.84] [71.5251], Avg: [-676.832 -676.832 -676.832] (1.000)
Step: 50000, Reward: [-564.278 -564.278 -564.278] [115.0218], Avg: [-676.88 -676.88 -676.88] (1.000)
Step: 51000, Reward: [-703.495 -703.495 -703.495] [93.3204], Avg: [-679.187 -679.187 -679.187] (1.000)
Step: 52000, Reward: [-506.269 -506.269 -506.269] [68.8088], Avg: [-677.222 -677.222 -677.222] (1.000)
Step: 53000, Reward: [-462.443 -462.443 -462.443] [98.7883], Avg: [-675.074 -675.074 -675.074] (1.000)
Step: 54000, Reward: [-505.674 -505.674 -505.674] [38.4333], Avg: [-672.693 -672.693 -672.693] (1.000)
Step: 55000, Reward: [-495.864 -495.864 -495.864] [53.7930], Avg: [-670.496 -670.496 -670.496] (1.000)
Step: 56000, Reward: [-744.961 -744.961 -744.961] [97.0989], Avg: [-673.506 -673.506 -673.506] (1.000)
Step: 57000, Reward: [-1267.537 -1267.537 -1267.537] [303.4601], Avg: [-688.98 -688.98 -688.98] (1.000)
Step: 58000, Reward: [-1340.13 -1340.13 -1340.13] [148.2190], Avg: [-702.529 -702.529 -702.529] (1.000)
Step: 59000, Reward: [-897.3 -897.3 -897.3] [92.2294], Avg: [-707.312 -707.312 -707.312] (1.000)
Step: 60000, Reward: [-980.164 -980.164 -980.164] [78.0908], Avg: [-713.065 -713.065 -713.065] (1.000)
Step: 61000, Reward: [-826.535 -826.535 -826.535] [120.1035], Avg: [-716.832 -716.832 -716.832] (1.000)
Step: 62000, Reward: [-738.286 -738.286 -738.286] [89.5035], Avg: [-718.594 -718.594 -718.594] (1.000)
Step: 63000, Reward: [-634.725 -634.725 -634.725] [98.2891], Avg: [-718.819 -718.819 -718.819] (1.000)
Step: 64000, Reward: [-579.929 -579.929 -579.929] [17.2506], Avg: [-716.948 -716.948 -716.948] (1.000)
Step: 65000, Reward: [-613.252 -613.252 -613.252] [86.6790], Avg: [-716.69 -716.69 -716.69] (1.000)
Step: 66000, Reward: [-687.523 -687.523 -687.523] [28.5708], Avg: [-716.681 -716.681 -716.681] (1.000)
Step: 67000, Reward: [-657.817 -657.817 -657.817] [57.1134], Avg: [-716.655 -716.655 -716.655] (1.000)
Step: 68000, Reward: [-575.058 -575.058 -575.058] [102.2004], Avg: [-716.084 -716.084 -716.084] (1.000)
Step: 69000, Reward: [-499.464 -499.464 -499.464] [28.4804], Avg: [-713.396 -713.396 -713.396] (1.000)
Step: 70000, Reward: [-448.54 -448.54 -448.54] [62.7351], Avg: [-710.55 -710.55 -710.55] (1.000)
Step: 71000, Reward: [-483.342 -483.342 -483.342] [59.5141], Avg: [-708.221 -708.221 -708.221] (1.000)
Step: 72000, Reward: [-464.233 -464.233 -464.233] [82.9062], Avg: [-706.014 -706.014 -706.014] (1.000)
Step: 73000, Reward: [-505.264 -505.264 -505.264] [50.2895], Avg: [-703.981 -703.981 -703.981] (1.000)
Step: 74000, Reward: [-446.451 -446.451 -446.451] [83.8642], Avg: [-701.665 -701.665 -701.665] (1.000)
Step: 75000, Reward: [-512.854 -512.854 -512.854] [72.7419], Avg: [-700.138 -700.138 -700.138] (1.000)
Step: 76000, Reward: [-439.459 -439.459 -439.459] [40.9138], Avg: [-697.284 -697.284 -697.284] (1.000)
Step: 77000, Reward: [-461.447 -461.447 -461.447] [65.0619], Avg: [-695.094 -695.094 -695.094] (1.000)
Step: 78000, Reward: [-572.078 -572.078 -572.078] [36.2249], Avg: [-693.996 -693.996 -693.996] (1.000)
Step: 79000, Reward: [-448.27 -448.27 -448.27] [42.3716], Avg: [-691.454 -691.454 -691.454] (1.000)
Step: 80000, Reward: [-422.03 -422.03 -422.03] [50.8840], Avg: [-688.756 -688.756 -688.756] (1.000)
Step: 81000, Reward: [-571.691 -571.691 -571.691] [86.6438], Avg: [-688.385 -688.385 -688.385] (1.000)
Step: 82000, Reward: [-398.262 -398.262 -398.262] [54.2662], Avg: [-685.543 -685.543 -685.543] (1.000)
Step: 83000, Reward: [-403.885 -403.885 -403.885] [36.9798], Avg: [-682.63 -682.63 -682.63] (1.000)
Step: 84000, Reward: [-435.634 -435.634 -435.634] [36.3183], Avg: [-680.152 -680.152 -680.152] (1.000)
Step: 85000, Reward: [-480.685 -480.685 -480.685] [76.0956], Avg: [-678.717 -678.717 -678.717] (1.000)
Step: 86000, Reward: [-510.956 -510.956 -510.956] [103.3393], Avg: [-677.977 -677.977 -677.977] (1.000)
Step: 87000, Reward: [-484.729 -484.729 -484.729] [43.1296], Avg: [-676.271 -676.271 -676.271] (1.000)
Step: 88000, Reward: [-551.742 -551.742 -551.742] [56.8339], Avg: [-675.51 -675.51 -675.51] (1.000)
Step: 89000, Reward: [-422.995 -422.995 -422.995] [64.1846], Avg: [-673.418 -673.418 -673.418] (1.000)
Step: 90000, Reward: [-477.999 -477.999 -477.999] [43.7740], Avg: [-671.751 -671.751 -671.751] (1.000)
Step: 91000, Reward: [-491.461 -491.461 -491.461] [37.4348], Avg: [-670.199 -670.199 -670.199] (1.000)
Step: 92000, Reward: [-656.714 -656.714 -656.714] [109.3670], Avg: [-671.23 -671.23 -671.23] (1.000)
Step: 93000, Reward: [-500.186 -500.186 -500.186] [160.4733], Avg: [-671.117 -671.117 -671.117] (1.000)
Step: 94000, Reward: [-595.461 -595.461 -595.461] [43.6546], Avg: [-670.78 -670.78 -670.78] (1.000)
Step: 95000, Reward: [-671.413 -671.413 -671.413] [226.8284], Avg: [-673.15 -673.15 -673.15] (1.000)
Step: 96000, Reward: [-683.269 -683.269 -683.269] [109.9006], Avg: [-674.387 -674.387 -674.387] (1.000)
Step: 97000, Reward: [-568.803 -568.803 -568.803] [57.4060], Avg: [-673.895 -673.895 -673.895] (1.000)
Step: 98000, Reward: [-435.111 -435.111 -435.111] [27.1137], Avg: [-671.757 -671.757 -671.757] (1.000)
Step: 99000, Reward: [-532.227 -532.227 -532.227] [49.7960], Avg: [-670.86 -670.86 -670.86] (1.000)

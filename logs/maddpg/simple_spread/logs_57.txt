Model: <class 'multiagent.maddpg.MADDPGAgent'>, Dir: simple_spread
num_envs: 1, state_size: [(1, 18), (1, 18), (1, 18)], action_size: [[1, 5], [1, 5], [1, 5]], action_space: [<gym.spaces.multi_discrete.MultiDiscrete object at 0x7fac88fa1588>, <gym.spaces.multi_discrete.MultiDiscrete object at 0x7fac88fa1630>, <gym.spaces.multi_discrete.MultiDiscrete object at 0x7fac88fa16a0>],

import torch
import random
import numpy as np
from models.rand import MultiagentReplayBuffer
from models.ddpg import DDPGActor, DDPGCritic, DDPGNetwork
from utils.wrappers import ParallelAgent
from utils.network import PTNetwork, PTACAgent, LEARN_RATE, NUM_STEPS, EPS_MIN, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, MAX_BUFFER_SIZE, gumbel_softmax, one_hot

REPLAY_BATCH_SIZE = 1024
ENTROPY_WEIGHT = 0.001			# The weight for the entropy term of the Actor loss
EPS_DECAY = 0.995             	# The rate at which eps decays from EPS_MAX to EPS_MIN
INPUT_LAYER = 64
ACTOR_HIDDEN = 64
CRITIC_HIDDEN = 64
LEARN_RATE = 0.01
TARGET_UPDATE_RATE = 0.01

class MADDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.norm = torch.nn.BatchNorm1d(state_size[-1])
		self.norm.weight.data.fill_(1)
		self.norm.bias.data.fill_(0)

	def forward(self, state, sample=True):
		out_dims = state.size()[:-1]
		state = state.view(int(np.prod(out_dims)), -1)
		state = self.norm(state) if state.shape[0]>1 else state
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		action_mu = self.action_mu(state)
		action = gumbel_softmax(action_mu, hard=True)
		action = action.view(*out_dims, -1)
		return action
	
class MADDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1]+action_size[-1], INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.norm = torch.nn.BatchNorm1d(state_size[-1]+action_size[-1])
		self.norm.weight.data.fill_(1)
		self.norm.bias.data.fill_(0)

	def forward(self, state, action):
		state = torch.cat([state, action], -1)
		out_dims = state.size()[:-1]
		state = state.view(int(np.prod(out_dims)), -1)
		state = self.norm(state) if state.shape[0]>1 else state
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		q_value = self.q_value(state)
		q_value = q_value.view(*out_dims, -1)
		return q_value

class MADDPGNetwork(PTNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(tau=tau, gpu=gpu)
		self.state_size = state_size
		self.action_size = action_size
		self.critic = MADDPGCritic([np.sum([np.prod(s) for s in self.state_size])], [np.sum([np.prod(a) for a in self.action_size])])
		self.models = [DDPGNetwork(s_size, a_size, MADDPGActor, lambda s,a: self.critic, lr=lr, gpu=gpu, load=load) for s_size,a_size in zip(self.state_size, self.action_size)]
		
	def get_action_probs(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action = [model.get_action(s, use_target, grad, numpy, sample) for s,model in zip(state, self.models)]
			return action

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_value = [model.get_q_value(state, action, use_target, grad, numpy) for model in self.models]
			return q_value

	def optimize(self, states, actions, states_joint, actions_joint, q_targets, e_weight=ENTROPY_WEIGHT):
		for (i,model),state,q_target in zip(enumerate(self.models), states, q_targets):
			q_values = model.get_q_value(states_joint, actions_joint, grad=True, numpy=False)
			critic_error = q_values[:q_target.size(0)] - q_target.detach()
			critic_loss = critic_error.pow(2)
			model.step(model.critic_optimizer, critic_loss.mean(), param_norm=model.critic_local.parameters())
			model.soft_copy(model.critic_local, model.critic_target)

			actor_action = model.get_action(state, grad=True, numpy=False)
			critic_action = [actor_action if j==i else other.get_action(states[j], numpy=False) for j,other in enumerate(self.models)]
			action_joint = torch.cat([a.view(*a.size()[:-len(a_size)], np.prod(a_size)) for a,a_size in zip(critic_action, self.action_size)], dim=-1)
			q_actions = model.critic_local(states_joint, action_joint)
			actor_loss = -q_actions.mean() + e_weight*actor_action.pow(2).mean()
			model.step(model.actor_optimizer, actor_loss.mean(), param_norm=model.actor_local.parameters())
			model.soft_copy(model.actor_local, model.actor_target)

	def save_model(self, dirname="pytorch", name="best"):
		[model.save_model("maddpg", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]
		
	def load_model(self, dirname="pytorch", name="best"):
		[model.load_model("maddpg", dirname, f"{name}_{i}") for i,model in enumerate(self.models)]

class MADDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, decay=EPS_DECAY, gpu=True, load=None):
		super().__init__(state_size, action_size, MADDPGNetwork, lr=lr, update_freq=update_freq, decay=decay, gpu=gpu, load=load)
		self.agent = MADDPG(state_size, action_size)
		self.replay_buffer = MultiagentReplayBuffer(MAX_BUFFER_SIZE, self.agent.nagents, [obsp[-1] for obsp in state_size], [acsp[-1] for acsp in action_size])

	def get_action(self, state, eps=None, sample=True, numpy=True):
		state = [torch.autograd.Variable(torch.Tensor(np.vstack(state[i])), requires_grad=False) for i in range(self.agent.nagents)]
		torch_agent_actions = self.agent.step(state)
		agent_actions = [ac.data.numpy() for ac in torch_agent_actions]
		return agent_actions
		# eps = self.eps if eps is None else eps
		# action_random = super().get_action(state)
		# action_greedy = self.network.get_action_probs(self.to_tensor(state), sample=sample, numpy=numpy)
		# action = [(1-eps)*a_greedy + eps*a_random for a_greedy,a_random in zip(action_greedy, action_random)]
		# return action

	def train(self, state, action, next_state, reward, done):
		if not hasattr(self, "t"): self.t = 0
		self.replay_buffer.push(state, action, next_state, reward, done)
		if (len(self.replay_buffer) >= 1024 and (self.t % 100)==0):
			for a_i in range(self.agent.nagents):
				sample = self.replay_buffer.sample(1024, to_gpu=False)
				self.agent.update(sample, a_i)
		self.t += 1
		"""
			# self.buffer.append((state, action, reward, done))
			# if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			# 	states, actions, rewards, dones = map(lambda x: self.to_tensor(x), zip(*self.buffer))
			# 	self.buffer.clear()
			# 	next_state = self.to_tensor(next_state)
			# 	states = [torch.cat([s, ns.unsqueeze(0)], dim=0) for s,ns in zip(states, next_state)]
			# 	actions = [torch.cat([a, na.unsqueeze(0)], dim=0) for a,na in zip(actions, self.network.get_action_probs(next_state, use_target=True))]
			# 	states_joint = torch.cat([s.view(*s.size()[:-len(s_size)], np.prod(s_size)) for s,s_size in zip(states, self.state_size)], dim=-1)
			# 	actions_joint = torch.cat([a.view(*a.size()[:-len(a_size)], np.prod(a_size)) for a,a_size in zip(actions, self.action_size)], dim=-1)
			# 	q_values = self.network.get_q_value(states_joint, actions_joint, use_target=True)
			# 	q_targets = [self.compute_gae(q_value[-1], reward.unsqueeze(-1), done.unsqueeze(-1), q_value[:-1])[0] for q_value,reward,done in zip(q_values, rewards, dones)]
				
			# 	to_stack = lambda items: list(zip(*[x.view(-1, *x.shape[2:]).cpu().numpy() for x in items]))
			# 	states, actions, states_joint, actions_joint = map(lambda items: [x[:-1] for x in items], [states, actions, [states_joint], [actions_joint]])
			# 	states, actions, states_joint, actions_joint, q_targets = map(to_stack, [states, actions, states_joint, actions_joint, q_targets])
			# 	self.replay_buffer.extend(list(zip(states, actions, states_joint, actions_joint, q_targets)), shuffle=False)	
			# if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			# 	states, actions, states_joint, actions_joint, q_targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			# 	self.network.optimize(states, actions, states_joint[0], actions_joint[0], q_targets)
			# if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)
		"""

class MADDPG():
	def __init__(self, state_size, action_size, gamma=0.95, tau=0.01, lr=0.01):
		self.tau = tau
		self.gamma = gamma
		self.nagents = len(state_size)
		num_in_critic = np.sum([np.prod(s) for s in state_size]) + np.sum([np.prod(a) for a in action_size])
		self.agents = [DDPGAgent(s_size[-1], a_size[-1], num_in_critic) for s_size, a_size in zip(state_size, action_size)]

	def step(self, states):
		return [gumbel_softmax(a.policy(obs), hard=True) for a, obs in zip(self.agents, states)]

	def update(self, sample, agent_i, parallel=False, logger=None):
		states, actions, next_states, rewards, dones = sample
		curr_agent = self.agents[agent_i]

		actions = [one_hot(agent.target_policy(next_state)) for agent, next_state in zip(self.agents, next_states)]
		trgt_vf_in = torch.cat((*next_states, *actions), dim=1)
		target_value = (rewards[agent_i].view(-1, 1) + self.gamma * curr_agent.target_critic(trgt_vf_in) * (1 - dones[agent_i].view(-1, 1)))

		critic_inputs = torch.cat((*states, *actions), dim=1)
		actual_value = curr_agent.critic(critic_inputs)
		vf_loss = (actual_value - target_value.detach()).pow(2).mean()
		curr_agent.step(curr_agent.critic_optimizer, vf_loss, param_norm=curr_agent.critic.parameters())
		curr_agent.soft_copy(curr_agent.critic, curr_agent.target_critic)

		# curr_agent.critic_optimizer.zero_grad()
		# vf_loss.backward()
		# torch.nn.utils.clip_grad_norm_(curr_agent.critic.parameters(), 0.5)
		# curr_agent.critic_optimizer.step()

		curr_pol_out = curr_agent.policy(states[agent_i])
		curr_pol_vf_in = gumbel_softmax(curr_pol_out, hard=True)
		all_pol_acs = [curr_pol_vf_in if i==agent_i else one_hot(agent.policy(state)) for (i,agent), state in zip(enumerate(self.agents), states)]
		critic_inputs = torch.cat((*states, *all_pol_acs), dim=1)
		pol_loss = -curr_agent.critic(critic_inputs).mean() + 0.001*(curr_pol_out**2).mean() 
		curr_agent.step(curr_agent.policy_optimizer, pol_loss, param_norm=curr_agent.policy.parameters())
		curr_agent.soft_copy(curr_agent.policy, curr_agent.target_policy)

		# curr_agent.policy_optimizer.zero_grad()
		# pol_loss.backward()
		# torch.nn.utils.clip_grad_norm_(curr_agent.policy.parameters(), 0.5)
		# curr_agent.policy_optimizer.step()

	# def update_all_targets(self):
	# 	for a in self.agents:
	# 		a.soft_copy(a.critic, a.target_critic)
	# 		a.soft_copy(a.policy, a.target_policy)
			# for target_param, param in zip(a.target_critic.parameters(), a.critic.parameters()):
			# 	target_param.data.copy_(target_param.data * (1.0 - self.tau) + param.data * self.tau)
			# for target_param, param in zip(a.target_policy.parameters(), a.policy.parameters()):
			# 	target_param.data.copy_(target_param.data * (1.0 - self.tau) + param.data * self.tau)
		# self.niter += 1

	# def prep_training(self, device='gpu'):
	# 	for a in self.agents:
	# 		a.policy.train()
	# 		a.critic.train()
	# 		a.target_policy.train()
	# 		a.target_critic.train()

	# def prep_rollouts(self, device='cpu'):
	# 	for a in self.agents:
	# 		a.policy.eval()

class DDPGAgent(object):
	def __init__(self, num_in_pol, num_out_pol, num_in_critic, hidden_dim=64, lr=0.01, tau=0.01):
		self.policy = MLPNetwork(num_in_pol, num_out_pol, hidden_dim=hidden_dim)
		self.target_policy = MLPNetwork(num_in_pol, num_out_pol, hidden_dim=hidden_dim)
		self.policy_optimizer = torch.optim.Adam(self.policy.parameters(), lr=lr)
		
		self.critic = MLPNetwork(num_in_critic, 1, hidden_dim=hidden_dim)
		self.target_critic = MLPNetwork(num_in_critic, 1, hidden_dim=hidden_dim)
		self.critic_optimizer = torch.optim.Adam(self.critic.parameters(), lr=lr)
		
		self.tau = tau
		# for target_param, param in zip(self.target_policy.parameters(), self.policy.parameters()):
		# 	target_param.data.copy_(param.data)
		# for target_param, param in zip(self.target_critic.parameters(), self.critic.parameters()):
		# 	target_param.data.copy_(param.data)

	def soft_copy(self, local, target):
		for t,l in zip(target.parameters(), local.parameters()):
			t.data.copy_(t.data + self.tau*(l.data - t.data))

	def step(self, optimizer, loss, retain=False, param_norm=None):
		optimizer.zero_grad()
		loss.backward(retain_graph=retain)
		if param_norm is not None: torch.nn.utils.clip_grad_norm_(param_norm, 0.5)
		optimizer.step()

	# def step(self, obs, explore=False):
	# 	action = self.policy(obs)
	# 	if explore:
	# 		action = gumbel_softmax(action, hard=True)
	# 	else:
	# 		action = one_hot(action)
	# 	return action

class MLPNetwork(torch.nn.Module):
	def __init__(self, input_dim, out_dim, hidden_dim=64):
		super().__init__()

		# if norm_in:  # normalize inputs
		# 	self.in_fn = nn.BatchNorm1d(input_dim)
		# 	self.in_fn.weight.data.fill_(1)
		# 	self.in_fn.bias.data.fill_(0)
		# else:
		# 	self.in_fn = lambda x: x
		self.fc1 = torch.nn.Linear(input_dim, hidden_dim)
		self.fc2 = torch.nn.Linear(hidden_dim, hidden_dim)
		self.fc3 = torch.nn.Linear(hidden_dim, out_dim)
		# self.nonlin = nonlin
		# if constrain_out and not discrete_action:
		# 	self.fc3.weight.data.uniform_(-3e-3, 3e-3)
		# 	self.out_fn = torch.tanh
		# 	raise EnvironmentError()
		# else:  # logits for discrete action (will softmax later)
		# 	self.out_fn = lambda x: x

	def forward(self, X):
		h1 = self.fc1(X).relu()
		h2 = self.fc2(h1).relu()
		action = self.fc3(h2)
		return action
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 1					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.900             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step

import gym
import argparse
import numpy as np
import particle_envs.make_env as pgym
# import football.gfootball.env as ggym
from models.ppo import PPOAgent
from models.ddqn import DDQNAgent
from models.ddpg import DDPGAgent
from models.rand import RandomAgent
from multiagent.coma import COMAAgent
from multiagent.maddpg import MADDPGAgent
from multiagent.mappo import MAPPOAgent
from utils.wrappers import ParallelAgent, SelfPlayAgent, ParticleTeamEnv, FootballTeamEnv
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.misc import Logger, rollout
np.set_printoptions(precision=3)
# np.random.seed(1)

gym_envs = ["CartPole-v0", "MountainCar-v0", "Acrobot-v1", "Pendulum-v0", "MountainCarContinuous-v0", "CarRacing-v0", "BipedalWalker-v2", "BipedalWalkerHardcore-v2", "LunarLander-v2", "LunarLanderContinuous-v2"]
gfb_envs = ["academy_empty_goal_close", "academy_empty_goal", "academy_run_to_score", "academy_run_to_score_with_keeper", "academy_single_goal_versus_lazy", "academy_3_vs_1_with_keeper", "1_vs_1_easy", "3_vs_3_custom", "5_vs_5", "11_vs_11_stochastic", "test_example_multiagent"]
ptc_envs = ["simple_adversary", "simple_speaker_listener", "simple_tag", "simple_spread", "simple_push"]
env_name = gym_envs[0]
env_name = gfb_envs[-4]
env_name = ptc_envs[-2]

def make_env(env_name=env_name, log=False, render=False):
	if env_name in gym_envs: return gym.make(env_name)
	if env_name in ptc_envs: return ParticleTeamEnv(pgym.make_env(env_name))
	reps = ["pixels", "pixels_gray", "extracted", "simple115"]
	multiagent_args = {"number_of_left_players_agent_controls":3, "number_of_right_players_agent_controls":0} if env_name == "3_vs_3_custom" else {}
	env = ggym.create_environment(env_name=env_name, representation=reps[3], logdir='/football/logs/', render=render, **multiagent_args)
	if log: print(f"State space: {env.observation_space.shape} \nAction space: {env.action_space}")
	return FootballTeamEnv(env)

def run(model, steps=10000, ports=16, env_name=env_name, eval_at=1000, checkpoint=False, save_best=False, log=True, render=True):
	num_envs = len(ports) if type(ports) == list else min(ports, 64)
	envs = EnvManager(make_env, ports) if type(ports) == list else EnsembleEnv(make_env, ports, render=False, env_name=env_name)
	agent = ParallelAgent(envs.state_size, envs.action_size, model, num_envs=num_envs, gpu=False, agent2=RandomAgent) 
	logger = Logger(model, env_name, num_envs=num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space)
	states = envs.reset()
	total_rewards = []
	for s in range(steps):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if np.any(dones[0]):
			rollouts = [rollout(envs.env, agent.reset(1), render=render) for _ in range(1)]
			test_reward = np.mean(rollouts, axis=0) - np.std(rollouts, axis=0)
			total_rewards.append(test_reward)
			if checkpoint: agent.save_model(env_name, "checkpoint")
			if save_best and total_rewards[-1] >= max(total_rewards): agent.save_model(env_name)
			if log: logger.log(f"Step: {s}, Reward: {test_reward+np.std(rollouts, axis=0)} [{np.std(rollouts):.4f}], Avg: {np.mean(total_rewards, axis=0)} ({agent.agent.eps:.3f})")
			agent.reset(num_envs)

def trial(model):
	envs = EnsembleEnv(make_env, 0, log=True, render=True)
	agent = ParallelAgent(envs.state_size, envs.action_size, model, load=f"{env_name}")
	print(f"Reward: {rollout(envs.env, agent, eps=0.02, render=True)}")
	envs.close()

def parse_args():
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--workerports", type=int, default=[1], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--selfport", type=int, default=None, help="Which port to listen on (as a worker server)")
	parser.add_argument("--model", type=str, default="maddpg", help="Which reinforcement learning algorithm to use")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	parser.add_argument("--render", action="store_true", help="Whether to render during training")
	parser.add_argument("--test", action="store_true", help="Whether to show a trial run")
	parser.add_argument("--env", type=str, default="", help="Name of env to use")
	return parser.parse_args()

if __name__ == "__main__":
	args = parse_args()
	env_name = env_name if args.env not in [*gym_envs, *gfb_envs, *ptc_envs] else args.env
	models = {"ddpg":DDPGAgent, "ppo":PPOAgent, "ddqn":DDQNAgent, "maddpg":MADDPGAgent, "mappo":MAPPOAgent, "coma":COMAAgent}
	model = models[args.model] if args.model in models else RandomAgent
	if args.test:
		trial(model)
	elif args.selfport is not None:
		EnvWorker(args.selfport, make_env).start()
	else:
		run(model, args.steps, args.workerports[0] if len(args.workerports)==1 else args.workerports, env_name=env_name, render=args.render)

Step: 49, Reward: [-492.93 -492.93 -492.93] [0.0000], Avg: [-492.93 -492.93 -492.93] (1.000)
Step: 99, Reward: [-458.682 -458.682 -458.682] [0.0000], Avg: [-475.806 -475.806 -475.806] (1.000)
Step: 149, Reward: [-600.244 -600.244 -600.244] [0.0000], Avg: [-517.285 -517.285 -517.285] (1.000)
Step: 199, Reward: [-537.871 -537.871 -537.871] [0.0000], Avg: [-522.432 -522.432 -522.432] (1.000)
Step: 249, Reward: [-421.973 -421.973 -421.973] [0.0000], Avg: [-502.34 -502.34 -502.34] (1.000)
Step: 299, Reward: [-598.029 -598.029 -598.029] [0.0000], Avg: [-518.288 -518.288 -518.288] (1.000)
Step: 349, Reward: [-379.226 -379.226 -379.226] [0.0000], Avg: [-498.422 -498.422 -498.422] (1.000)
Step: 399, Reward: [-427.304 -427.304 -427.304] [0.0000], Avg: [-489.532 -489.532 -489.532] (1.000)
Step: 449, Reward: [-377.949 -377.949 -377.949] [0.0000], Avg: [-477.134 -477.134 -477.134] (1.000)
Step: 499, Reward: [-381.07 -381.07 -381.07] [0.0000], Avg: [-467.528 -467.528 -467.528] (1.000)
Step: 549, Reward: [-381.305 -381.305 -381.305] [0.0000], Avg: [-459.689 -459.689 -459.689] (1.000)
Step: 599, Reward: [-538.265 -538.265 -538.265] [0.0000], Avg: [-466.237 -466.237 -466.237] (1.000)
Step: 649, Reward: [-475.173 -475.173 -475.173] [0.0000], Avg: [-466.924 -466.924 -466.924] (1.000)
Step: 699, Reward: [-452.746 -452.746 -452.746] [0.0000], Avg: [-465.912 -465.912 -465.912] (1.000)
Step: 749, Reward: [-497.421 -497.421 -497.421] [0.0000], Avg: [-468.012 -468.012 -468.012] (1.000)
Step: 799, Reward: [-436.372 -436.372 -436.372] [0.0000], Avg: [-466.035 -466.035 -466.035] (1.000)
Step: 849, Reward: [-413.191 -413.191 -413.191] [0.0000], Avg: [-462.926 -462.926 -462.926] (1.000)
Step: 899, Reward: [-500.218 -500.218 -500.218] [0.0000], Avg: [-464.998 -464.998 -464.998] (1.000)
Step: 949, Reward: [-477.508 -477.508 -477.508] [0.0000], Avg: [-465.657 -465.657 -465.657] (1.000)
Step: 999, Reward: [-749.319 -749.319 -749.319] [0.0000], Avg: [-479.84 -479.84 -479.84] (1.000)
Step: 1049, Reward: [-404.695 -404.695 -404.695] [0.0000], Avg: [-476.261 -476.261 -476.261] (1.000)
Step: 1099, Reward: [-425.725 -425.725 -425.725] [0.0000], Avg: [-473.964 -473.964 -473.964] (1.000)
Step: 1149, Reward: [-495.431 -495.431 -495.431] [0.0000], Avg: [-474.898 -474.898 -474.898] (1.000)
Step: 1199, Reward: [-693.842 -693.842 -693.842] [0.0000], Avg: [-484.02 -484.02 -484.02] (1.000)
Step: 1249, Reward: [-459.242 -459.242 -459.242] [0.0000], Avg: [-483.029 -483.029 -483.029] (1.000)
Step: 1299, Reward: [-530.134 -530.134 -530.134] [0.0000], Avg: [-484.841 -484.841 -484.841] (1.000)
Step: 1349, Reward: [-572.596 -572.596 -572.596] [0.0000], Avg: [-488.091 -488.091 -488.091] (1.000)
Step: 1399, Reward: [-545.972 -545.972 -545.972] [0.0000], Avg: [-490.158 -490.158 -490.158] (1.000)
Step: 1449, Reward: [-779.122 -779.122 -779.122] [0.0000], Avg: [-500.122 -500.122 -500.122] (1.000)
Step: 1499, Reward: [-641.203 -641.203 -641.203] [0.0000], Avg: [-504.825 -504.825 -504.825] (1.000)
Step: 1549, Reward: [-501.416 -501.416 -501.416] [0.0000], Avg: [-504.715 -504.715 -504.715] (1.000)
Step: 1599, Reward: [-586.763 -586.763 -586.763] [0.0000], Avg: [-507.279 -507.279 -507.279] (1.000)
Step: 1649, Reward: [-985.447 -985.447 -985.447] [0.0000], Avg: [-521.769 -521.769 -521.769] (1.000)
Step: 1699, Reward: [-697.281 -697.281 -697.281] [0.0000], Avg: [-526.931 -526.931 -526.931] (1.000)
Step: 1749, Reward: [-1581.203 -1581.203 -1581.203] [0.0000], Avg: [-557.053 -557.053 -557.053] (1.000)
Step: 1799, Reward: [-1447.841 -1447.841 -1447.841] [0.0000], Avg: [-581.797 -581.797 -581.797] (1.000)
Step: 1849, Reward: [-1186.745 -1186.745 -1186.745] [0.0000], Avg: [-598.147 -598.147 -598.147] (1.000)
Step: 1899, Reward: [-1877.334 -1877.334 -1877.334] [0.0000], Avg: [-631.81 -631.81 -631.81] (1.000)
Step: 1949, Reward: [-1362.895 -1362.895 -1362.895] [0.0000], Avg: [-650.556 -650.556 -650.556] (1.000)
Step: 1999, Reward: [-1413.645 -1413.645 -1413.645] [0.0000], Avg: [-669.633 -669.633 -669.633] (1.000)
Step: 2049, Reward: [-1342.852 -1342.852 -1342.852] [0.0000], Avg: [-686.053 -686.053 -686.053] (1.000)
Step: 2099, Reward: [-1323.052 -1323.052 -1323.052] [0.0000], Avg: [-701.22 -701.22 -701.22] (1.000)
Step: 2149, Reward: [-1393.386 -1393.386 -1393.386] [0.0000], Avg: [-717.317 -717.317 -717.317] (1.000)
Step: 2199, Reward: [-1712.843 -1712.843 -1712.843] [0.0000], Avg: [-739.942 -739.942 -739.942] (1.000)
Step: 2249, Reward: [-1548.535 -1548.535 -1548.535] [0.0000], Avg: [-757.911 -757.911 -757.911] (1.000)
Step: 2299, Reward: [-2158.084 -2158.084 -2158.084] [0.0000], Avg: [-788.349 -788.349 -788.349] (1.000)
Step: 2349, Reward: [-1496.56 -1496.56 -1496.56] [0.0000], Avg: [-803.418 -803.418 -803.418] (1.000)
Step: 2399, Reward: [-1589.662 -1589.662 -1589.662] [0.0000], Avg: [-819.798 -819.798 -819.798] (1.000)
Step: 2449, Reward: [-1268.25 -1268.25 -1268.25] [0.0000], Avg: [-828.95 -828.95 -828.95] (1.000)
Step: 2499, Reward: [-1455.421 -1455.421 -1455.421] [0.0000], Avg: [-841.479 -841.479 -841.479] (1.000)
Step: 2549, Reward: [-1168.069 -1168.069 -1168.069] [0.0000], Avg: [-847.883 -847.883 -847.883] (1.000)
Step: 2599, Reward: [-1116.073 -1116.073 -1116.073] [0.0000], Avg: [-853.041 -853.041 -853.041] (1.000)
Step: 2649, Reward: [-1166.326 -1166.326 -1166.326] [0.0000], Avg: [-858.952 -858.952 -858.952] (1.000)
Step: 2699, Reward: [-1399.767 -1399.767 -1399.767] [0.0000], Avg: [-868.967 -868.967 -868.967] (1.000)
Step: 2749, Reward: [-882.656 -882.656 -882.656] [0.0000], Avg: [-869.216 -869.216 -869.216] (1.000)
Step: 2799, Reward: [-1050.978 -1050.978 -1050.978] [0.0000], Avg: [-872.461 -872.461 -872.461] (1.000)
Step: 2849, Reward: [-1310.802 -1310.802 -1310.802] [0.0000], Avg: [-880.152 -880.152 -880.152] (1.000)
Step: 2899, Reward: [-1015.214 -1015.214 -1015.214] [0.0000], Avg: [-882.48 -882.48 -882.48] (1.000)
Step: 2949, Reward: [-1250.37 -1250.37 -1250.37] [0.0000], Avg: [-888.716 -888.716 -888.716] (1.000)
Step: 2999, Reward: [-863.969 -863.969 -863.969] [0.0000], Avg: [-888.303 -888.303 -888.303] (1.000)
Step: 3049, Reward: [-1171.512 -1171.512 -1171.512] [0.0000], Avg: [-892.946 -892.946 -892.946] (1.000)
Step: 3099, Reward: [-1410.885 -1410.885 -1410.885] [0.0000], Avg: [-901.3 -901.3 -901.3] (1.000)
Step: 3149, Reward: [-1573.488 -1573.488 -1573.488] [0.0000], Avg: [-911.969 -911.969 -911.969] (1.000)
Step: 3199, Reward: [-1236.936 -1236.936 -1236.936] [0.0000], Avg: [-917.047 -917.047 -917.047] (1.000)
Step: 3249, Reward: [-1174.516 -1174.516 -1174.516] [0.0000], Avg: [-921.008 -921.008 -921.008] (1.000)
Step: 3299, Reward: [-1205.395 -1205.395 -1205.395] [0.0000], Avg: [-925.317 -925.317 -925.317] (1.000)
Step: 3349, Reward: [-1554.916 -1554.916 -1554.916] [0.0000], Avg: [-934.714 -934.714 -934.714] (1.000)
Step: 3399, Reward: [-1233.109 -1233.109 -1233.109] [0.0000], Avg: [-939.102 -939.102 -939.102] (1.000)
Step: 3449, Reward: [-1695.538 -1695.538 -1695.538] [0.0000], Avg: [-950.065 -950.065 -950.065] (1.000)
Step: 3499, Reward: [-1469.219 -1469.219 -1469.219] [0.0000], Avg: [-957.482 -957.482 -957.482] (1.000)
Step: 3549, Reward: [-1830.012 -1830.012 -1830.012] [0.0000], Avg: [-969.771 -969.771 -969.771] (1.000)
Step: 3599, Reward: [-1361.335 -1361.335 -1361.335] [0.0000], Avg: [-975.209 -975.209 -975.209] (1.000)
Step: 3649, Reward: [-1468.401 -1468.401 -1468.401] [0.0000], Avg: [-981.965 -981.965 -981.965] (1.000)
Step: 3699, Reward: [-1695.845 -1695.845 -1695.845] [0.0000], Avg: [-991.612 -991.612 -991.612] (1.000)
Step: 3749, Reward: [-1666.152 -1666.152 -1666.152] [0.0000], Avg: [-1000.606 -1000.606 -1000.606] (1.000)
Step: 3799, Reward: [-1247.973 -1247.973 -1247.973] [0.0000], Avg: [-1003.861 -1003.861 -1003.861] (1.000)
Step: 3849, Reward: [-1202.313 -1202.313 -1202.313] [0.0000], Avg: [-1006.438 -1006.438 -1006.438] (1.000)
Step: 3899, Reward: [-1315.105 -1315.105 -1315.105] [0.0000], Avg: [-1010.395 -1010.395 -1010.395] (1.000)
Step: 3949, Reward: [-1587.132 -1587.132 -1587.132] [0.0000], Avg: [-1017.696 -1017.696 -1017.696] (1.000)
Step: 3999, Reward: [-2040.423 -2040.423 -2040.423] [0.0000], Avg: [-1030.48 -1030.48 -1030.48] (1.000)
Step: 4049, Reward: [-1495.579 -1495.579 -1495.579] [0.0000], Avg: [-1036.222 -1036.222 -1036.222] (1.000)
Step: 4099, Reward: [-1433.085 -1433.085 -1433.085] [0.0000], Avg: [-1041.062 -1041.062 -1041.062] (1.000)
Step: 4149, Reward: [-1816.35 -1816.35 -1816.35] [0.0000], Avg: [-1050.403 -1050.403 -1050.403] (1.000)
Step: 4199, Reward: [-1463.997 -1463.997 -1463.997] [0.0000], Avg: [-1055.326 -1055.326 -1055.326] (1.000)
Step: 4249, Reward: [-2052.966 -2052.966 -2052.966] [0.0000], Avg: [-1067.063 -1067.063 -1067.063] (1.000)
Step: 4299, Reward: [-1776.01 -1776.01 -1776.01] [0.0000], Avg: [-1075.307 -1075.307 -1075.307] (1.000)
Step: 4349, Reward: [-2038.996 -2038.996 -2038.996] [0.0000], Avg: [-1086.384 -1086.384 -1086.384] (1.000)
Step: 4399, Reward: [-1971.994 -1971.994 -1971.994] [0.0000], Avg: [-1096.447 -1096.447 -1096.447] (1.000)
Step: 4449, Reward: [-1704.03 -1704.03 -1704.03] [0.0000], Avg: [-1103.274 -1103.274 -1103.274] (1.000)
Step: 4499, Reward: [-1983.997 -1983.997 -1983.997] [0.0000], Avg: [-1113.06 -1113.06 -1113.06] (1.000)
Step: 4549, Reward: [-2226.234 -2226.234 -2226.234] [0.0000], Avg: [-1125.293 -1125.293 -1125.293] (1.000)
Step: 4599, Reward: [-1847.529 -1847.529 -1847.529] [0.0000], Avg: [-1133.143 -1133.143 -1133.143] (1.000)
Step: 4649, Reward: [-1946.177 -1946.177 -1946.177] [0.0000], Avg: [-1141.885 -1141.885 -1141.885] (1.000)
Step: 4699, Reward: [-1712.37 -1712.37 -1712.37] [0.0000], Avg: [-1147.954 -1147.954 -1147.954] (1.000)
Step: 4749, Reward: [-1806.801 -1806.801 -1806.801] [0.0000], Avg: [-1154.89 -1154.89 -1154.89] (1.000)
Step: 4799, Reward: [-1889.83 -1889.83 -1889.83] [0.0000], Avg: [-1162.545 -1162.545 -1162.545] (1.000)
Step: 4849, Reward: [-1900.503 -1900.503 -1900.503] [0.0000], Avg: [-1170.153 -1170.153 -1170.153] (1.000)
Step: 4899, Reward: [-1849.292 -1849.292 -1849.292] [0.0000], Avg: [-1177.083 -1177.083 -1177.083] (1.000)
Step: 4949, Reward: [-1772.402 -1772.402 -1772.402] [0.0000], Avg: [-1183.096 -1183.096 -1183.096] (1.000)
Step: 4999, Reward: [-1875.913 -1875.913 -1875.913] [0.0000], Avg: [-1190.025 -1190.025 -1190.025] (1.000)
Step: 5049, Reward: [-1901.114 -1901.114 -1901.114] [0.0000], Avg: [-1197.065 -1197.065 -1197.065] (1.000)
Step: 5099, Reward: [-1664.668 -1664.668 -1664.668] [0.0000], Avg: [-1201.649 -1201.649 -1201.649] (1.000)
Step: 5149, Reward: [-1794.449 -1794.449 -1794.449] [0.0000], Avg: [-1207.405 -1207.405 -1207.405] (1.000)
Step: 5199, Reward: [-1525.83 -1525.83 -1525.83] [0.0000], Avg: [-1210.466 -1210.466 -1210.466] (1.000)
Step: 5249, Reward: [-1718.695 -1718.695 -1718.695] [0.0000], Avg: [-1215.307 -1215.307 -1215.307] (1.000)
Step: 5299, Reward: [-2035.837 -2035.837 -2035.837] [0.0000], Avg: [-1223.048 -1223.048 -1223.048] (1.000)
Step: 5349, Reward: [-2010.922 -2010.922 -2010.922] [0.0000], Avg: [-1230.411 -1230.411 -1230.411] (1.000)
Step: 5399, Reward: [-2044.181 -2044.181 -2044.181] [0.0000], Avg: [-1237.946 -1237.946 -1237.946] (1.000)
Step: 5449, Reward: [-1631.631 -1631.631 -1631.631] [0.0000], Avg: [-1241.558 -1241.558 -1241.558] (1.000)
Step: 5499, Reward: [-1759.445 -1759.445 -1759.445] [0.0000], Avg: [-1246.266 -1246.266 -1246.266] (1.000)
Step: 5549, Reward: [-1678.127 -1678.127 -1678.127] [0.0000], Avg: [-1250.156 -1250.156 -1250.156] (1.000)
Step: 5599, Reward: [-2111.107 -2111.107 -2111.107] [0.0000], Avg: [-1257.843 -1257.843 -1257.843] (1.000)
Step: 5649, Reward: [-2219.672 -2219.672 -2219.672] [0.0000], Avg: [-1266.355 -1266.355 -1266.355] (1.000)
Step: 5699, Reward: [-1762.946 -1762.946 -1762.946] [0.0000], Avg: [-1270.711 -1270.711 -1270.711] (1.000)
Step: 5749, Reward: [-2079.372 -2079.372 -2079.372] [0.0000], Avg: [-1277.743 -1277.743 -1277.743] (1.000)
Step: 5799, Reward: [-1792.916 -1792.916 -1792.916] [0.0000], Avg: [-1282.184 -1282.184 -1282.184] (1.000)
Step: 5849, Reward: [-1764.953 -1764.953 -1764.953] [0.0000], Avg: [-1286.31 -1286.31 -1286.31] (1.000)
Step: 5899, Reward: [-1877.765 -1877.765 -1877.765] [0.0000], Avg: [-1291.323 -1291.323 -1291.323] (1.000)
Step: 5949, Reward: [-1681.475 -1681.475 -1681.475] [0.0000], Avg: [-1294.601 -1294.601 -1294.601] (1.000)
Step: 5999, Reward: [-1871.061 -1871.061 -1871.061] [0.0000], Avg: [-1299.405 -1299.405 -1299.405] (1.000)
Step: 6049, Reward: [-1717.562 -1717.562 -1717.562] [0.0000], Avg: [-1302.861 -1302.861 -1302.861] (1.000)
Step: 6099, Reward: [-1854.762 -1854.762 -1854.762] [0.0000], Avg: [-1307.385 -1307.385 -1307.385] (1.000)
Step: 6149, Reward: [-2280.809 -2280.809 -2280.809] [0.0000], Avg: [-1315.299 -1315.299 -1315.299] (1.000)
Step: 6199, Reward: [-1827.51 -1827.51 -1827.51] [0.0000], Avg: [-1319.43 -1319.43 -1319.43] (1.000)
Step: 6249, Reward: [-1766.376 -1766.376 -1766.376] [0.0000], Avg: [-1323.005 -1323.005 -1323.005] (1.000)
Step: 6299, Reward: [-1784.741 -1784.741 -1784.741] [0.0000], Avg: [-1326.67 -1326.67 -1326.67] (1.000)
Step: 6349, Reward: [-1786.738 -1786.738 -1786.738] [0.0000], Avg: [-1330.292 -1330.292 -1330.292] (1.000)
Step: 6399, Reward: [-1786.915 -1786.915 -1786.915] [0.0000], Avg: [-1333.86 -1333.86 -1333.86] (1.000)
Step: 6449, Reward: [-1387.605 -1387.605 -1387.605] [0.0000], Avg: [-1334.276 -1334.276 -1334.276] (1.000)
Step: 6499, Reward: [-1924.858 -1924.858 -1924.858] [0.0000], Avg: [-1338.819 -1338.819 -1338.819] (1.000)
Step: 6549, Reward: [-1984.269 -1984.269 -1984.269] [0.0000], Avg: [-1343.746 -1343.746 -1343.746] (1.000)
Step: 6599, Reward: [-1618.167 -1618.167 -1618.167] [0.0000], Avg: [-1345.825 -1345.825 -1345.825] (1.000)
Step: 6649, Reward: [-1841.643 -1841.643 -1841.643] [0.0000], Avg: [-1349.553 -1349.553 -1349.553] (1.000)
Step: 6699, Reward: [-2141.015 -2141.015 -2141.015] [0.0000], Avg: [-1355.46 -1355.46 -1355.46] (1.000)
Step: 6749, Reward: [-1931.067 -1931.067 -1931.067] [0.0000], Avg: [-1359.723 -1359.723 -1359.723] (1.000)
Step: 6799, Reward: [-2065.353 -2065.353 -2065.353] [0.0000], Avg: [-1364.912 -1364.912 -1364.912] (1.000)
Step: 6849, Reward: [-2117.247 -2117.247 -2117.247] [0.0000], Avg: [-1370.403 -1370.403 -1370.403] (1.000)
Step: 6899, Reward: [-1643.19 -1643.19 -1643.19] [0.0000], Avg: [-1372.38 -1372.38 -1372.38] (1.000)
Step: 6949, Reward: [-2245.333 -2245.333 -2245.333] [0.0000], Avg: [-1378.66 -1378.66 -1378.66] (1.000)
Step: 6999, Reward: [-1862.101 -1862.101 -1862.101] [0.0000], Avg: [-1382.113 -1382.113 -1382.113] (1.000)
Step: 7049, Reward: [-1901.86 -1901.86 -1901.86] [0.0000], Avg: [-1385.8 -1385.8 -1385.8] (1.000)
Step: 7099, Reward: [-2308.15 -2308.15 -2308.15] [0.0000], Avg: [-1392.295 -1392.295 -1392.295] (1.000)
Step: 7149, Reward: [-2148.203 -2148.203 -2148.203] [0.0000], Avg: [-1397.581 -1397.581 -1397.581] (1.000)
Step: 7199, Reward: [-1848.19 -1848.19 -1848.19] [0.0000], Avg: [-1400.71 -1400.71 -1400.71] (1.000)
Step: 7249, Reward: [-2025.635 -2025.635 -2025.635] [0.0000], Avg: [-1405.02 -1405.02 -1405.02] (1.000)
Step: 7299, Reward: [-1856.547 -1856.547 -1856.547] [0.0000], Avg: [-1408.113 -1408.113 -1408.113] (1.000)
Step: 7349, Reward: [-2031.118 -2031.118 -2031.118] [0.0000], Avg: [-1412.351 -1412.351 -1412.351] (1.000)
Step: 7399, Reward: [-1533.152 -1533.152 -1533.152] [0.0000], Avg: [-1413.167 -1413.167 -1413.167] (1.000)
Step: 7449, Reward: [-1903.004 -1903.004 -1903.004] [0.0000], Avg: [-1416.455 -1416.455 -1416.455] (1.000)
Step: 7499, Reward: [-1719.469 -1719.469 -1719.469] [0.0000], Avg: [-1418.475 -1418.475 -1418.475] (1.000)
Step: 7549, Reward: [-1854.263 -1854.263 -1854.263] [0.0000], Avg: [-1421.361 -1421.361 -1421.361] (1.000)
Step: 7599, Reward: [-2297.669 -2297.669 -2297.669] [0.0000], Avg: [-1427.126 -1427.126 -1427.126] (1.000)
Step: 7649, Reward: [-1906.315 -1906.315 -1906.315] [0.0000], Avg: [-1430.258 -1430.258 -1430.258] (1.000)
Step: 7699, Reward: [-1764.715 -1764.715 -1764.715] [0.0000], Avg: [-1432.43 -1432.43 -1432.43] (1.000)
Step: 7749, Reward: [-1616.914 -1616.914 -1616.914] [0.0000], Avg: [-1433.62 -1433.62 -1433.62] (1.000)
Step: 7799, Reward: [-2049.92 -2049.92 -2049.92] [0.0000], Avg: [-1437.571 -1437.571 -1437.571] (1.000)
Step: 7849, Reward: [-1900.485 -1900.485 -1900.485] [0.0000], Avg: [-1440.519 -1440.519 -1440.519] (1.000)
Step: 7899, Reward: [-1743.656 -1743.656 -1743.656] [0.0000], Avg: [-1442.438 -1442.438 -1442.438] (1.000)
Step: 7949, Reward: [-1932.276 -1932.276 -1932.276] [0.0000], Avg: [-1445.518 -1445.518 -1445.518] (1.000)
Step: 7999, Reward: [-2023.428 -2023.428 -2023.428] [0.0000], Avg: [-1449.13 -1449.13 -1449.13] (1.000)
Step: 8049, Reward: [-1999.035 -1999.035 -1999.035] [0.0000], Avg: [-1452.546 -1452.546 -1452.546] (1.000)
Step: 8099, Reward: [-1865.601 -1865.601 -1865.601] [0.0000], Avg: [-1455.096 -1455.096 -1455.096] (1.000)
Step: 8149, Reward: [-1706.476 -1706.476 -1706.476] [0.0000], Avg: [-1456.638 -1456.638 -1456.638] (1.000)
Step: 8199, Reward: [-1701.187 -1701.187 -1701.187] [0.0000], Avg: [-1458.129 -1458.129 -1458.129] (1.000)
Step: 8249, Reward: [-2099.236 -2099.236 -2099.236] [0.0000], Avg: [-1462.014 -1462.014 -1462.014] (1.000)
Step: 8299, Reward: [-2133.524 -2133.524 -2133.524] [0.0000], Avg: [-1466.06 -1466.06 -1466.06] (1.000)
Step: 8349, Reward: [-2070.053 -2070.053 -2070.053] [0.0000], Avg: [-1469.676 -1469.676 -1469.676] (1.000)
Step: 8399, Reward: [-2124.134 -2124.134 -2124.134] [0.0000], Avg: [-1473.572 -1473.572 -1473.572] (1.000)
Step: 8449, Reward: [-1713.134 -1713.134 -1713.134] [0.0000], Avg: [-1474.99 -1474.99 -1474.99] (1.000)
